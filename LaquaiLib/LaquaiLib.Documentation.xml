<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LaquaiLib</name>
    </assembly>
    <members>
        <member name="T:LaquaiLib.Classes.Collections.BinaryTree`1">
            <summary>
            Represents a binary tree, that is, a tree data structure in which each node has at most two children.
            </summary>
        </member>
        <member name="T:LaquaiLib.Classes.Collections.BinaryTree`1.Node">
            <summary>
            Represents a node in a binary tree.
            </summary>
        </member>
        <member name="P:LaquaiLib.Classes.Collections.BinaryTree`1.Node.Left">
            <summary>
            The left child of this <see cref="T:LaquaiLib.Classes.Collections.BinaryTree`1.Node"/>. May be <c>null</c> if this <see cref="T:LaquaiLib.Classes.Collections.BinaryTree`1.Node"/> has no left child.
            </summary>
        </member>
        <member name="P:LaquaiLib.Classes.Collections.BinaryTree`1.Node.Right">
            <summary>
            The right child of this <see cref="T:LaquaiLib.Classes.Collections.BinaryTree`1.Node"/>. May be <c>null</c> if this <see cref="T:LaquaiLib.Classes.Collections.BinaryTree`1.Node"/> has no right child.
            </summary>
        </member>
        <member name="T:LaquaiLib.Classes.Collections.ConsoleQueue">
            <summary>
            Represents a (thread-safe) wrapper around the <see cref="T:System.Console"/>. It is used to postpone blocking console output until after any expensive computations are completed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Classes.Collections.ConsoleQueue.consoleLock">
            <summary>
            The <see cref="T:System.Object"/> used to lock when attempting to write to the <see cref="T:System.Console"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Classes.Collections.ConsoleQueue.Queue">
            <summary>
            The internal queue of objects to eventually output to the <see cref="T:System.Console"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.ConsoleQueue.Enqueue(System.Object)">
            <summary>
            Adds an object to the end of the internal queue.
            </summary>
            <param name="obj">The object to eventually output to the <see cref="T:System.Console"/>.</param>
            <returns>The index of the position in the internal queue at which <paramref name="obj"/> is.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.ConsoleQueue.Flush">
            <summary>
            Flushes all contents of the internal queue into the <see cref="T:System.Console"/>. This operation blocks until all objects in the internal queue have been output.
            </summary>
            <returns>The number of objects written to the <see cref="T:System.Console"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.ConsoleQueue.Flush``1(System.Func{System.Object,``0})">
            <summary>
            Flushes all contents of the internal queue into the <see cref="T:System.Console"/> after invoking a transform function on them. This operation blocks until all objects in the internal queue have been output.
            </summary>
            <returns>The number of objects written to the <see cref="T:System.Console"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedConcurrentQueue`1">
            <summary>
            Represents a <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> with a maximum number of items allowed in it. When the collection is at capacity and it is attempted to enqueue another object, the oldest is removed.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
        </member>
        <member name="P:LaquaiLib.Classes.Collections.LimitedCollections.LimitedConcurrentQueue`1.Capacity">
            <summary>
            The capacity of this <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedConcurrentQueue`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.LimitedCollections.LimitedConcurrentQueue`1.#ctor">
            <summary>
            Instantiates a new empty <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedConcurrentQueue`1"/> with the default maximum capacity.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.LimitedCollections.LimitedConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedConcurrentQueue`1"/> with the items from the passed <paramref name="collection"/>. Its maximum capacity is set to <paramref name="collection"/>'s length.
            </summary>
            <param name="collection">The collection to copy the new <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedConcurrentQueue`1"/>'s items from.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.LimitedCollections.LimitedConcurrentQueue`1.#ctor(System.Int32)">
            <summary>
            Instantiates a new empty <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedConcurrentQueue`1"/> with the given maximum <paramref name="capacity"/>.
            </summary>
            <param name="capacity">The maximum number of items this <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedConcurrentQueue`1"/> can hold before discarding the oldest value.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.LimitedCollections.LimitedConcurrentQueue`1.Enqueue(`0)">
            <summary>
            Forcibly adds an item to the end of the <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedConcurrentQueue`1"/>, discarding the oldest item if the collection is at maximum capacity.
            </summary>
            <param name="item">The item to add to the <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedConcurrentQueue`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.LimitedCollections.LimitedConcurrentQueue`1.TryEnqueue(`0)">
            <summary>
            Attempts to add an item to the end of the <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedConcurrentQueue`1"/>. If this would cause the oldest item to be discarded because the collection is at capacity, the collection remains unchanged.
            </summary>
            <param name="item">The object to add to the <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedConcurrentQueue`1"/>.</param>
            <returns>A value indicating whether the collection was modified; <c>true</c> if <paramref name="item"/> could be added, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.LimitedCollections.LimitedConcurrentQueue`1.Reduce(System.Int32)">
            <summary>
            Removes items from the <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedConcurrentQueue`1"/>, discarding the oldest items until the passed <paramref name="length"/> is reached.
            </summary>
            <param name="length">The number of items to remain in the collection.</param>
        </member>
        <member name="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedQueue`1">
            <summary>
            Represents a <see cref="T:System.Collections.Generic.Queue`1"/> with a maximum number of items allowed in it. When the collection is at capacity and it is attempted to enqueue another object, the oldest is removed.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
        </member>
        <member name="P:LaquaiLib.Classes.Collections.LimitedCollections.LimitedQueue`1.Capacity">
            <summary>
            The capacity of this <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedQueue`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.LimitedCollections.LimitedQueue`1.#ctor">
            <summary>
            Instantiates a new empty <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedQueue`1"/> with the default maximum capacity.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.LimitedCollections.LimitedQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedQueue`1"/> with the items from the passed <paramref name="collection"/>. Its maximum capacity is set to <paramref name="collection"/>'s length.
            </summary>
            <param name="collection">The collection to copy the new <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedQueue`1"/>'s items from.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.LimitedCollections.LimitedQueue`1.#ctor(System.Int32)">
            <summary>
            Instantiates a new empty <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedQueue`1"/> with the given maximum <paramref name="capacity"/>.
            </summary>
            <param name="capacity">The maximum number of items this <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedQueue`1"/> can hold before discarding the oldest value.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.LimitedCollections.LimitedQueue`1.Enqueue(`0)">
            <summary>
            Forcibly adds an item to the end of the <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedQueue`1"/>, discarding the oldest item if the collection is at maximum capacity.
            </summary>
            <param name="item">The item to add to the <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedQueue`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.LimitedCollections.LimitedQueue`1.TryEnqueue(`0)">
            <summary>
            Attempts to add an item to the end of the <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedQueue`1"/>. If this would cause the oldest item to be discarded because the collection is at capacity, the collection remains unchanged.
            </summary>
            <param name="item">The object to add to the <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedQueue`1"/>.</param>
            <returns>A value indicating whether the collection was modified; <c>true</c> if <paramref name="item"/> could be added, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.LimitedCollections.LimitedQueue`1.Reduce(System.Int32)">
            <summary>
            Removes items from the <see cref="T:LaquaiLib.Classes.Collections.LimitedCollections.LimitedQueue`1"/>, discarding the oldest items until the passed <paramref name="length"/> is reached.
            </summary>
            <param name="length">The number of items to remain in the collection.</param>
        </member>
        <member name="T:LaquaiLib.Classes.Collections.ObservableCollectionFast`1">
            <summary>
            Represents a fast implementation of a dynamic data collection that provides notifications when items get added, removed, or when the whole list is refreshed.
            </summary>
            <typeparam name="T">The Type of the elements in the collection.</typeparam>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.ObservableCollectionFast`1.#ctor">
            <summary>
            Instantiates a new <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.ObservableCollectionFast`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Instantiates a new <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection from which the elements are copied.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.ObservableCollectionFast`1.#ctor(`0[])">
            <summary>
            Instantiates a new <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> that contains the specified items and has a capacity equal to the number of items.
            </summary>
            <param name="items">The items for the list to contain.</param>
        </member>
        <member name="P:LaquaiLib.Classes.Collections.ObservableCollectionFast`1.Item(System.Index)">
            <summary>
            Gets or sets the element at the specified <paramref name="index"/>.
            </summary>
            <param name="index">An <see cref="T:System.Index"/> instance that identifies the location of the element to get or set.</param>
            <returns>The element at the specified <paramref name="index"/>.</returns>
        </member>
        <member name="P:LaquaiLib.Classes.Collections.ObservableCollectionFast`1.Item(System.Range)">
            <summary>
            Gets or sets elements within the specified <paramref name="range"/>.
            </summary>
            <param name="range">The <see cref="T:System.Range"/> in which to get or set elements.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the items that were get or set.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.ObservableCollectionFast`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.ObservableCollectionFast`1.AddSilent(`0)">
            <summary>
            Silently adds an element to the end of this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>. This causes no <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"/> event to be fired.
            </summary>
            <param name="item">The item to add to the end of this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.ObservableCollectionFast`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all occurrences of the specified items from the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <param name="collection">A sequence of values to remove from this <see cref="T:LaquaiLib.Classes.Collections.ObservableCollectionFast`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.ObservableCollectionFast`1.RemoveSilent(`0)">
            <summary>
            Silently removes an element from this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>. This causes no <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"/> event to be fired.
            </summary>
            <param name="item">The item to remove from this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.ObservableCollectionFast`1.RemoveSilent(System.Func{`0,System.Boolean})">
            <summary>
            Silently removes all elements from this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> as dictated by a <paramref name="selector"/> <see cref="T:System.Func`2"/>. This causes no <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"/> event to be fired.
            </summary>
            <param name="selector">A <see cref="T:System.Func`2"/> that determines whether an element should be removed.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.ObservableCollectionFast`1.Remove(`0)">
            <summary>
            Removes an element from this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <param name="item">The item to remove from this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.ObservableCollectionFast`1.Remove(System.Func{`0,System.Boolean})">
            <summary>
            Removes all elements from this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> as dictated by a <paramref name="selector"/> <see cref="T:System.Func`2"/>.
            </summary>
            <param name="selector">A <see cref="T:System.Func`2"/> that determines whether an element should be removed.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.ObservableCollectionFast`1.RaiseCollectionChanged">
            <summary>
            Raises a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> event. Changes made to the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> by <see cref="M:LaquaiLib.Classes.Collections.ObservableCollectionFast`1.AddSilent(`0)"/> will not be propagated to observers until this method is called.
            </summary>
        </member>
        <member name="T:LaquaiLib.Classes.Collections.ObservableCollectionFast`1.PreCollectionChangedNotification">
            <summary>
            Encapsulates a method that is called before a <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> event is raised for this <see cref="T:LaquaiLib.Classes.Collections.ObservableCollectionFast`1"/>. It may modify the collection.
            </summary>
        </member>
        <member name="E:LaquaiLib.Classes.Collections.ObservableCollectionFast`1.PreCollectionChanged">
            <summary>
            Occurs before a <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> event is raised. It may modify the collection.
            </summary>
        </member>
        <member name="T:LaquaiLib.Classes.Collections.ObservableCollectionFast`1.PostCollectionChangedNotification">
            <summary>
            Encapsulates a method that is called after a <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> event is raised for this <see cref="T:LaquaiLib.Classes.Collections.ObservableCollectionFast`1"/>. It should not modify the collection as any changes are not propagated to observers.
            </summary>
        </member>
        <member name="E:LaquaiLib.Classes.Collections.ObservableCollectionFast`1.PostCollectionChanged">
            <summary>
            Occurs after a <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> event is raised. It should not modify the collection as any changes are not propagated to observers.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.ObservableCollectionFast`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Classes.Collections.TwoWayLookup`2">
            <summary>
            Represents a two-way lookup table where entries can be looked up by either key or value and are guaranteed to be unique. Enumeration is supported in the forward direction using standard <see cref="T:System.Collections.Generic.IEnumerable`1"/> methods. For reverse enumeration, use <see cref="M:LaquaiLib.Classes.Collections.TwoWayLookup`2.GetReverseEnumerator"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.TwoWayLookup`2.AddForward(`0,`1)">
            <summary>
            Adds a new entry to the lookup table by the first type parameter <typeparamref name="T1"/>. An exception is thrown if either the key or the value already exists.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.TwoWayLookup`2.AddReverse(`1,`0)">
            <summary>
            Adds a new entry to the lookup table by the second type parameter <typeparamref name="T2"/>. An exception is thrown if either the key or the value already exists.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.TwoWayLookup`2.TryAddForward(`0,`1)">
            <summary>
            Attempts to add a new entry to the lookup table by the first type parameter <typeparamref name="T1"/>.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
            <returns><c>true</c> if the key-value pair could be added, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.TwoWayLookup`2.TryAddReverse(`1,`0)">
            <summary>
            Attempts to add a new entry to the lookup table by the second type parameter <typeparamref name="T2"/>.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
            <returns><c>true</c> if the key-value pair could be added, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.TwoWayLookup`2.Add``2(``0,``1)">
            <summary>
            Adds a new entry to the lookup table. An exception is thrown if either the key or the value already exists or if the type parameters do not match <typeparamref name="T1"/> and <typeparamref name="T2"/>.
            </summary>
            <typeparam name="TFirst">The type of the key.</typeparam>
            <typeparam name="TSecond">The type of the value.</typeparam>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
            <remarks>For the love of all things holy, avoid using this method. The 9000 generic type parameters make it a nightmare to use and slow as all hell.</remarks>
            <exception cref="T:System.ArgumentException">Thrown if the types <typeparamref name="TFirst"/> and <typeparamref name="TSecond"/> do not match the <see cref="T:LaquaiLib.Classes.Collections.TwoWayLookup`2"/>'s type parameters in any order.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the type <typeparamref name="TFirst"/> matches both <typeparamref name="T1"/> and <typeparamref name="T2"/>, but the latter are different types.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the type <typeparamref name="TSecond"/> matches both <typeparamref name="T1"/> and <typeparamref name="T2"/>, but the latter are different types.</exception>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.TwoWayLookup`2.TryAdd``2(``0,``1)">
            <summary>
            Attempts to add a new entry to the lookup table.
            </summary>
            <typeparam name="TFirst">The type of the key.</typeparam>
            <typeparam name="TSecond">The type of the value.</typeparam>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
            <remarks>For the love of all things holy, avoid using this method. The 9000 generic type parameters make it a nightmare to use and slow as all hell. Not just that, but the fact that this is specifically designed to fail silently without any indication of what's wrong, possibly with the type parameters, makes it even worse.</remarks>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.TwoWayLookup`2.GetForward(`0)">
            <summary>
            Retrieves an entry from the lookup table by its key. An exception is thrown if there is no entry with the given key.
            </summary>
            <param name="key">The key of the entry.</param>
            <returns>The value associated with the given key.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.TwoWayLookup`2.GetReverse(`1)">
            <summary>
            Retrieves an entry from the lookup table by its value. An exception is thrown if there is no entry with the given value.
            </summary>
            <param name="value">The value of the entry.</param>
            <returns>The key associated with the given value.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.TwoWayLookup`2.TryGetForward(`0,`1@)">
            <summary>
            Attempts to retrieve an entry from the lookup table by its key.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">An <c>out</c> <typeparamref name="T2"/> variable that receives the retrieved value.</param>
            <returns><c>true</c> if there was a value associated with the key, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.TwoWayLookup`2.TryGetReverse(`1,`0@)">
            <summary>
            Attempts to retrieve an entry from the lookup table by its value.
            </summary>
            <param name="value">The value of the entry.</param>
            <param name="key">An <c>out</c> <typeparamref name="T1"/> variable that receives the retrieved key.</param>
            <returns><c>true</c> if there was a key associated with the value, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.TwoWayLookup`2.RemoveForward(`0)">
            <summary>
            Removes an entry from the lookup table by its key. An exception is thrown if there is no entry with the given key.
            </summary>
            <param name="key">The key of the entry.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.TwoWayLookup`2.RemoveReverse(`1)">
            <summary>
            Removes an entry from the lookup table by its value. An exception is thrown if there is no entry with the given value.
            </summary>
            <param name="value">The value of the entry.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.TwoWayLookup`2.TryRemoveForward(`0)">
            <summary>
            Attempts to remove an entry from the lookup table by its key.
            </summary>
            <param name="key">The key of the entry.</param>
            <returns><c>true</c> if there was a value associated with the key that could be removed, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.TwoWayLookup`2.TryRemoveReverse(`1)">
            <summary>
            Attempts to remove an entry from the lookup table by its value.
            </summary>
            <param name="value">The value of the entry.</param>
            <returns><c>true</c> if there was a key associated with the value that could be removed, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.TwoWayLookup`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.TwoWayLookup`2.GetReverseEnumerator">
            <summary>
            Returns an enumerator that iterates through the reverse collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the reverse collection.</returns>
        </member>
        <member name="T:LaquaiLib.Classes.Streams.MemoryOrFileStream">
            <summary>
            Represents a <see cref="P:LaquaiLib.Classes.Streams.MemoryOrFileStream.Stream"/> that can be either a <see cref="T:System.IO.MemoryStream"/> or a <see cref="T:System.IO.FileStream"/>, depending on the size of the data expected to be written to it.
            </summary>
        </member>
        <member name="P:LaquaiLib.Classes.Streams.MemoryOrFileStream.Cutoff">
            <summary>
            The number of bytes at which the stream will switch from a <see cref="T:System.IO.MemoryStream"/> to a <see cref="T:System.IO.FileStream"/>.
            </summary>
            <remarks>
            You may freely change this value at runtime. Its initial value is 1/64th of the total physical memory of the system (e.g., if your system has 32 GB of total physical memory, this will initially have the value <c>32768 / 64 = 512 MB</c>). If an exception is thrown during retrieval of the total physical memory, the value will default to 64 MB.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MemoryOrFileStream.ResetCutoff">
            <summary>
            Resets the <see cref="P:LaquaiLib.Classes.Streams.MemoryOrFileStream.Cutoff"/> to the initial value. See the documentation of <see cref="P:LaquaiLib.Classes.Streams.MemoryOrFileStream.Cutoff"/> for more information.
            </summary>
            <returns>The new value of <see cref="P:LaquaiLib.Classes.Streams.MemoryOrFileStream.Cutoff"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MemoryOrFileStream.#cctor">
            <summary>
            Initializes the <see cref="T:LaquaiLib.Classes.Streams.MemoryOrFileStream"/> Type.
            </summary>
        </member>
        <member name="P:LaquaiLib.Classes.Streams.MemoryOrFileStream.Stream">
            <summary>
            The wrapped <see cref="P:LaquaiLib.Classes.Streams.MemoryOrFileStream.Stream"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Classes.Streams.MemoryOrFileStream.StreamType">
            <summary>
            The actual <see cref="T:System.Type"/> of the wrapped <see cref="P:LaquaiLib.Classes.Streams.MemoryOrFileStream.Stream"/>, either <see cref="T:System.IO.MemoryStream"/> or <see cref="T:System.IO.FileStream"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MemoryOrFileStream.#ctor(System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Classes.Streams.MemoryOrFileStream"/> with the given expected payload size.
            </summary>
            <param name="payloadSize">The expected size of the payload to be written to this stream. If it exceeds a set <see cref="P:LaquaiLib.Classes.Streams.MemoryOrFileStream.Cutoff"/>, the internal <see cref="P:LaquaiLib.Classes.Streams.MemoryOrFileStream.Stream"/> is created as a <see cref="T:System.IO.FileStream"/>.</param>
        </member>
        <member name="P:LaquaiLib.Classes.Streams.MemoryOrFileStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Classes.Streams.MemoryOrFileStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Classes.Streams.MemoryOrFileStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Classes.Streams.MemoryOrFileStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Classes.Streams.MemoryOrFileStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MemoryOrFileStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MemoryOrFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MemoryOrFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MemoryOrFileStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MemoryOrFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MemoryOrFileStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged and optionally the managed resources used by this <see cref="T:LaquaiLib.Classes.Streams.MemoryOrFileStream"/> instance.
            </summary>
            <param name="disposing">Whether to release the managed resources used by this <see cref="T:LaquaiLib.Classes.Streams.MemoryOrFileStream"/> instance.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MemoryOrFileStream.Finalize">
            <summary>
            Finalizes this <see cref="T:LaquaiLib.Classes.Streams.MemoryOrFileStream"/> instance, releasing any unmanaged resources.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MemoryOrFileStream.Dispose">
            <summary>
            Releases the managed and unmanaged resources used by this <see cref="T:LaquaiLib.Classes.Streams.MemoryOrFileStream"/> instance.
            </summary>
        </member>
        <member name="T:LaquaiLib.Classes.Streams.MultiStream">
            <summary>
            Represents a wrapper for multiple <see cref="T:System.IO.Stream"/> instances to be written to as one.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MultiStream.#ctor(System.IO.Stream[])">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> with the given <see cref="T:System.IO.Stream"/>s.
            </summary>
            <param name="streams">A collection of <see cref="T:System.IO.Stream"/> instances that are to be written to simultaneously.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MultiStream.#ctor(System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> with the given <see cref="T:System.IO.Stream"/>s.
            </summary>
            <param name="streams">A collection of <see cref="T:System.IO.Stream"/> instances that are to be written to simultaneously.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MultiStream.#ctor(System.Type,System.Int32,System.Object[])">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> with the given number of <see cref="T:System.IO.Stream"/>s.
            </summary>
            <param name="streamType">The type of <see cref="T:System.IO.Stream"/>s to instantiate.</param>
            <param name="count">The number of <see cref="T:System.IO.Stream"/>s to instantiate.</param>
            <param name="constructorParameters">A collection of parameters to pass to the constructor of the given <paramref name="streamType"/>. If no constructor with the passed parameter types exists, instantiation is attempted with the parameterless constructor.</param>
            <exception cref="T:System.ArgumentException">Thrown if the supplied <paramref name="streamType"/> does not inherit from <see cref="T:System.IO.Stream"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MultiStream.#ctor(System.Type,System.Int32,System.Func{System.Int32,System.Object[]})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> with the given number of <see cref="T:System.IO.Stream"/>s.
            <example>
            For example, to create a <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> with 5 <see cref="T:System.IO.FileStream"/> instances that point to temporary files, use this constructor and something along the lines of:
            <code>
            using (var ms = new MultiStream(typeof(FileStream), 5, i =>
            {
                return new object[]
                {
                    Path.Combine(Path.GetTempPath(), $"multistream_test_{i}.txt"),
                    FileMode.Create
                };
            }))
            {
                // ...
            }
            </code>
            </example>
            </summary>
            <param name="streamType">The type of <see cref="T:System.IO.Stream"/>s to instantiate.</param>
            <param name="count">The number of <see cref="T:System.IO.Stream"/>s to instantiate.</param>
            <param name="constructorParameterFactory">A <see cref="T:System.Func`2"/> that takes an <see cref="T:System.Int32"/> and returns a collection of parameters to pass to the constructor of the given <paramref name="streamType"/>. If no constructor with the passed parameter types exists, instantiation is attempted with the parameterless constructor.</param>
            <exception cref="T:System.ArgumentException">Thrown if the supplied <paramref name="streamType"/> does not inherit from <see cref="T:System.IO.Stream"/>.</exception>
        </member>
        <member name="P:LaquaiLib.Classes.Streams.MultiStream.CanRead">
            <summary>
            A value that indicates whether all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> instance can be read from.
            </summary>
        </member>
        <member name="P:LaquaiLib.Classes.Streams.MultiStream.CanSeek">
            <summary>
            A value that indicates whether all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> instance can be seeked.
            </summary>
        </member>
        <member name="P:LaquaiLib.Classes.Streams.MultiStream.CanWrite">
            <summary>
            A value that indicates whether all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> instance can be written to.
            </summary>
        </member>
        <member name="P:LaquaiLib.Classes.Streams.MultiStream.Lengths">
            <summary>
            A collection of <see cref="T:System.Int64"/>s that indicate the lengths of the <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> instance.
            </summary>
        </member>
        <member name="P:LaquaiLib.Classes.Streams.MultiStream.Positions">
            <summary>
            A collection of <see cref="T:System.Int64"/>s taht indicate the current positions of the <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> instance.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MultiStream.Flush">
            <summary>
            Flushes all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> instance.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MultiStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> instance.
            </summary>
            <param name="offset">The offset to seek by.</param>
            <param name="origin">A <see cref="T:System.IO.SeekOrigin"/> value that indicates the reference point used to obtain the new position.</param>
            <returns>A collection of <see cref="T:System.Int64"/>s that indicate the new positions of the <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> instance.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MultiStream.SetLengths(System.Int64)">
            <summary>
            Sets a new length for all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> instance.
            </summary>
            <param name="value">The new length for the <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> instance.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MultiStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> instance and advances the current position within the <see cref="T:System.IO.Stream"/>s by the number of <see cref="T:System.Byte"/>s written.
            </summary>
            <param name="buffer">The buffer containing the data to write.</param>
            <param name="offset">The offset in the buffer at which to begin writing.</param>
            <param name="count">The number of <see cref="T:System.Byte"/>s to write.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MultiStream.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes a sequence of bytes to all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> instance and advances the current position within the <see cref="T:System.IO.Stream"/>s by the number of <see cref="T:System.Byte"/>s written.
            </summary>
            <param name="buffer">A region of memory to copy to all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> instance.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MultiStream.Write(System.String,System.Text.Encoding)">
            <summary>
            Writes <paramref name="text"/> to all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> instance using the given <paramref name="encoding"/>.
            </summary>
            <param name="text">The text to write.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use to obtain the <see cref="T:System.Byte"/>s of the characters.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MultiStream.WriteLine(System.String,System.Text.Encoding)">
            <summary>
            Writes <paramref name="text"/>, followed by the current line terminator to all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> instance using the given <paramref name="encoding"/>.
            </summary>
            <param name="text">The text to write.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use to obtain the <see cref="T:System.Byte"/>s of the characters.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MultiStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged and optionally the managed resources used by this <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> instance.
            </summary>
            <param name="disposing">Whether to release the managed resources used by this <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> instance.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MultiStream.Finalize">
            <summary>
            Finalizes this <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> instance, releasing any unmanaged resources.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.Streams.MultiStream.Dispose">
            <summary>
            Releases the managed and unmanaged resources used by this <see cref="T:LaquaiLib.Classes.Streams.MultiStream"/> instance.
            </summary>
        </member>
        <member name="T:LaquaiLib.Constants">
            <summary>
            Provides a number of constants.
            </summary>
        </member>
        <member name="F:LaquaiLib.Constants.Numbers">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Int32"/> containing the numbers <c>0</c> through <c>9</c>.
            </summary>
        </member>
        <member name="F:LaquaiLib.Constants.LettersUppercase">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Char"/> containing the uppercase letters <c>A</c> through <c>Z</c>.
            </summary>
        </member>
        <member name="F:LaquaiLib.Constants.LettersLowercase">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Char"/> containing the lowercase letters <c>a</c> through <c>z</c>.
            </summary>
        </member>
        <member name="F:LaquaiLib.Constants.GreekLettersUppercase">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Char"/> containing the uppercase letters <c>Α</c> through <c>Ω</c>.
            </summary>
        </member>
        <member name="F:LaquaiLib.Constants.GreekLettersLowercase">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Char"/> containing the lowercase letters <c>α</c> through <c>ω</c>.
            </summary>
        </member>
        <member name="T:LaquaiLib.Extensions.AnyExtensions">
            <summary>
            Provides Extension Methods for all Types.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.AllEqual``1(``0,``0[])">
            <summary>
            Checks whether a number of objects are all equal to each other. If any of the passed objects are <c>null</c>, all others must also be <c>null</c>.
            </summary>
            <typeparam name="T">The Type of the objects to compare.</typeparam>
            <param name="source">The first object to use for the comparison.</param>
            <param name="other">The remaining objects to use for the comparison.</param>
            <returns><c>true</c> if all passed objects are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.EqualBy``2(``0,System.Func{``0,``1},``0[])">
            <summary>
            Invokes a <paramref name="transform"/> function on a <paramref name="source"/> and any <paramref name="other"/> objects and checks whether the results are all equal to each other. If any of the passed objects are <c>null</c>, all others must also be <c>null</c>. In this case, <paramref name="transform"/> is never invoked.
            </summary>
            <typeparam name="T">The Type of the input objects.</typeparam>
            <typeparam name="TCompare">The Type of the results <paramref name="transform"/> yields.</typeparam>
            <param name="source">The first object to use for the comparison..</param>
            <param name="transform">The transform function to invoke on each object before performing the comparison.</param>
            <param name="other">The remaining objects to use for the comparison..</param>
            <returns><c>true</c> if all the results produced by <paramref name="transform"/> are all equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.IsNull``1(``0)">
            <summary>
            Checks whether a given input object is <c>null</c>. If not, it is marked to the compiler as non-<c>null</c> for the remainder of the scope.
            </summary>
            <typeparam name="T">The Type of the input object.</typeparam>
            <param name="source">The input object.</param>
            <returns><c>true</c> if <paramref name="source"/> is <c>null</c>, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.ArrayExtensions">
            <summary>
            Provides Extension Methods for <see cref="T:System.Array"/> Types.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.AsEnumerable``1(System.Array)">
            <summary>
            Uses the default order to transform the <see cref="T:System.Array"/> of <typeparamref name="T"/> to an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/>. This allows using Linq methods on multi-dimensional <see cref="T:System.Array"/>s.
            </summary>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="source">The <see cref="T:System.Array"/> to transform.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the transformed elements from the input sequence.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.AssemblyExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Reflection.Assembly"/> Type.
            </summary>
        </member>
        <member name="T:LaquaiLib.Extensions.ByteArrayExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Array"/> of <see cref="T:System.Char"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ByteArrayExtensions.ToHexString(System.Byte[])">
            <summary>
            Converts an array of <see cref="T:System.Byte"/>s to its equivalent string representation that is encoded with uppercase hex characters.
            </summary>
            <param name="bytes">The <see cref="T:System.Byte"/> array to convert.</param>
            <returns>The string as described.</returns>
            <remarks>This method uses the internal <see cref="M:System.Convert.ToHexString(System.Byte[])"/> method for the conversion, but its output is reversed appropriately to account for endianness differences.</remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.ByteArrayExtensions.ToHexString(System.ReadOnlySpan{System.Byte})">
            <summary>
            Converts a <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Byte"/> to its equivalent string representation that is encoded with uppercase hex characters.
            </summary>
            <param name="bytes">The <see cref="T:System.Byte"/> span to convert.</param>
            <returns>The string as described.</returns>
            <remarks>This method uses the internal <see cref="M:System.Convert.ToHexString(System.Byte[])"/> method for the conversion, but its output is reversed appropriately to account for endianness differences.</remarks>
        </member>
        <member name="T:LaquaiLib.Extensions.CharExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Char"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.CharExtensions.IsVowel(System.Char)">
            <summary>
            Determines if a specified <see cref="T:System.Char"/> is a vowel (including 'y').
            </summary>
            <param name="character">The <see cref="T:System.Char"/> to check.</param>
            <returns><c>true</c> if <paramref name="character"/> is a vowel, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.CharExtensions.IsConsonant(System.Char)">
            <summary>
            Determines if a specified <see cref="T:System.Char"/> is a consonant.
            </summary>
            <param name="character">The <see cref="T:System.Char"/> to check.</param>
            <returns><c>true</c> if <paramref name="character"/> is a consonant, otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.ColorExtensions">
            <summary>
            Provides Extension Methods for the <see cref="T:System.Drawing.Color"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ColorExtensions.AsHtml(System.Drawing.Color)">
            <summary>
            Formats the <see cref="T:System.Drawing.Color"/> as a HTML color string.
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to format.</param>
            <returns>The HTML color string.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.ConcurrentQueueExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ConcurrentQueueExtensions.Enqueue``1(System.Collections.Concurrent.ConcurrentQueue{``0},``0,``0[])">
            <summary>
            Adds items to the end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to add the items from <paramref name="items"/> to.</param>
            <param name="item">The first item to add to <paramref name="queue"/>.</param>
            <param name="items">Any more items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ConcurrentQueueExtensions.Enqueue``1(System.Collections.Concurrent.ConcurrentQueue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds items from a collection to the end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to add the items from the <paramref name="collection"/> to.</param>
            <param name="collection">A collection of items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ConcurrentQueueExtensions.Enqueue``1(LaquaiLib.Classes.Collections.LimitedCollections.LimitedConcurrentQueue{``0},``0,``0[])">
            <summary>
            Adds items to the end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to add the items from <paramref name="items"/> to.</param>
            <param name="item">The first item to add to <paramref name="queue"/>.</param>
            <param name="items">Any more items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ConcurrentQueueExtensions.Enqueue``1(LaquaiLib.Classes.Collections.LimitedCollections.LimitedConcurrentQueue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds items from a collection to the end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to add the items from the <paramref name="collection"/> to.</param>
            <param name="collection">A collection of items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="T:LaquaiLib.Extensions.DelegateExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Delegate"/> Type.
            </summary>
        </member>
        <member name="T:LaquaiLib.Extensions.DictionaryExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.Dictionary`2"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.DictionaryExtensions.Invert``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Creates an inverted <see cref="T:System.Collections.Generic.Dictionary`2"/>, where the original keys are now the values and vice versa.
            </summary>
            <typeparam name="TKey">The Type of the keys of the original <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <typeparam name="TValue">The Type of the values of the original <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <param name="source">The original <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <returns>A new <see cref="T:System.Collections.Generic.Dictionary`2"/> where the keys are the values of the original <see cref="T:System.Collections.Generic.Dictionary`2"/> and vice versa.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.DictionaryExtensions.InvertContentAware``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Creates a content-aware inverse <see cref="T:System.Collections.Generic.Dictionary`2"/> where the original keys are now values grouped by the original values.
            </summary>
            <typeparam name="TKey">The Type of the keys of the original <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <typeparam name="TValue">The Type of the values of the original <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <param name="source">The original <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <returns>An inverted <see cref="T:System.Collections.Generic.Dictionary`2"/> as described.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.DictionaryExtensions.Clone``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Creates a shallow copy of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <typeparam name="TValue">They Type of the values of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to clone.</param>
            <returns>A shallow copy of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.EnumExtensions">
            <summary>
            Provides Extension Methods for <see cref="T:System.Enum"/> Types.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.EnumExtensions.GetDescription(System.Enum)">
            <summary>
            Returns the <see cref="P:System.ComponentModel.DescriptionAttribute.Description"/> for the given <see cref="T:System.Enum"/> value. If the value is not decorated with a <see cref="T:System.ComponentModel.DescriptionAttribute"/>, the default <see cref="T:System.String"/> representation of the value is returned.
            </summary>
            <param name="any">The <see cref="T:System.Enum"/> value to retrieve the description for.</param>
            <returns>The value of the <see cref="P:System.ComponentModel.DescriptionAttribute.Description"/> for the given <see cref="T:System.Enum"/> value or its default <see cref="T:System.String"/> representation.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.HashAlgorithmExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Security.Cryptography.HashAlgorithm"/> and derived Types.
            </summary>
        </member>
        <member name="T:LaquaiLib.Extensions.IconExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Drawing.Icon"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IconExtensions.ToImageSource(System.Drawing.Icon)">
            <summary>
            Converts this <see cref="T:System.Drawing.Icon"/> instance to an <see cref="T:System.Windows.Media.ImageSource"/>.
            </summary>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="T:LaquaiLib.Extensions.IDataObjectExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Windows.Forms.IDataObject"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IDataObjectExtensions.TryGetData(System.Windows.Forms.IDataObject,System.String,System.Object@)">
            <summary>
            Attempts to retrieve the data with the specified <paramref name="format"/> from this <see cref="T:System.Windows.Forms.IDataObject"/>.
            </summary>
            <param name="dataObject">The <see cref="T:System.Windows.Forms.IDataObject"/> to retrieve the data from.</param>
            <param name="format">The format of the data to retrieve.</param>
            <param name="data">A <c>ref <see cref="T:System.Object"/>?</c> variable that receives the data if the retrieval was successful.</param>
            <returns><c>true</c> if the retrieval was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IDataObjectExtensions.TryGetData``1(System.Windows.Forms.IDataObject,System.String,``0@)">
            <summary>
            Attempts to retrieve the data with the specified <paramref name="format"/> from this <see cref="T:System.Windows.Forms.IDataObject"/>.
            </summary>
            <typeparam name="T">The actual type of which the data is expected to be.</typeparam>
            <param name="dataObject">The <see cref="T:System.Windows.Forms.IDataObject"/> to retrieve the data from.</param>
            <param name="format">The format of the data to retrieve.</param>
            <param name="data">A <c>ref <typeparamref name="T"/>?</c> variable that receives the data if the retrieval was successful.</param>
            <returns><c>true</c> if the retrieval was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.IEnumerableBoolExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Boolean"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableBoolExtensions.All(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Determines whether all elements of a sequence of <see cref="T:System.Boolean"/> values are true.
            </summary>
            <param name="source">The sequence of <see cref="T:System.Boolean"/> values to check.</param>
            <returns>A value that indicates whether all elements of the sequence are true.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.IEnumerableExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Select``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Selects each element in the input sequence without transformation.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains each element in the input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.SelectMany``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Flattens a sequence of nested sequences of the same type <typeparamref name="T"/> into a single sequence without transformation.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="source">The sequence of nested sequences to flatten.</param>
            <returns>A sequence that contains all the elements of the nested sequences.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Shuffles the elements in the input sequence.
            </summary>
            <remarks>
            If the calling code already has an instance of <see cref="T:System.Random"/>, it should use the <see cref="M:LaquaiLib.Extensions.IEnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0},System.Random)"/> overload.
            </remarks>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <returns>A shuffled sequence of the elements in the input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Shuffles the elements in the input sequence, using a specified <see cref="T:System.Random"/> instance.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="random">The <see cref="T:System.Random"/> instance to use for shuffling.</param>
            <returns>A shuffled sequence of the elements in the input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified <paramref name="action"/> on each element of the source collection.
            </summary>
            <typeparam name="T">The Type of the elements in the collection.</typeparam>
            <param name="source">The source collection to iterate over.</param>
            <param name="action">The action to perform on each element of the source collection. It is passed each element in the source collection.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Performs the specified <paramref name="action"/> on each element of the source collection, incorporating each element's index in the <see cref="T:System.Action`2"/>.
            </summary>
            <typeparam name="T">The Type of the elements in the collection.</typeparam>
            <param name="source">The source collection to iterate over.</param>
            <param name="action">The action to perform on each element of the source collection. It is passed each element and its index in the source collection.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Invokes the specified <paramref name="function"/> on each element of the source collection.
            </summary>
            <typeparam name="TSource">The Type of the elements in the collection.</typeparam>
            <typeparam name="TResult">The Type of the elements that <paramref name="function"/> produces.</typeparam>
            <param name="source">The source collection to iterate over.</param>
            <param name="function">The function to invoke on each element of the source collection. It is passed each element in the source collection.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            Invokes the specified <paramref name="function"/> on each element of the source collection, incorporating each element's index in the <see cref="T:System.Func`3"/>.
            </summary>
            <typeparam name="TSource">The Type of the elements in the collection.</typeparam>
            <typeparam name="TResult">The Type of the elements that <paramref name="function"/> produces.</typeparam>
            <param name="source">The source collection to iterate over.</param>
            <param name="function">The function to invoke on each element of the source collection. It is passed each element and its index in the source collection.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.GetRange``1(System.Collections.Generic.IEnumerable{``0},System.Range)">
            <summary>
            Extracts a range of elements from this collection.
            </summary>
            <typeparam name="T">The Type of the elements in the collection.</typeparam>
            <param name="source">The collection to extract elements from.</param>
            <param name="range">A <see cref="T:System.Range"/> instance that indicates where the items to be extracted are located in the <paramref name="source"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.AllEqual``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks whether the items in a sequence are all equal to each other. If any of the passed objects are <c>null</c>, all others must also be <c>null</c>.
            </summary>
            <typeparam name="T">The Type of the objects to compare.</typeparam>
            <param name="source">The collection that contains the items to compare. An exception is thrown if the collection is empty.</param>
            <returns><c>true</c> if all objects in the passed <paramref name="source"/> collection are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Produces the set difference of two sequences according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">The first sequence to compare.</param>
            <param name="other">The second sequence to compare.</param>
            <param name="keySelector">The <see cref="T:System.Func`2"/> that is passed each element of the source sequence and returns the key to use for comparison.</param>
            <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
            <remarks>Basically just another <see cref="M:System.Linq.Enumerable.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1})"/> overload that... actually makes sense.</remarks>
        </member>
        <member name="T:LaquaiLib.Extensions.IEnumerableIDisposableExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.IDisposable"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableIDisposableExtensions.Dispose(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Disposes all elements in this sequence of <see cref="T:System.IDisposable"/> objects.
            </summary>
            <param name="disposables">The sequence of <see cref="T:System.IDisposable"/> objects to dispose.</param>
            <remarks>
            If any of the <see cref="M:System.IDisposable.Dispose"/> calls throw an exception, the exceptions are collected and rethrown as an <see cref="T:System.AggregateException"/> after all <see cref="M:System.IDisposable.Dispose"/> calls have been made.
            </remarks>
        </member>
        <member name="T:LaquaiLib.Extensions.IEnumerableTaskExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Threading.Tasks.Task"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableTaskExtensions.Start(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Starts all the tasks in this collection of <see cref="T:System.Threading.Tasks.Task"/>s.
            </summary>
            <param name="tasks">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Threading.Tasks.Task"/> that contains the <see cref="T:System.Threading.Tasks.Task"/>s that are to be started.</param>
            <remarks>Note that this does not await any of the <see cref="T:System.Threading.Tasks.Task"/>s, they are merely started. The calling code is expected to await the availability of and process their results.</remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableTaskExtensions.StartAsync(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Starts all the tasks in this collection of <see cref="T:System.Threading.Tasks.Task"/>s and returns a <see cref="T:System.Threading.Tasks.Task"/> that represents their completion.
            </summary>
            <param name="tasks">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Threading.Tasks.Task"/> that contains the <see cref="T:System.Threading.Tasks.Task"/>s that are to be started.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when all of the <see cref="T:System.Threading.Tasks.Task"/>s in this collection have completed.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.ListExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.List`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.Remove``1(System.Collections.Generic.List{``0},System.Index)">
            <summary>
            Removes the element at the specified <paramref name="index"/> from this <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T">The Type of the elements in the <see cref="T:System.Collections.Generic.List`1"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.List`1"/> to be modified.</param>
            <param name="index">An <see cref="T:System.Index"/> instance that indicates where the item to be removed is located in the <paramref name="list"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.RemoveRange``1(System.Collections.Generic.List{``0},System.Range)">
            <summary>
            Removes elements in a specified <paramref name="range"/> from this <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T">The Type of the elements in the <see cref="T:System.Collections.Generic.List`1"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.List`1"/> to be modified.</param>
            <param name="range">A <see cref="T:System.Range"/> instance that indicates where the items to be removed are located in the <paramref name="list"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.GetRange``1(System.Collections.Generic.List{``0},System.Range)">
            <summary>
            Extracts a range of elements from this <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T">The Type of the elements in the <see cref="T:System.Collections.Generic.List`1"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.List`1"/> to extract elements from.</param>
            <param name="range">A <see cref="T:System.Range"/> instance that indicates where the items to be extracted are located in the <paramref name="list"/>.</param>
        </member>
        <member name="T:LaquaiLib.Extensions.MethodInfoExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Reflection.MethodInfo"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.IsGetterOrSetter(System.Reflection.MethodInfo)">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is a property getter or setter.
            </summary>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns>A value indicating whether the method is a property getter or setter.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.IsGetter(System.Reflection.MethodInfo)">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is a property getter.
            </summary>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns>A value indicating whether the method is a property getter.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.IsSetter(System.Reflection.MethodInfo)">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is a property setter.
            </summary>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns>A value indicating whether the method is a property setter.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.IsAdderOrRemover(System.Reflection.MethodInfo)">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is an event subscription adder or remover.
            </summary>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns>A value indicating whether the method is an event subscription adder or remover.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.IsAdder(System.Reflection.MethodInfo)">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is an event subscription adder.
            </summary>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns>A value indicating whether the method is an event subscription adder.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.IsRemover(System.Reflection.MethodInfo)">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is an event subscription remover.
            </summary>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns>A value indicating whether the method is an event subscription remover.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.IsAccessor(System.Reflection.MethodInfo)">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is an accessor (includes property getters/setters and event subscription adders/removers).
            </summary>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns>A value indicating whether the method is an accessor.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.QueueExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.Queue`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.QueueExtensions.Enqueue``1(System.Collections.Generic.Queue{``0},``0,``0[])">
            <summary>
            Adds items to the end of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> instance to add the items from <paramref name="items"/> to.</param>
            <param name="item">The first item to add to <paramref name="queue"/>.</param>
            <param name="items">Any more items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.QueueExtensions.Enqueue``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds items from a collection to the end of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> instance to add the items from the <paramref name="collection"/> to.</param>
            <param name="collection">A collection of items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.QueueExtensions.Enqueue``1(LaquaiLib.Classes.Collections.LimitedCollections.LimitedQueue{``0},``0,``0[])">
            <summary>
            Adds items to the end of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> instance to add the items from <paramref name="items"/> to.</param>
            <param name="item">The first item to add to <paramref name="queue"/>.</param>
            <param name="items">Any more items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.QueueExtensions.Enqueue``1(LaquaiLib.Classes.Collections.LimitedCollections.LimitedQueue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds items from a collection to the end of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> instance to add the items from the <paramref name="collection"/> to.</param>
            <param name="collection">A collection of items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="T:LaquaiLib.Extensions.SpanExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Span`1"/> Type.
            </summary>
        </member>
        <member name="T:LaquaiLib.Extensions.StreamExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.IO.Stream"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.ReadToEnd(System.IO.Stream)">
            <summary>
            Reads all bytes from the current position to the end of the <see cref="T:System.IO.Stream"/> and advances the position within it to the end.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <returns>The bytes of the rest of the <see cref="T:System.IO.Stream"/>, from its current position to the end.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.ReadToEndAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Reads all bytes from the current position to the end of the <see cref="T:System.IO.Stream"/> asynchronously, optionally monitoring a <paramref name="cancellationToken"/> for cancellation requests, and advances the position within it to the end.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read operation and proxies for the read bytes.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.StringExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.String"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Repeat(System.String,System.Int32)">
            <summary>
            Constructs a new string from this string repeated <paramref name="count"/> times.
            </summary>
            <param name="source">The string to repeat.</param>
            <param name="count">The number of times to repeat <paramref name="source"/>.</param>
            <returns>A string consisting of <paramref name="source"/> repeated <paramref name="count"/> times.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Replace(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new string from this string with all occurrences of the strings in <paramref name="finds"/> replaced with <paramref name="replace"/>.
            </summary>
            <param name="source">The string to perform replacements in.</param>
            <param name="finds">A collection of strings to search for in <paramref name="source"/>.</param>
            <param name="replace">The replacement for occurrences of strings in <paramref name="finds"/>.</param>
            <returns>A string as described.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.RegexReplace(System.String,System.String,System.String)">
            <summary>
            Replaces all matches of a regex <paramref name="pattern"/> in this <see cref="T:System.String"/> with a <paramref name="replacement"/>.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to search.</param>
            <param name="pattern">The pattern to search for.</param>
            <param name="replacement">The <see cref="T:System.String"/> to replace matches with.</param>
            <returns>A new string with all matches of <paramref name="pattern"/> replaced with <paramref name="replacement"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Match(System.String,System.String)">
            <summary>
            Searches the specified input string for occurrences of a specified regex pattern.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to search.</param>
            <param name="pattern">The pattern to search for.</param>
            <returns>The <see cref="T:System.Text.RegularExpressions.MatchCollection"/> instance returned my <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)"/></returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.ReplaceExcept(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new string from this string with all occurrences of any string that is not contained in <paramref name="except"/> replaced with <paramref name="replace"/>.
            </summary>
            <param name="source">The string to perform replacements in.</param>
            <param name="except">A collection of strings to except from replacement in <paramref name="source"/>.</param>
            <param name="replace">The replacement for occurrences of strings that are not in <paramref name="except"/>.</param>
            <returns>A string as described.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Remove(System.String,System.Char[])">
            <summary>
            Removes all occurrences of the specified <see cref="T:System.Char"/>s from this <see cref="T:System.String"/>.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to modify.</param>
            <param name="remove">The <see cref="T:System.Char"/>s to remove.</param>
            <returns>The original string with all occurrences of the <paramref name="remove"/> chars removed.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Remove(System.String,System.Int32,System.Char[])">
            <summary>
            Removes all occurrences of the specified <see cref="T:System.Char"/>s from this <see cref="T:System.String"/> starting at the specified index.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to modify.</param>
            <param name="startIndex">The zero-based index at which to begin removing <see cref="T:System.Char"/>s.</param>
            <param name="remove">The <see cref="T:System.Char"/>s to remove.</param>
            <returns>The original string with all occurrences of the <paramref name="remove"/> chars removed.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Remove(System.String,System.String[])">
            <summary>
            Removes all occurrences of the specified <see cref="T:System.String"/>s from this <see cref="T:System.String"/>.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to modify.</param>
            <param name="remove">The <see cref="T:System.String"/>s to remove.</param>
            <returns>The original string with all occurrences of the <paramref name="remove"/> chars removed.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Remove(System.String,System.Int32,System.String[])">
            <summary>
            Removes all occurrences of the specified <see cref="T:System.String"/>s from this <see cref="T:System.String"/> starting at the specified index.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to modify.</param>
            <param name="startIndex">The zero-based index at which to begin removing <see cref="T:System.String"/>s.</param>
            <param name="remove">The <see cref="T:System.String"/>s to remove.</param>
            <returns>The original string with all occurrences of the <paramref name="remove"/> chars removed.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOf(System.String,System.Char)">
            <summary>
            Reports the zero-based indices of all occurrences of the specified Unicode character in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="search">A Unicode character to seek.</param>
            <returns>All zero-based index positions of <paramref name="search"/> if that character is found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOf(System.String,System.Char,System.Int32)">
            <summary>
            Reports the zero-based indices of all occurrences of the specified Unicode character in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="search">A Unicode character to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>All zero-based index positions of <paramref name="search"/> if that character is found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOf(System.String,System.String)">
            <summary>
            Reports the zero-based indices of all occurrences of the specified string in this instance.
            </summary>
            <param name="source">The string to search.</param>
            <param name="search">The string to seek.</param>
            <returns>All zero-based index positions of <paramref name="search"/> if that string is found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOf(System.String,System.String,System.Int32)">
            <summary>
            Reports the zero-based indices of all occurrences of the specified string in this instance. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="search">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>All zero-based index positions of <paramref name="search"/> if that string is found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndexOfAny(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any string in a specified sequence of strings.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any string in <paramref name="searches"/> was found; -1 if no string in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndexOfAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any string in a specified sequence of strings. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any string in <paramref name="searches"/> was found; -1 if no string in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAny(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Reports the zero-based indices of the all occurrences in this instance of any Unicode character in a specified sequence of characters.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any character in <paramref name="searches"/> was found; an empty collection if no character in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAny(System.String,System.Collections.Generic.IEnumerable{System.Char},System.Int32)">
            <summary>
            Reports the zero-based indices of the all occurrences in this instance of any Unicode character in a specified sequence of characters. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any character in <paramref name="searches"/> was found; an empty collection if no character in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAny(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reports the zero-based indices of the all occurrences in this instance of any string in a specified sequence of strings.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any string in <paramref name="searches"/> was found; an empty collection if no string in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Reports the zero-based indices of the all occurrences in this instance of any string in a specified sequence of strings. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any string in <paramref name="searches"/> was found; an empty collection if no string in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfExcept(System.String,System.Char)">
            <summary>
            Reports the zero-based indices of all occurrences of Unicode characters other than the one specified in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="except">A Unicode character to except.</param>
            <returns>All zero-based index positions of any characters that are left, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfExcept(System.String,System.Char,System.Int32)">
            <summary>
            Reports the zero-based indices of all occurrences of Unicode characters other than the one specified in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="except">A Unicode character to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>All zero-based index positions of any characters that are left, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfExcept(System.String,System.String)">
            <summary>
            Reports the zero-based indices of all occurrences of Unicode characters other than the ones contained in <paramref name="except"/> in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="except">A string containing Unicode character to except.</param>
            <returns>All zero-based index positions of any characters that are left, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfExcept(System.String,System.String,System.Int32)">
            <summary>
            Reports the zero-based indices of all occurrences of Unicode characters other than the ones contained in <paramref name="except"/> in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="except">A string containing Unicode character to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>All zero-based index positions of any characters that are left, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndexOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Reports the zero-based index of the first occurrence of a character other than the ones specified in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any character other than the ones in <paramref name="excepts"/> was found, or -1 otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndexOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.Char},System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of a character other than the ones specified in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any character other than the ones in <paramref name="excepts"/> was found, or -1 otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndexOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reports the zero-based index of the first occurrence of a string (or single character) other than the ones specified in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of strings to except.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any string other than the ones in <paramref name="excepts"/> was found, or -1 otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndexOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of a string (or single character) other than the ones specified in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of strings to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any string other than the ones in <paramref name="excepts"/> was found, or -1 otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Reports the zero-based indices of the all occurrences of any Unicode character other than the ones specified in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any character not contained in <paramref name="excepts"/> was found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.Char},System.Int32)">
            <summary>
            Reports the zero-based indices of the all occurrences of any Unicode character other than the ones specified in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any character not contained in <paramref name="excepts"/> was found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reports the zero-based indices of the all occurrences of any string (or single character) other than the ones specified in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any string not contained in <paramref name="excepts"/> was found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Reports the zero-based indices of the all occurrences of any string (or single character) other than the ones specified in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any string not contained in <paramref name="excepts"/> was found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.ForEachLine(System.String,System.Func{System.String,System.String})">
            <summary>
            Applies a <paramref name="transform"/> function to each line of a string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="transform">The function used to transform each line of the input string.</param>
            <returns>The transformed string.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.ForEachLine(System.String,System.Func{System.String,System.Int32,System.String})">
            <summary>
            Applies a <paramref name="transform"/> function to each line of a string, incorporating each line's index in the function.
            </summary>
            <param name="source">The string to search.</param>
            <param name="transform">The function used to transform each line of the input string.</param>
            <returns>The transformed string.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.ForEachLine(System.String,System.Func{System.String,System.String},System.Func{System.String,System.Boolean})">
            <summary>
            Applies a <paramref name="transform"/> function to each line of a string that satisfies conditions defined by <paramref name="predicate"/>. Lines that do not satisfy this condition are copied without applying <paramref name="transform"/>.
            </summary>
            <param name="source">The string to search.</param>
            <param name="transform">The function used to transform each line of the input string.</param>
            <param name="predicate">The function used to determine which lines are transformed using <paramref name="transform"/>.</param>
            <returns></returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.ForEachLine(System.String,System.Func{System.String,System.Int32,System.String},System.Func{System.String,System.Int32,System.Boolean})">
            <summary>
            Applies a <paramref name="transform"/> function to each line of a string that satisfies conditions defined by <paramref name="predicate"/>, incorporating each line's index in the functions. Lines that do not satisfy this condition are copied without applying <paramref name="transform"/>.
            </summary>
            <param name="source">The string to search.</param>
            <param name="transform">The function used to transform each line of the input string.</param>
            <param name="predicate">The function used to determine which lines are transformed using <paramref name="transform"/>.</param>
            <returns></returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.GetSimilarity(System.String,System.String,System.StringComparer)">
            <summary>
            Computes a value that indicates the similarity between two strings. "Similarity" is defined as the number of characters that are the same in both strings, divided by the length of the longer string. As such, the value returned by this method is always between <c>0</c> (the strings are have no characters in common) and <c>1</c> (the strings are equal), inclusive.
            </summary>
            <param name="first">The first <see cref="T:System.String"/> to use for the comparison.</param>
            <param name="second">The second <see cref="T:System.String"/> to use for the comparison.</param>
            <param name="stringComparer">A <see cref="T:System.StringComparer"/> instance to use when comparing the <see cref="T:System.String"/>s. Defaults to <see cref="P:System.StringComparer.OrdinalIgnoreCase"/>.</param>
            <returns>The computed similarity as described.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.ThirdParty.HtmlAgilityPackExtensions.HtmlDocumentExtensions">
            <summary>
            Provides Extension Methods for the <see cref="T:HtmlAgilityPack.HtmlDocument"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ThirdParty.HtmlAgilityPackExtensions.HtmlDocumentExtensions.CreateElement(HtmlAgilityPack.HtmlDocument,System.String,System.Action{HtmlAgilityPack.HtmlNode})">
            <summary>
            Creates an <see cref="T:HtmlAgilityPack.HtmlNode"/> using this <see cref="T:HtmlAgilityPack.HtmlDocument"/>, the new node's <paramref name="name"/> and a <paramref name="config"/> <see cref="T:System.Action`1"/> that may configure it.
            </summary>
            <param name="htmlDoc">The <see cref="T:HtmlAgilityPack.HtmlDocument"/> to associate with the new node.</param>
            <param name="name">The element name of the new node.</param>
            <param name="config">An <see cref="T:System.Action`1"/> that may configure the new node.</param>
            <returns>A reference to the created node.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.ThirdParty.HtmlAgilityPackExtensions.HtmlNodeExtensions">
            <summary>
            Provides Extension Methods for the <see cref="T:HtmlAgilityPack.HtmlNode"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ThirdParty.HtmlAgilityPackExtensions.HtmlNodeExtensions.AppendChildren(HtmlAgilityPack.HtmlNode,HtmlAgilityPack.HtmlNode[])">
            <summary>
            Adds child nodes to the <see cref="T:HtmlAgilityPack.HtmlNode"/>.
            </summary>
            <param name="node">The <see cref="T:HtmlAgilityPack.HtmlNode"/>to add child nodes to.</param>
            <param name="children">The child nodes to add to the <paramref name="node"/>.</param>
        </member>
        <member name="T:LaquaiLib.Extensions.TypeExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Type"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.GetInterfaceImplementingTypes(System.Type)">
            <summary>
            Returns a collection of all types that implement the supplied interface.
            </summary>
            <param name="type">The interface type to get the implementing types for.</param>
            <returns>A collection of all types that implement the supplied interface.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="type"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="type"/>'s assembly cannot be resolved.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.GetInheritingTypes(System.Type)">
            <summary>
            Returns a collection of all types that inherit from the supplied type.
            </summary>
            <param name="type">The type to get the inheriting types for.</param>
            <returns>A collection of all types that inherit from the supplied type.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="type"/>'s assembly cannot be resolved.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.GetNonAbstractInheritingTypes(System.Type)">
            <summary>
            Returns a collection of all types that inherit from the supplied type and are not abstract.
            </summary>
            <param name="type">The type to get the non-abstract inheriting types for.</param>
            <returns>A collection of all types that inherit from the supplied type and are not abstract.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="type"/>'s assembly cannot be resolved.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.GetConstructableInheritingTypes(System.Type)">
            <summary>
            Returns a collection of all types that inherit from the supplied type and contain public constructors.
            </summary>
            <param name="type">The type to get the constructable inheriting types for.</param>
            <returns>A collection of all types that inherit from the supplied type and contain public constructors.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="type"/>'s assembly cannot be resolved.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.GetInstanceValues(System.Type,System.Object,System.Boolean)">
            <summary>
            Compiles a <see cref="T:System.Collections.Generic.Dictionary`2"/> of all instance fields and properties of the supplied type from the given object, optionally calling all parameterless methods that do not return void.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> the <see cref="T:System.Reflection.FieldInfo"/>, <see cref="T:System.Reflection.PropertyInfo"/> and <see cref="T:System.Reflection.MethodInfo"/> instances are to be reflected from.</param>
            <param name="obj">The object to use to collect the values from.</param>
            <param name="callMethods">Whether to call all parameterless methods that do not return void instead of adding all method names to the output dictionary. This is a dangerous operation and should only be used if the methods are known to be safe and not have side effects.</param>
            <returns>The <see cref="T:System.Collections.Generic.Dictionary`2"/> as described.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.GetStaticValues(System.Type,System.Boolean)">
            <summary>
            Compiles a <see cref="T:System.Collections.Generic.Dictionary`2"/> of all static fields and properties of the supplied type, optionally calling all parameterless methods that do not return void.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> the <see cref="T:System.Reflection.FieldInfo"/>, <see cref="T:System.Reflection.PropertyInfo"/> and <see cref="T:System.Reflection.MethodInfo"/> instances are to be reflected from.</param>
            <param name="callMethods">Whether to call all parameterless methods that do not return void. This is a dangerous operation and should only be used if the methods are known to be safe and not have side effects.</param>
            <returns>The <see cref="T:System.Collections.Generic.Dictionary`2"/> as described.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.XElementExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Xml.Linq.XElement"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.XElementExtensions.Siblings(System.Xml.Linq.XElement)">
            <summary>
            Returns a collection of the sibling elements of this node, in document order.
            </summary>
            <param name="source">The <see cref="T:System.Xml.Linq.XElement"/> to get the siblings of.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the sibling elements of this node, in document order.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.XElementExtensions.Siblings(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Returns a collection of the sibling elements of this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"/> are included in the collection.
            </summary>
            <param name="source">The <see cref="T:System.Xml.Linq.XElement"/> to get the siblings of.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> to match.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the sibling elements of this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"/> are included in the collection.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.XmlWriterExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Xml.XmlWriter"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.XmlWriterExtensions.WriteXNode(System.Xml.XmlWriter,System.Xml.Linq.XNode)">
            <summary>
            Writes the specified <paramref name="xNode"/> to this <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="xmlWriter">The <see cref="T:System.Xml.XmlWriter"/> instance to write <paramref name="xNode"/> to.</param>
            <param name="xNode">The <see cref="T:System.Xml.Linq.XNode"/> to serialize and write to <paramref name="xmlWriter"/>.</param>
        </member>
        <member name="T:LaquaiLib.Extensions.XNodeExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Xml.Linq.XNode"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.XNodeExtensions.SiblingNodes(System.Xml.Linq.XNode)">
            <summary>
            Returns a collection of the sibling nodes of this node, in document order.
            </summary>
            <param name="source">The <see cref="T:System.Xml.Linq.XNode"/> to get the siblings of.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Xml.Linq.XNode"/> containing the sibling nodes of this node, in document order.</returns>
        </member>
        <member name="T:LaquaiLib.LaquaiLib">
            <summary>
            Entry point for the library.
            </summary>
        </member>
        <member name="M:LaquaiLib.LaquaiLib.Range(System.Double,System.Double,System.Double)">
            <summary>
            Compiles an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Double"/>s from <paramref name="start"/> to <paramref name="stop"/> with a step width of <paramref name="step"/>.
            </summary>
            <param name="start">The start of the range.</param>
            <param name="stop">The end of the range.</param>
            <param name="step">The step width of the range.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Double"/> as described.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="step"/> is 0.</exception>
        </member>
        <member name="T:LaquaiLib.Miscellaneous">
            <summary>
            Contains miscellaneous and methods.
            </summary>
        </member>
        <member name="T:LaquaiLib.Miscellaneous.Logger">
            <summary>
            Represents a rudimentary static logger that writes to the <see cref="T:System.Console"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Miscellaneous.Logger.FormatString">
            <summary>
            A <see cref="T:System.DateTime"/> format string used to format the timestamp in the console output.
            </summary>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.ReadMultiple(System.Collections.Generic.IEnumerable{System.String},System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Reads lines of input from the <see cref="T:System.Console"/> with any number of specified <paramref name="promptlines"/>, a specified <paramref name="inputDelimiter" /> and accepting input that is accepted by a <paramref name="validator"/> function. Input lines are collected until the <paramref name="validator"/> function returns <c>false</c> for the first time.
            </summary>
            <remarks>The calling code is responsible for defining a <paramref name="validator"/> function that returns <c>false</c> at some point. If it doesn't, this method will never return.</remarks>
            <param name="promptlines">The lines of the prompt to display.</param>
            <param name="inputDelimiter">The input delimiter to display.</param>
            <param name="validator">A validator function to test whether the collected input should be accepted.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.String"/> containing the lines read from standard input or null if no input was provided.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.ReadMultiple(System.String,System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Reads lines of input from the <see cref="T:System.Console"/> with a specified <paramref name="prompt"/>, a specified <paramref name="inputDelimiter" /> and accepting input that is accepted by a <paramref name="validator"/> function. Input lines are collected until the <paramref name="validator"/> function returns <c>false</c> for the first time.
            </summary>
            <remarks>The calling code is responsible for defining a <paramref name="validator"/> function that returns <c>false</c> at some point. If it doesn't, this method will never return.</remarks>
            <param name="prompt">The prompt to display.</param>
            <param name="inputDelimiter">The input delimiter to display.</param>
            <param name="validator">A validator function to test whether the collected input should be accepted.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.String"/> containing the lines read from standard input or null if no input was provided.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.ReadMultiple(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Reads lines of input from the <see cref="T:System.Console"/> with any number of specified <paramref name="promptlines"/> and a specified <paramref name="inputDelimiter" /> until blank input is received.
            </summary>
            <param name="promptlines">The lines of the prompt to display.</param>
            <param name="inputDelimiter">The input delimiter to display.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.String"/> containing the lines read from standard input or null if no input was provided.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.ReadMultiple(System.String,System.String)">
            <summary>
            Reads lines of input from the <see cref="T:System.Console"/> with a specified <paramref name="prompt"/> and a specified <paramref name="inputDelimiter" /> until blank input is received.
            </summary>
            <param name="prompt">The prompt to display.</param>
            <param name="inputDelimiter">The input delimiter to display.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.String"/> containing the lines read from standard input or null if no input was provided.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.ReadMultiple(System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Reads lines of input from the <see cref="T:System.Console"/> with a specified <paramref name="prompt"/>, the default input delimiter and accepting input that is accepted by a <paramref name="validator"/> function. Input lines are collected until the <paramref name="validator"/> function returns <c>false</c> for the first time.
            </summary>
            <remarks>The calling code is responsible for defining a <paramref name="validator"/> function that returns <c>false</c> at some point. If it doesn't, this method will never return.</remarks>
            <param name="prompt">The prompt to display.</param>
            <param name="validator">A validator function to test whether the collected input should be accepted.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.String"/> containing the lines read from standard input or null if no input was provided.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.ReadMultiple(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.Boolean})">
            <summary>
            Reads lines of input from the <see cref="T:System.Console"/> with any number of specified <paramref name="promptlines"/>, the default input delimiter and accepting input that is accepted by a <paramref name="validator"/> function. Input lines are collected until the <paramref name="validator"/> function returns <c>false</c> for the first time.
            </summary>
            <remarks>The calling code is responsible for defining a <paramref name="validator"/> function that returns <c>false</c> at some point. If it doesn't, this method will never return.</remarks>
            <param name="promptlines">The lines of the prompt to display.</param>
            <param name="validator">A validator function to test whether the collected input should be accepted.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.String"/> containing the lines read from standard input or null if no input was provided.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.ReadMultiple(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads lines of input from the <see cref="T:System.Console"/> with any number of specified <paramref name="promptlines"/>, the default input delimiter and accepting any non-blank input.
            </summary>
            <param name="promptlines">The lines of the prompt to display.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.String"/> containing the lines read from standard input or null if no input was provided.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.ReadMultiple(System.Func{System.String,System.Boolean})">
            <summary>
            Reads lines of input from the <see cref="T:System.Console"/> with no prompt and the default input delimiter and accepting input that is accepted by a <paramref name="validator"/> function. Input lines are collected until the <paramref name="validator"/> function returns <c>false</c> for the first time.
            </summary>
            <remarks>The calling code is responsible for defining a <paramref name="validator"/> function that returns <c>false</c> at some point. If it doesn't, this method will never return.</remarks>
            <param name="validator">A validator function to test whether the collected input should be accepted.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.String"/> containing the lines read from standard input or null if no input was provided.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.ReadMultiple(System.String)">
            <summary>
            Reads lines of input from the <see cref="T:System.Console"/> with a specified <paramref name="prompt"/> and the default input delimiter until blank input is received.
            </summary>
            <param name="prompt">The prompt to display.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.String"/> containing the lines read from standard input or null if no input was provided.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.ReadMultiple">
            <summary>
            Reads lines of input from the <see cref="T:System.Console"/> with no prompt and the default input delimiter until blank input is received.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.String"/> containing the lines read from standard input or null if no input was provided.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.Read(System.Collections.Generic.IEnumerable{System.String},System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Reads a line of input from the <see cref="T:System.Console"/> with any number of specified <paramref name="promptlines"/>, a specified <paramref name="inputDelimiter" /> and accepting input that is accepted by a <paramref name="validator"/> function. If the <paramref name="validator"/> function returns <c>false</c>, the prompt is repeatedly displayed until accepted input is received.
            </summary>
            <param name="promptlines">The lines of the prompt to display.</param>
            <param name="inputDelimiter">The input delimiter to display.</param>
            <param name="validator">A validator function to test whether the collected input should be accepted.</param>
            <returns>A string containing the line read from standard input.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.Read(System.String,System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Reads a line of input from the <see cref="T:System.Console"/> with a specified <paramref name="prompt"/>, a specified <paramref name="inputDelimiter" /> and accepting input that is accepted by a <paramref name="validator"/> function. If the <paramref name="validator"/> function returns <c>false</c>, the prompt is repeatedly displayed until accepted input is received.
            </summary>
            <param name="prompt">The prompt to display.</param>
            <param name="inputDelimiter">The input delimiter to display.</param>
            <param name="validator">A validator function to test whether the collected input should be accepted.</param>
            <returns>A string containing the line read from standard input.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.Read(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Reads a line of input from the <see cref="T:System.Console"/> with any number of specified <paramref name="promptlines"/>, a specified <paramref name="inputDelimiter" /> and accepting any non-blank input.
            </summary>
            <param name="promptlines">The lines of the prompt to display.</param>
            <param name="inputDelimiter">The input delimiter to display.</param>
            <returns>A string containing the line read from standard input.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.Read(System.String,System.String)">
            <summary>
            Reads a line of input from the <see cref="T:System.Console"/> with a specified <paramref name="prompt"/>, a specified <paramref name="inputDelimiter" /> and accepting any non-blank input.
            </summary>
            <param name="prompt">The prompt to display.</param>
            <param name="inputDelimiter">The input delimiter to display.</param>
            <returns>A string containing the line read from standard input.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.Read(System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Reads a line of input from the <see cref="T:System.Console"/> with a specified <paramref name="prompt"/>, the default input delimiter and accepting any non-blank input. If the <paramref name="validator"/> function returns <c>false</c>, the prompt is repeatedly displayed until accepted input is received.
            </summary>
            <param name="prompt">The prompt to display.</param>
            <param name="validator">A validator function to test whether the collected input should be accepted.</param>
            <returns>A string containing the line read from standard input.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.Read(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.Boolean})">
            <summary>
            Reads a line of input from the <see cref="T:System.Console"/> with any number of specified <paramref name="promptlines"/>, the default input delimiter and accepting input that is accepted by a <paramref name="validator"/> function. If the <paramref name="validator"/> function returns <c>false</c>, the prompt is repeatedly displayed until accepted input is received.
            </summary>
            <param name="promptlines">The lines of the prompt to display.</param>
            <param name="validator">A validator function to test whether the collected input should be accepted.</param>
            <returns>A string containing the line read from standard input.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.Read(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads a line of input from the <see cref="T:System.Console"/> with any number of specified <paramref name="promptlines"/>, the default input delimiter and accepting any non-blank input.
            </summary>
            <param name="promptlines">The lines of the prompt to display.</param>
            <returns>A string containing the line read from standard input.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.Read(System.Func{System.String,System.Boolean})">
            <summary>
            Reads a line of input from the <see cref="T:System.Console"/> with no prompt, the default input delimiter and accepting input that is accepted by a <paramref name="validator"/> function.
            </summary>
            <param name="validator">A validator function to test whether the collected input should be accepted.</param>
            <returns>A string containing the line read from standard input.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.Read(System.String)">
            <summary>
            Reads a line of input from the <see cref="T:System.Console"/> with a specified <paramref name="prompt"/>, the default input delimiter and accepting any non-blank input.
            </summary>
            <param name="prompt">The prompt to display.</param>
            <returns>A string containing the line read from standard input.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.Read">
            <summary>
            Reads a line of input from the <see cref="T:System.Console"/> with no prompt, the default input delimiter and accepting any non-blank input.
            </summary>
            <returns>A string containing the line read from standard input.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteCustom(System.String,System.Boolean,System.ConsoleColor,System.Object[])">
            <summary>
            Writes a log line with custom attributes to the console.
            </summary>
            <param name="tag">The 0, 2 or 4-length tag to apply to the line. 2-length tags are padded with a space on either side. An empty string (0-length tag) means the tag is omitted entirely.</param>
            <param name="detailed">Whether to show extensive information about how this method was called in addition to the objects to log.</param>
            <param name="color">The <see cref="T:System.ConsoleColor"/> to apply to the line.</param>
            <param name="towrite">The object(s) to log.</param>
            <exception cref="T:System.ArgumentException" />
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteSuccess(System.Object[])">
            <summary>
            Writes log lines to the <see cref="T:System.Console"/> as "success" messages.
            </summary>
            <param name="towrite">The objects to write to the <see cref="T:System.Console"/>.</param>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteFollowUpSuccess(System.Object[])">
            <summary>
            Writes log lines to the console as follow-up information to "success" messages.
            </summary>
            <param name="towrite">The objects to write to the <see cref="T:System.Console"/>.</param>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteInfo(System.Object[])">
            <summary>
            Writes log lines to the <see cref="T:System.Console"/> as general "information" messages.
            </summary>
            <param name="towrite">The objects to write to the <see cref="T:System.Console"/>.</param>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteFollowUpInfo(System.Object[])">
            <summary>
            Writes log lines to the console as follow-up information to general "information" messages.
            </summary>
            <param name="towrite">The objects to write to the <see cref="T:System.Console"/>.</param>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteWarn(System.Object[])">
            <summary>
            Writes log lines to the <see cref="T:System.Console"/> as "warning" messages.
            </summary>
            <param name="towrite">The objects to write to the <see cref="T:System.Console"/>.</param>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteFollowUpWarn(System.Object[])">
            <summary>
            Writes log lines to the console as follow-up information to "warning" messages.
            </summary>
            <param name="towrite">The objects to write to the <see cref="T:System.Console"/>.</param>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteSoftWarn(System.Object[])">
            <summary>
            Writes log lines to the <see cref="T:System.Console"/> as "soft warning" messages.
            </summary>
            <param name="towrite">The objects to write to the <see cref="T:System.Console"/>.</param>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteFollowUpSoftWarn(System.Object[])">
            <summary>
            Writes log lines to the console as follow-up information to "soft warning" messages.
            </summary>
            <param name="towrite">The objects to write to the <see cref="T:System.Console"/>.</param>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteFail(System.Object[])">
            <summary>
            Writes log lines to the <see cref="T:System.Console"/> as "failure" messages.
            </summary>
            <param name="towrite">The objects to write to the <see cref="T:System.Console"/>.</param>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteFollowUpFail(System.Object[])">
            <summary>
            Writes log lines to the console as follow-up information to "failure" messages.
            </summary>
            <param name="towrite">The objects to write to the <see cref="T:System.Console"/>.</param>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteAsTable``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Boolean)">
            <summary>
            Writes an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/> to the <see cref="T:System.Console"/> by formatting the contained values to look like a table using the specified <paramref name="inputIsColumns"/>.
            </summary>
            <typeparam name="T">The type of the values in the input collections.</typeparam>
            <param name="input">The collections of values to write.</param>
            <param name="inputIsColumns">Whether the <paramref name="input"/> consists of columns to be printed instead of rows.</param>
        </member>
        <member name="T:LaquaiLib.RandomMath">
            <summary>
            Contains methods for various mathematical operations.
            </summary>
        </member>
        <member name="M:LaquaiLib.RandomMath.Sum(System.Double,System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Calculates the sum of a series of output values of a function.
            </summary>
            <param name="x">The first input value to the function.</param>
            <param name="n">The last input value to the function.</param>
            <param name="fn">The function that calculates the output values given the input values.</param>
            <returns>The sum of the values returned by <paramref name="fn"/> for each input value between <paramref name="x"/> and <paramref name="n"/>.</returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.Product(System.Double,System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Calculates the product of a series of output values of a function.
            </summary>
            <param name="x">The first input value to the function.</param>
            <param name="n">The last input value to the function.</param>
            <param name="fn">The function that calculates the output values given the input values.</param>
            <returns>The product of the values returned by <paramref name="fn"/> for each input value between <paramref name="x"/> and <paramref name="n"/>.</returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.GCD(System.Int32[])">
            <summary>
            Calculates the greatest common divisor of a series of numbers.
            </summary>
            <param name="numbers">The numbers to calculate the GCD of.</param>
            <returns>The GCD of the given <paramref name="numbers"/>.</returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.RoundToMultiple(System.Double,System.Double)">
            <summary>
            Rounds a <paramref name="number"/> to the nearest multiple of a given number <paramref name="multiple"/>.
            </summary>
            <param name="number">The number to round.</param>
            <param name="multiple">The number a multiple of which <paramref name="number"/> is to be rounded to.</param>
            <returns><paramref name="number"/> rounded to a multiple of <paramref name="multiple"/>.</returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.SmoothFunctions(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Smooths two functions over a given interval using a custom smoothing function.
            </summary>
            <param name="f">The first function to use when constructing the output function.</param>
            <param name="g">The second function to use when constructing the output function.</param>
            <param name="smoothFunc">The custom smoothing function to use.</param>
            <param name="xStart">The start of the interval over which to smooth <paramref name="f"/> into <paramref name="g"/>.</param>
            <param name="xEnd">The end of the interval over which to smooth <paramref name="f"/> into <paramref name="g"/>.</param>
            <returns>A function that returns the result of <paramref name="f"/> when the input parameter is less than <paramref name="xStart"/>, the result of <paramref name="g"/> when the input parameter is greater than <paramref name="xEnd"/> and the result of <paramref name="smoothFunc"/> that combines the results of <paramref name="f"/> and <paramref name="g"/> otherwise.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="xStart"/> was greater than <paramref name="xEnd"/>.</exception>
        </member>
        <member name="M:LaquaiLib.RandomMath.SmoothFunctions(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Smooths two functions over a given interval.
            </summary>
            <param name="f">The first function to use when constructing the output function.</param>
            <param name="g">The second function to use when constructing the output function.</param>
            <param name="xStart">The start of the interval over which to smooth <paramref name="f"/> into <paramref name="g"/>.</param>
            <param name="xEnd">The end of the interval over which to smooth <paramref name="f"/> into <paramref name="g"/>.</param>
            <returns>A function that returns the result of <paramref name="f"/> when the input parameter is less than <paramref name="xStart"/>, the result of <paramref name="g"/> when the input parameter is greater than <paramref name="xEnd"/> and the result of a smoothing function that combines the results of <paramref name="f"/> and <paramref name="g"/> otherwise.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:LaquaiLib.RandomMath.Trigonometry">
            <summary>
            Contains methods that use trigonometric functions.
            </summary>
        </member>
        <member name="M:LaquaiLib.RandomMath.Trigonometry.EllipseAround(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the <c>sin</c> and <c>cos</c> functions that, together, trace an ellipse with specified sine and cosine radii and a given smoothness around a point.
            </summary>
            <param name="x">The <c>x</c>-coordinate of the point to trace the ellipse around.</param>
            <param name="y">The <c>y</c>-coordinate of the point to trace the ellipse around.</param>
            <param name="rSin">The "horizontal" radius of the ellipse. If equal to <paramref name="rCos"/>, the ellipse is a circle. In that case, use <see cref="M:LaquaiLib.RandomMath.Trigonometry.EllipseAround(System.Double,System.Double,System.Double,System.Double)"/> instead.</param>
            <param name="rCos">The "vertical" radius of the ellipse. If equal to <paramref name="rSin"/>, the ellipse is a circle. In that case, use <see cref="M:LaquaiLib.RandomMath.Trigonometry.EllipseAround(System.Double,System.Double,System.Double,System.Double)"/> instead.</param>
            <param name="resolution">How many degrees / points constitute a full rotation around the circle.</param>
            <returns>A <see cref="T:System.Tuple`2"/> with the <c>Sin</c> and <c>Cos</c> functions that, together, trace an ellipse with the specified radii <paramref name="rSin"/> and <paramref name="rCos"/> and <paramref name="resolution"/> around the point <c>(<paramref name="x"/>, <paramref name="y"/>)</c>.</returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.Trigonometry.EllipseAround(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the <c>sin</c> and <c>cos</c> functions that, together, trace a circle with specified radius and a given smoothness around a point.
            </summary>
            <param name="x">The <c>x</c>-coordinate of the point to trace the circle around.</param>
            <param name="y">The <c>y</c>-coordinate of the point to trace the circle around.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="resolution">How many degrees / points constitute a full rotation around the circle.</param>
            <returns>A <see cref="T:System.Tuple`2"/> with the <c>Sin</c> and <c>Cos</c> functions that, together, trace an circle with the specified <paramref name="radius"/> and <paramref name="resolution"/> around the point <c>(<paramref name="x"/>, <paramref name="y"/>)</c>.</returns>
        </member>
        <member name="T:LaquaiLib.Util.Processes">
            <summary>
            Provides methods and events for working with processes.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Processes.GetAllProcesses">
            <summary>
            Returns a sequence of all processes running on the local computer.
            </summary>
        </member>
        <member name="E:LaquaiLib.Util.Processes.ProcessStarted">
            <summary>
            Occurs for each process that is started on the local computer.
            </summary>
        </member>
        <member name="E:LaquaiLib.Util.Processes.ProcessStopped">
            <summary>
            Occurs for each process that is stopped on the local computer.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Processes.Clear">
            <summary>
            Removes all entries in the invocation lists of the events defined in <see cref="T:LaquaiLib.Util.Processes"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Processes.Start">
            <summary>
            Starts raising the events defined in <see cref="T:LaquaiLib.Util.Processes"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Processes.Stop">
            <summary>
            Stops raising the events defined in <see cref="T:LaquaiLib.Util.Processes"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Processes.ConditionalRaiseEvents(System.Object)">
            <summary>
            Raises the events defined in <see cref="T:LaquaiLib.Util.Processes"/> if their conditions are met.
            </summary>
            <param name="state">Unused / ignored unconditionally.</param>
        </member>
        <member name="T:LaquaiLib.Util.ScreenCapture">
            <summary>
            Wraps some screenshot functionality from <see cref="T:System.Drawing.Bitmap"/> and <see cref="T:System.Drawing.Graphics"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ScreenCapture.ResolutionScales">
            <summary>
            The resolution scales set in Windows Settings for each monitor. They are used whenever the capture region is automatically set.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.Capture(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Captures a region of the screen.</para>
            <para>Passed coordinates are not corrected using <see cref="P:LaquaiLib.Util.ScreenCapture.ResolutionScales"/>.</para>
            </summary>
            <param name="x1">The x-coordinate of the top-left point of the region.</param>
            <param name="y1">The y-coordinate of the top-left point of the region.</param>
            <param name="x2">The x-coordinate of the bottom-right point of the region.</param>
            <param name="y2">The y-coordinate of the bottom-right point of the region.</param>
            <returns>The <see cref="T:System.Drawing.Bitmap"/> created by capturing the region.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.Capture(System.Drawing.Rectangle)">
            <summary>
            <para>Captures a region of the screen.</para>
            <para>Position coordinates of the passed <see cref="T:System.Drawing.Rectangle"/> are not corrected using <see cref="P:LaquaiLib.Util.ScreenCapture.ResolutionScales"/>.</para>
            </summary>
            <param name="region">The region to capture.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> object containing the capture created from the given region.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.Capture">
            <summary>
            Captures the entire primary screen.
            </summary>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> object containing the capture created from the primary screen.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.TestRegion(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a test image to show which region the passed coordinates would capture. If <paramref name="extract"/> is <c>false</c>, a red rectangle is painted onto the created capture <see cref="T:System.Drawing.Bitmap"/> to show this region. Otherwise, only the pixels inside the region are written to the output file. A singular blue pixel shows the center of this region.
            </summary>
            <remarks>
            <para>The blue center pixel may be off-center if the chosen region has even width and/or height.</para>
            </remarks>
            <param name="x1">The x-coordinate of the top-left point of the region.</param>
            <param name="y1">The y-coordinate of the top-left point of the region.</param>
            <param name="x2">The x-coordinate of the bottom-right point of the region.</param>
            <param name="y2">The y-coordinate of the bottom-right point of the region.</param>
            <param name="extract">Whether to only write the pixels inside the region to the output image.</param>
            <returns>The path to saved <see cref="T:System.Drawing.Bitmap"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.ScaleCoordinates(System.Int32,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            Scales the passed coordinates using the <see cref="P:LaquaiLib.Util.ScreenCapture.ResolutionScales"/> to monitor coordinates.
            </summary>
            <param name="monitor">The monitor to scale the coordinates for.</param>
            <param name="scaleDown">Whether to scale down (<c>true</c>) or up (<c>false</c>).</param>
            <param name="x">The <c>x</c>-coordinate to scale.</param>
            <param name="y">The <c>y</c>-coordinate to scale.</param>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.ScaleCoordinates(System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Scales the passed coordinates using the <see cref="P:LaquaiLib.Util.ScreenCapture.ResolutionScales"/> to monitor coordinates.
            </summary>
            <param name="monitor">The monitor to scale the coordinates for.</param>
            <param name="scaleDown">Whether to scale down (<c>true</c>) or up (<c>false</c>).</param>
            <param name="x1">The <c>x</c>-coordinate of the top-left point to scale.</param>
            <param name="y1">The <c>y</c>-coordinate of the top-left point to scale.</param>
            <param name="x2">The <c>x</c>-coordinate of the bottom-right point to scale.</param>
            <param name="y2">The <c>y</c>-coordinate of the bottom-right point to scale.</param>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.ScaleCoordinates(System.Int32,System.Boolean,System.Drawing.Rectangle@)">
            <summary>
            Scales the passed <see cref="T:System.Drawing.Rectangle"/> using the <see cref="P:LaquaiLib.Util.ScreenCapture.ResolutionScales"/> to monitor coordinates.
            </summary>
            <param name="monitor">The monitor to scale the coordinates for.</param>
            <param name="scaleDown">Whether to scale down (<c>true</c>) or up (<c>false</c>).</param>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle"/> to scale.</param>
        </member>
        <member name="E:LaquaiLib.Util.ScreenCapture.Captured">
            <summary>
            Occurs when this <see cref="T:LaquaiLib.Util.ScreenCapture"/> captures the configured region, but only if <see cref="P:LaquaiLib.Util.ScreenCapture.Predicate"/> is satisfied.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ScreenCapture.Predicate">
            <summary>
            The predicate that is checked whenever a capture would occur. If this returns <c>false</c>, the capture is discarded.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.ScreenCapture.Timer">
            <summary>
            The <see cref="T:System.Threading.Timer"/> that controls when captures are made.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ScreenCapture.IsCapturing">
            <summary>
            Whether this <see cref="T:LaquaiLib.Util.ScreenCapture"/> is currently creating captures and may raise the <see cref="E:LaquaiLib.Util.ScreenCapture.Captured"/> event.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ScreenCapture.Region">
            <summary>
            The region this <see cref="T:LaquaiLib.Util.ScreenCapture"/> captures.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ScreenCapture.IsCaptureRegionScreen">
            <summary>
            Whether the configured capture <see cref="P:LaquaiLib.Util.ScreenCapture.Region"/> is the entire primary screen.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.Start">
            <summary>
            Causes this <see cref="T:LaquaiLib.Util.ScreenCapture"/> to create captures and raise the <see cref="E:LaquaiLib.Util.ScreenCapture.Captured"/> event.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.Stop">
            <summary>
            Causes this <see cref="T:LaquaiLib.Util.ScreenCapture"/> to no longer create captures and raise the <see cref="E:LaquaiLib.Util.ScreenCapture.Captured"/> event.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.#ctor">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.Util.ScreenCapture.Region"/> set to the entire primary screen and a <see cref="P:LaquaiLib.Util.ScreenCapture.Predicate"/> that allows all created captures.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.#ctor(System.Func{System.Boolean})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.Util.ScreenCapture.Region"/> set to the entire primary screen and a passed <paramref name="predicate"/>.
            </summary>
            <param name="predicate">The <see cref="P:LaquaiLib.Util.ScreenCapture.Predicate"/> that is checked whenever a capture would occur. If this returns <c>false</c>, the capture is discarded.</param>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.#ctor(System.Drawing.Rectangle)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.Util.ScreenCapture.Region"/> set to the passed <paramref name="region"/> and a <see cref="P:LaquaiLib.Util.ScreenCapture.Predicate"/> that allows all created captures.
            </summary>
            <param name="region">The region this <see cref="T:LaquaiLib.Util.ScreenCapture"/> captures.</param>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.#ctor(System.Drawing.Rectangle,System.Func{System.Boolean})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.Util.ScreenCapture.Region"/> set to the passed <paramref name="region"/> and a passed <paramref name="predicate"/>.
            </summary>
            <param name="region">The region this <see cref="T:LaquaiLib.Util.ScreenCapture"/> captures.</param>
            <param name="predicate">The <see cref="P:LaquaiLib.Util.ScreenCapture.Predicate"/> that is checked whenever a capture would occur. If this returns <c>false</c>, the capture is discarded.</param>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.Util.ScreenCapture.Region"/> created from a series of passed coordinates and a <see cref="P:LaquaiLib.Util.ScreenCapture.Predicate"/> that allows all created captures.
            </summary>
            <param name="x1">The x-coordinate of the top-left point of the region.</param>
            <param name="y1">The y-coordinate of the top-left point of the region.</param>
            <param name="x2">The x-coordinate of the bottom-right point of the region.</param>
            <param name="y2">The y-coordinate of the bottom-right point of the region.</param>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Func{System.Boolean})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.Util.ScreenCapture.Region"/> created from a series of passed coordinates and a passed <paramref name="predicate"/>.
            </summary>
            <param name="x1">The x-coordinate of the top-left point of the region.</param>
            <param name="y1">The y-coordinate of the top-left point of the region.</param>
            <param name="x2">The x-coordinate of the bottom-right point of the region.</param>
            <param name="y2">The y-coordinate of the bottom-right point of the region.</param>
            <param name="predicate">The <see cref="P:LaquaiLib.Util.ScreenCapture.Predicate"/> that is checked whenever a capture would occur. If this returns <c>false</c>, the capture is discarded.</param>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.#ctor(System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.Util.ScreenCapture.Region"/> set to a specific screen and a <see cref="P:LaquaiLib.Util.ScreenCapture.Predicate"/> that allows all created captures.
            </summary>
            <param name="monitor">The number of the monitor to capture.</param>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.#ctor(System.Int32,System.Func{System.Boolean})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.Util.ScreenCapture.Region"/> set to a specific screen and a passed <paramref name="predicate"/>.
            </summary>
            <param name="monitor">The number of the monitor to capture.</param>
            <param name="predicate">The <see cref="P:LaquaiLib.Util.ScreenCapture.Predicate"/> that is checked whenever a capture would occur. If this returns <c>false</c>, the capture is discarded.</param>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.InitTimer">
            <summary>
            Initializes the <see cref="F:LaquaiLib.Util.ScreenCapture.Timer"/> that controls when captures are made.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.RaiseEvent(LaquaiLib.Util.ScreenCapture.ScreenCaptureEventArgs)">
            <summary>
            Event raise wrapper.
            </summary>
            <param name="e">The <see cref="T:LaquaiLib.Util.ScreenCapture.ScreenCaptureEventArgs"/> passed when raising the event.</param>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.Finalize">
            <summary>
            Destructor. Ensures that the <see cref="F:LaquaiLib.Util.ScreenCapture.Timer"/> no longer causes captures to be made when this <see cref="T:LaquaiLib.Util.ScreenCapture"/> dies.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.ScreenCapture.ScreenCaptureEventArgs">
            <summary>
            Event args that are passed when raising a <see cref="E:LaquaiLib.Util.ScreenCapture.Captured"/> event.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ScreenCapture.ScreenCaptureEventArgs.Bitmap">
            <summary>
            The created <see cref="T:System.Drawing.Bitmap"/> capture.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ScreenCapture.ScreenCaptureEventArgs.CaptureTime">
            <summary>
            When the capture was created.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.ScreenCaptureEventArgs.#ctor(System.Drawing.Bitmap,System.DateTime)">
            <summary>
            Instantiates <see cref="T:LaquaiLib.Util.ScreenCapture.ScreenCaptureEventArgs"/> with the passed <paramref name="bitmap"/> and <paramref name="timestamp"/>.
            </summary>
            <param name="bitmap"></param>
            <param name="timestamp"></param>
        </member>
        <member name="T:LaquaiLib.Util.TaskbarProgress">
            <summary>
            Represents a handler for a progress display on the current window's taskbar icon.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.#ctor(System.Windows.Window)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.TaskbarProgress"/> with reference to a specified <paramref name="window"/>.
            </summary>
            <param name="window">The <see cref="T:System.Windows.Window"/> the taskbar icon of which is to display progress.</param>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.GetInstance(System.Windows.Window)">
            <summary>
            Creates or directly returns an existing instance of <see cref="T:LaquaiLib.Util.TaskbarProgress"/> with reference to a specified <paramref name="window"/>.
            </summary>
            <remarks>
            The application calling this method or using its return value must own the specified <paramref name="window"/>.
            </remarks>
            <param name="window">The <see cref="T:System.Windows.Window"/> the taskbar icon of which is to display progress.</param>
            <returns>A <see cref="T:LaquaiLib.Util.TaskbarProgress"/> instance.</returns>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.GetInstance(System.IntPtr)">
            <summary>
            Creates or directly returns an existing instance of <see cref="T:LaquaiLib.Util.TaskbarProgress"/> with reference to a <see cref="T:System.Windows.Window"/> identified by its <paramref name="pointer"/>.
            </summary>
            <remarks>
            The application calling this method or using its return value must own the <see cref="T:System.Windows.Window"/> pointed to by <paramref name="pointer"/>.
            </remarks>
            <param name="pointer">The pointer to the <see cref="T:System.Windows.Window"/> the taskbar icon of which is to display progress.</param>
            <returns>A <see cref="T:LaquaiLib.Util.TaskbarProgress"/> instance.</returns>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.GetInstance">
            <summary>
            Creates or directly returns an existing instance of <see cref="T:LaquaiLib.Util.TaskbarProgress"/> with reference to the <see cref="T:System.Windows.Window"/> of the calling process.
            </summary>
            <returns>A <see cref="T:LaquaiLib.Util.TaskbarProgress"/> instance.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the calling context's window handle was 0. Usually occurs when this method is called from a non-WPF context.</exception>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.ResetInstance">
            <summary>
            Resets the state of the taskbar progress bar and the <see cref="T:LaquaiLib.Util.TaskbarProgress"/> instance that is kept internally. Only one <see cref="T:LaquaiLib.Util.TaskbarProgress"/> instance may exist at a time.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.SetState(System.Windows.Shell.TaskbarItemProgressState)">
            <summary>
            Sets the state of the taskbar progress visual.
            </summary>
            <param name="state">The new state of the taskbar progress visual.</param>
            <returns>The value of the <see cref="P:System.Windows.Shell.TaskbarItemInfo.ProgressState"/> property after the attempted set operation.</returns>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.SetValue(System.Int32)">
            <summary>
            Sets a new value for the taskbar progress bar.
            </summary>
            <param name="percent">The new value for the taskbar progress bar. Must be between 0 and 100. Values outside this range are clamped.</param>
            <returns>The value of the <see cref="P:System.Windows.Shell.TaskbarItemInfo.ProgressValue"/> property after the attempted set operation.</returns>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.SetValue(System.Double)">
            <summary>
            Sets a new value for the taskbar progress bar.
            </summary>
            <param name="value">The new value for the taskbar progress bar. Must be between 0 and 1. Values outside this range are clamped.</param>
            <returns>The value of the <see cref="P:System.Windows.Shell.TaskbarItemInfo.ProgressValue"/> property after the attempted set operation.</returns>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.IncreaseValue(System.Double)">
            <summary>
            Increases the value of the taskbar progress bar by a specified amount.
            </summary>
            <param name="value">The amount to increase the value of the taskbar progress bar by. If the given value would cause the progress bar's value to fall outside range (0-1), the value is clamped.</param>
            <returns>The value of the <see cref="P:System.Windows.Shell.TaskbarItemInfo.ProgressValue"/> property after the attempted set operation.</returns>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.DecreaseValue(System.Double)">
            <summary>
            Decreases the value of the taskbar progress bar by a specified amount.
            </summary>
            <param name="value">The amount to decrease the value of the taskbar progress bar by. If the given value would cause the progress bar's value to fall outside range (0-1), the value is clamped.</param>
            <returns>The value of the <see cref="P:System.Windows.Shell.TaskbarItemInfo.ProgressValue"/> property after the attempted set operation.</returns>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.AnimateToValueAsync(System.Double,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Animates towards a specified progress <paramref name="value"/> within a specified <paramref name="timeSpan"/>. Must be called from the UI thread or the <see cref="T:System.Windows.Threading.Dispatcher"/> of your main <see cref="T:System.Windows.Window"/>, otherwise the animation will not work.
            </summary>
            <param name="value">The value to animate progress towards.</param>
            <param name="timeSpan">The amount of time for the animation to take in milliseconds. It may not be possible to obey this in all cases.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that is monitored for cancellation requests.</param>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.GetValue">
            <summary>
            Gets the current value of the taskbar progress bar.
            </summary>
            <returns>The current value of the taskbar progress bar.</returns>
        </member>
        <member name="T:LaquaiLib.Util.Windows">
            <summary>
            Provides methods and events for working with windows.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.Windows.EnumWindowsProc">
            <summary>
            Encapsulates a method that is called for each top-level window that is enumerated using <see cref="M:LaquaiLib.Util.Windows.EnumWindows(LaquaiLib.Util.Windows.EnumWindowsProc,System.IntPtr)"/>.
            </summary>
            <param name="hWnd">The handle of the window.</param>
            <param name="lParam">An application-defined value given in <see cref="M:LaquaiLib.Util.Windows.EnumWindows(LaquaiLib.Util.Windows.EnumWindowsProc,System.IntPtr)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:LaquaiLib.Util.Windows.GetActiveWindowHandle">
            <summary>
            Retrieves the handle of the currently active window.
            </summary>
            <returns>The handle of the currently active window or <c>null</c> if no window is active or the retrieval failed.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Windows.GetActiveWindowTitle">
            <summary>
            Retrieves the title of the currently active window.
            </summary>
            <returns>The title of the currently active window or <c>null</c> if no window is active or the retrieval failed.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Windows.GetActiveWindowPid">
            <summary>
            Retrieves the PID of the process that owns the currently active window.
            </summary>
            <returns>The PID of the process that owns the currently active window or <c>null</c> if no window is active or the retrieval failed.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Windows.GetWindowHandle(System.String)">
            <summary>
            Retrieves the handle of the first window that matches the specified <paramref name="title"/>.
            </summary>
            <param name="title">The title of the window to find.</param>
            <returns>The HWND of the first window that matches the specified <paramref name="title"/> or <c>null</c> if no window matches the specified <paramref name="title"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Windows.GetAllWindowTitles(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Replaces the contents of the given <paramref name="existing"/> <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.String"/> with the titles of all top-level windows.
            </summary>
            <param name="existing">The <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.String"/> to place the window titles into.</param>
        </member>
        <member name="M:LaquaiLib.Util.Windows.GetAllWindowHandles(System.Collections.Generic.ICollection{System.IntPtr})">
            <summary>
            Replaces the contents of the given <paramref name="existing"/> <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.IntPtr"/> with the handles of all top-level windows.
            </summary>
            <param name="existing">The <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.IntPtr"/> to place the window handles into.</param>
        </member>
        <member name="M:LaquaiLib.Util.Windows.GetAllWindows(System.Collections.Generic.IDictionary{System.IntPtr,System.String})">
            <summary>
            Replaces the contents of the given <paramref name="existing"/> <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:System.IntPtr"/> and <see cref="T:System.String"/> with the handles and titles of all top-level windows.
            </summary>
            <param name="existing">The <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:System.IntPtr"/> and <see cref="T:System.String"/> to place the window handle-title pairs into.</param>
        </member>
        <member name="E:LaquaiLib.Util.Windows.ActiveWindowChanged">
            <summary>
            Occurs when the active window changes.
            </summary>
            <remarks>Before a delegate is added to this event's invocation list, the current active window is stored internally to prevent immediately having the event fire.</remarks>
        </member>
        <member name="E:LaquaiLib.Util.Windows.WindowCreated">
            <summary>
            Occurs when a new window is created / opened.
            </summary>
            <remarks>Before a delegate is added to this event's invocation list, the list of currently existent windows is stored internally to prevent immediately having the event fire.</remarks>
        </member>
        <member name="E:LaquaiLib.Util.Windows.WindowDestroyed">
            <summary>
            Occurs when a window is destroyed / closed.
            </summary>
            <remarks>Before a delegate is added to this event's invocation list, the list of currently existent windows is stored internally to prevent immediately having the event fire.</remarks>
        </member>
        <member name="T:LaquaiLib.Util.Windows.WindowEvent">
            <summary>
            Encapsulates a method that is called when a window event defined in <see cref="T:LaquaiLib.Util.Windows"/> occurs.
            </summary>
            <param name="handle">The handle of the window. If <c>null</c>, the handle could not be obtained.</param>
            <param name="title">The title of the window. If <c>null</c>, the title could not be obtained.</param>
        </member>
        <member name="M:LaquaiLib.Util.Windows.Clear">
            <summary>
            Removes all entries in the invocation lists of the events defined in <see cref="T:LaquaiLib.Util.Windows"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Windows.Start">
            <summary>
            Starts raising the events defined in <see cref="T:LaquaiLib.Util.Windows"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Windows.Stop">
            <summary>
            Stops raising the events defined in <see cref="T:LaquaiLib.Util.Windows"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Windows.ConditionalRaiseEvents(System.Object)">
            <summary>
            Raises the events defined in <see cref="T:LaquaiLib.Util.Windows"/> if their conditions are met.
            </summary>
            <param name="state">Unused / ignored unconditionally.</param>
        </member>
        <member name="T:LaquaiLib.WPF.ValueConverters.BoolInverterConverter">
            <summary>
            Represents an <see cref="T:System.Windows.Data.IValueConverter"/> implementation that inverts a <see cref="T:System.Boolean"/> value.ss
            </summary>
        </member>
        <member name="M:LaquaiLib.WPF.ValueConverters.BoolInverterConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a <see cref="T:System.Boolean"/> value to its inverse.
            </summary>
            <param name="value">The input bool value.</param>
            <param name="targetType">The <see cref="T:System.Type"/> that the receiving context expects the output of this method to be of.</param>
            <param name="parameter">An additional parameter passed by the calling context. May be null.</param>
            <param name="culture">Which culture to use when converting / formatting the value.</param>
            <returns>The inverse of the input <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the input <paramref name="value"/> is not a <see cref="T:System.Boolean"/>.</exception>
        </member>
        <member name="M:LaquaiLib.WPF.ValueConverters.BoolInverterConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts an "inverse" <see cref="T:System.Boolean"/> value to its original value.
            </summary>
            <param name="value">The input bool value.</param>
            <param name="targetType">The <see cref="T:System.Type"/> that the receiving context expects the output of this method to be of.</param>
            <param name="parameter">An additional parameter passed by the calling context. May be null.</param>
            <param name="culture">Which culture to use when converting / formatting the value.</param>
            <returns>The inverse of the input <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the input <paramref name="value"/> is not a <see cref="T:System.Boolean"/>.</exception>
        </member>
        <member name="T:LaquaiLib.WPF.ValueConverters.NotNullToBoolConverter">
            <summary>
            Represents an <see cref="T:System.Windows.Data.IValueConverter"/> implementation that returns a <see cref="T:System.Boolean"/> value depending on whether the given input is null.
            </summary>
        </member>
        <member name="M:LaquaiLib.WPF.ValueConverters.NotNullToBoolConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a given <paramref name="value"/> to a <see cref="T:System.Boolean"/> value depending on whether is is <c>null</c>.
            </summary>
            <param name="value">The input value.</param>
            <param name="targetType">The <see cref="T:System.Type"/> that the receiving context expects the output of this method to be of.</param>
            <param name="parameter">An additional parameter passed by the calling context. May be null.</param>
            <param name="culture">Which culture to use when converting / formatting the value.</param>
            <returns><c>true</c> if the given input <paramref name="value"/> is not null, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:LaquaiLib.WPF.ValueConverters.NotNullToBoolConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            [Unsupported] Converts a previously converted <paramref name="value"/> back to its original value. This method unconditionally throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">The input value.</param>
            <param name="targetType">The <see cref="T:System.Type"/> that the receiving context expects the output of this method to be of.</param>
            <param name="parameter">An additional parameter passed by the calling context. May be null.</param>
            <param name="culture">Which culture to use when converting / formatting the value.</param>
            <returns><c>true</c> if the given input <paramref name="value"/> is not null, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:LaquaiLib.Wrappers.TempAlloc">
            <summary>
            Represents a temporarily allocated region of unmanaged memory that is automatically freed when its wrapper object is disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.#ctor(System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> with the given size as represented by a 32-bit integer.
            </summary>
            <param name="bytes">The amount of bytes to allocate.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.#ctor(System.Int32,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> with the given size as represented by a 32-bit integer, optionally clearing any previous data.
            </summary>
            <param name="bytes">The amount of bytes to allocate.</param>
            <param name="clear">A value indicating whether any previous data in the allocated memory region should be cleared.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> as a wrapper around existing allocated memory.
            </summary>
            <param name="address">The address to the memory region to wrap with this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/>.</param>
            <param name="size">The size of the memory region at <paramref name="address"/>.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.#ctor(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> as a wrapper around existing allocated memory.
            </summary>
            <param name="address">The address to the memory region to wrap with this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/>.</param>
            <param name="size">The size of the memory region at <paramref name="address"/>.</param>
            <param name="clear">A value indicating whether any previous data in the allocated memory region should be cleared.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Create``1">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> for exactly one instance of the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to allocate memory for.</typeparam>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Create``1(System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> for exactly one instance of the given <see cref="T:System.Type"/>, optionally clearing any previous data.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to allocate memory for.</typeparam>
            <param name="clear">A value indicating whether any previous data in the allocated memory region should be cleared.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Create``1(System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> for <paramref name="count"/> instances of the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to allocate memory for.</typeparam>
            <param name="count">The amount of <typeparamref name="T"/> instances to allocate memory for.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Create``1(System.Int32,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> for <paramref name="count"/> instances of the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to allocate memory for.</typeparam>
            <param name="count">The amount of <typeparamref name="T"/> instances to allocate memory for.</param>
            <param name="clear">A value indicating whether any previous data in the allocated memory region should be cleared.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Create``1(``0)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> for the
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the <paramref name="value"/> to allocate memory for.</typeparam>
            <param name="value">A value of type <typeparamref name="T"/> to allocate memory for. The existing value is copied to the newly allocated memory region.</param>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempAlloc.Address">
            <summary>
            The address of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempAlloc.Size">
            <summary>
            The size of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps in bytes.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempAlloc.Bits">
            <summary>
            The size of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps in bits.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempAlloc.Data">
            <summary>
            A <see cref="T:System.Span`1"/> of <see cref="T:System.Byte"/> that represents the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempAlloc.IsDisposed">
            <summary>
            Whether this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> has been disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Reallocate(System.Int32)">
            <summary>
            Resizes the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps.
            </summary>
            <param name="bytes">The new size of the memory region in bytes.</param>
            <returns>A value indicating whether the <see cref="P:LaquaiLib.Wrappers.TempAlloc.Address"/> of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps has changed. If <c>true</c>, reading from any previous addresses is considered undefined behavior.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.As``1">
            <summary>
            Attempts to cast the contents of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps to an instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to cast the contents of the memory region to.</typeparam>
            <returns>The entire contents of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps as an instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.As``1(System.Int32,System.Int32)">
            <summary>
            Attempts to cast the content of a slice of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps to an instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to cast the contents of the memory region to.</typeparam>
            <param name="offset">The offset at which to start the slice.</param>
            <param name="length">The length of the slice.</param>
            <returns>The contents of the slice of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps as an instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Clear">
            <summary>
            Clears the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps (sets all bytes to zero).
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Replace(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Searches for the first occurrence of a given <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Byte"/> in the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps and replaces it with memory represented by another <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Byte"/>.
            </summary>
            <param name="search">The sequence of bytes to find in <see cref="P:LaquaiLib.Wrappers.TempAlloc.Data"/>.</param>
            <param name="replacement">The sequence of bytes to replace the first occurrence of <paramref name="search"/> with. The length of this sequence need not be equal to the length of the <paramref name="search"/> sequence.</param>
            <param name="shift">Whether to shift the bytes to the right of the replacement after it has been made.
            <para/><list type="bullet">
            <item/>If <c><paramref name="replacement"/>.Length &gt; <paramref name="search"/>.Length</c>, <list type="bullet">
                <item/>and <c><paramref name="shift"/></c>, the bytes that would be overwritten by the <paramref name="replacement"/> are shifted right to fully accomodate the replacement.
                <item/>and <c>!<paramref name="shift"/></c>, the <paramref name="replacement"/> bytes overwrite any bytes after <paramref name="search"/>.
            </list>
            <item/>If <c><paramref name="replacement"/>.Length &lt; <paramref name="search"/>.Length</c>, <list type="bullet">
                <item/>and <c><paramref name="shift"/></c>, the bytes remaining in the space of <paramref name="search"/> after the replacement is made are discarded and the bytes to the right of it are shifted left to fill the space. The size of the memory region is decreased by <c>(<paramref name="search"/>.Length - <paramref name="replacement"/>.Length)</c>.
                <item/>and <c>!<paramref name="shift"/></c>, the bytes remaining in the space of <paramref name="search"/> after the replacement is made are left untouched. The size of the memory region does not change.
            </list>
            </list>
            </param>
            <returns>A value that indicates whether a replacement was made.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.ReplaceAll(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Searches for all occurrences of a given <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Byte"/> in the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps and replaces them with memory represented by another <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Byte"/>.
            </summary>
            <param name="search">The sequence of bytes to find in <see cref="P:LaquaiLib.Wrappers.TempAlloc.Data"/>.</param>
            <param name="replacement">The sequence of bytes to replace the occurrences of <paramref name="search"/> with. The length of this sequence need not be equal to the length of the <paramref name="search"/> sequence.</param>
            <param name="shift">Whether to shift the bytes to the right of the replacement after it has been made.
            <para/><list type="bullet">
            <item/>If <c><paramref name="replacement"/>.Length &gt; <paramref name="search"/>.Length</c>, <list type="bullet">
                <item/>and <c><paramref name="shift"/></c>, the bytes that would be overwritten by the <paramref name="replacement"/> are shifted right to fully accomodate the replacement.
                <item/>and <c>!<paramref name="shift"/></c>, the <paramref name="replacement"/> bytes overwrite any bytes after <paramref name="search"/>.
            </list>
            <item/>If <c><paramref name="replacement"/>.Length &lt; <paramref name="search"/>.Length</c>, <list type="bullet">
                <item/>and <c><paramref name="shift"/></c>, the bytes remaining in the space of <paramref name="search"/> after the replacement is made are discarded and the bytes to the right of it are shifted left to fill the space. The size of the memory region is decreased by <c>(<paramref name="search"/>.Length - <paramref name="replacement"/>.Length)</c>.
                <item/>and <c>!<paramref name="shift"/></c>, the bytes remaining in the space of <paramref name="search"/> after the replacement is made are left untouched. The size of the memory region does not change.
            </list>
            </list>
            </param>
            <returns>The number of replacements made.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.ToHexString">
            <summary>
            Serializes the contents of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps to a <see cref="T:System.String"/> of hexadecimal characters, grouped into 4-byte words.
            </summary>
            <returns>The string as described.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.ToBinaryString">
            <summary>
            Serializes the contents of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps to a <see cref="T:System.String"/> of binary characters, grouped into 32-bit words.
            </summary>
            <returns>The string as described.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Finalize">
            <summary>
            Finalizes this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.DisposeSecure">
            <summary>
            In addition to performing application-defined tasks associated with freeing, releasing, or resetting unmanaged resources, clears the entire contents of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps (sets all bytes to zero).
            </summary>
        </member>
        <member name="T:LaquaiLib.Wrappers.TempArray`1">
            <summary>
            Represents a temporary array of <typeparamref name="T"/> that is automatically cleared from memory when its wrapper object is disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> with the given size. It is automatically rented from and returned to <see cref="P:System.Buffers.ArrayPool`1.Shared"/> upon disposal of this <see cref="T:LaquaiLib.Wrappers.TempArray`1"/>, unless <c>false</c> is explicitly passed for <paramref name="allowPooledArray"/>.
            </summary>
            <param name="capacity">The capacity of the array to create.</param>
            <param name="allowPooledArray">Whether to allow the array to be rented from <see cref="P:System.Buffers.ArrayPool`1.Shared"/>. If <c>false</c>, a new array will be created instead.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.#ctor(`0[],System.Buffers.ArrayPool{`0})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> as a wrapper around the specified array of <typeparamref name="T"/>.
            </summary>
            <param name="array">The array of <typeparamref name="T"/> to wrap with this <see cref="T:LaquaiLib.Wrappers.TempArray`1"/>.</param>
            <param name="arrayPool">The <see cref="T:System.Buffers.ArrayPool`1"/> to return the array to when this <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> is disposed. May be <c>null</c> to indicate that the passed <paramref name="array"/> is not from any <see cref="T:System.Buffers.ArrayPool`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.#ctor(`0,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> with the given <paramref name="size"/> and initializes all elements with the given <paramref name="value"/>.
            </summary>
            <param name="value">The value to initialize all elements with.</param>
            <param name="size">The size of the array to create.</param>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempArray`1.Array">
            <summary>
            The array of <typeparamref name="T"/> this <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> wraps.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempArray`1.IsDisposed">
            <summary>
            Whether this <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> has been disposed.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempArray`1.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempArray`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempArray`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempArray`1.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempArray`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempArray`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.Equals(System.Object,System.Collections.IEqualityComparer)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.GetHashCode(System.Collections.IEqualityComparer)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.CompareTo(System.Object,System.Collections.IComparer)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.Add(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.IndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.Insert(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.CopyTo(LaquaiLib.Wrappers.TempArray{`0},System.Int32)">
            <summary>
            Copies the elements of this <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> to another <see cref="T:LaquaiLib.Wrappers.TempArray`1"/>, starting at a particular index.
            </summary>
            <param name="tempArray">The <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> that is the destination of the elements copied from this <see cref="T:LaquaiLib.Wrappers.TempArray`1"/>.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="tempArray"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="tempArray"/> is multi-dimensional, the number of elements in this <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> is greater than the available space from <paramref name="index"/> to the end of the destination <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> or the type of the source <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> cannot be cast automatically to the type of the destination <see cref="T:LaquaiLib.Wrappers.TempArray`1"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.Clone">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.Finalize">
            <summary>
            Finalizes this <see cref="T:LaquaiLib.Wrappers.TempArray`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Wrappers.TempDirectory">
            <summary>
            Represents a temporary directory that is automatically deleted when its wrapper object is disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempDirectory.#ctor">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempDirectory"/> with a fully random name.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempDirectory.#ctor(System.String)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempDirectory"/> as a wrapper around the specified directory. If the target directory does not exist, it is created. A deletion attempt is still made when the wrapping <see cref="T:LaquaiLib.Wrappers.TempDirectory"/> is disposed.
            </summary>
            <param name="path">The path to the directory to wrap with this <see cref="T:LaquaiLib.Wrappers.TempDirectory"/>.</param>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempDirectory.Path">
            <summary>
            The path to the file this <see cref="T:LaquaiLib.Wrappers.TempDirectory"/> wraps.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempDirectory.IsDisposed">
            <summary>
            Whether this <see cref="T:LaquaiLib.Wrappers.TempDirectory"/> has been disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempDirectory.Finalize">
            <summary>
            Finalizes this <see cref="T:LaquaiLib.Wrappers.TempDirectory"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempDirectory.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Wrappers.TempFile">
            <summary>
            Represents a temporary file that is automatically deleted when its wrapper object is disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempFile.#ctor">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempFile"/> with the file name and extension being assigned by the OS. It is usually a <see cref="T:System.Guid"/> with the extension <c>.tmp</c>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempFile.#ctor(System.String)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempFile"/> with the file name being assigned by the OS (it is usually a <see cref="T:System.Guid"/>), and changes its extension to the one specified.
            </summary>
            <param name="fileExtension">The file extension for this <see cref="T:LaquaiLib.Wrappers.TempFile"/>.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempFile.#ctor(System.String,System.String)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempFile"/> as a wrapper around the specified file path. If the target file does not exist, it is created. A deletion attempt is still made when the wrapping <see cref="T:LaquaiLib.Wrappers.TempFile"/> is disposed.
            </summary>
            <param name="path">The path to the file to wrap with this <see cref="T:LaquaiLib.Wrappers.TempFile"/>.</param>
            <param name="fileExtension">The file extension for this <see cref="T:LaquaiLib.Wrappers.TempFile"/>. This is the extension <paramref name="path"/> is changed to before opening the file stream. If <c>null</c> or white space, the existing extension in <paramref name="path"/> is kept.</param>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempFile.Path">
            <summary>
            The path to the file this <see cref="T:LaquaiLib.Wrappers.TempFile"/> wraps.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempFile.Stream">
            <summary>
            The <see cref="T:System.IO.FileStream"/> for the file this <see cref="T:LaquaiLib.Wrappers.TempFile"/> wraps.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempFile.IsDisposed">
            <summary>
            Whether this <see cref="T:LaquaiLib.Wrappers.TempFile"/> has been disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempFile.Finalize">
            <summary>
            Finalizes this <see cref="T:LaquaiLib.Wrappers.TempFile"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempFile.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:System.Runtime.InteropServices.GCHandle`1">
            <summary>
            Provides a way to access a managed instance of <typeparamref name="T"/> from unmanaged memory.
            </summary>
            <typeparam name="T">The type of the object to be referenced.</typeparam>
        </member>
        <member name="P:System.Runtime.InteropServices.GCHandle`1.Handle">
            <summary>
            The wrapped untyped <see cref="T:System.Runtime.InteropServices.GCHandle"/>.
            </summary>
        </member>
        <member name="P:System.Runtime.InteropServices.GCHandle`1.Target">
            <summary>
            Gets the object of type <typeparamref name="T"/> this <see cref="T:System.Runtime.InteropServices.GCHandle`1"/> represents.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the handle has been disposed.</exception>
        </member>
        <member name="P:System.Runtime.InteropServices.GCHandle`1.IsAllocated">
            <inheritdoc cref="P:System.Runtime.InteropServices.GCHandle.IsAllocated"/>
        </member>
        <member name="M:System.Runtime.InteropServices.GCHandle`1.#ctor(`0)">
            <summary>
            Instantiates a new <see cref="T:System.Runtime.InteropServices.GCHandle`1"/> that represents the specified instance of <typeparamref name="T"/>.
            </summary>
            <param name="value">The object to be referenced.</param>
        </member>
        <member name="M:System.Runtime.InteropServices.GCHandle`1.#ctor(`0,System.Runtime.InteropServices.GCHandleType)">
            <summary>
            Instantiates a new <see cref="T:System.Runtime.InteropServices.GCHandle`1"/> that represents the specified instance of <typeparamref name="T"/>.
            </summary>
            <param name="value">The object to be referenced.</param>
            <param name="type">The <see cref="T:System.Runtime.InteropServices.GCHandleType"/> of the object to be referenced.</param>
        </member>
        <member name="M:System.Runtime.InteropServices.GCHandle`1.#ctor(System.Nullable{System.IntPtr})">
            <summary>
            Instantiates a new <see cref="T:System.Runtime.InteropServices.GCHandle`1"/> from a handle to a managed object.
            </summary>
            <param name="ptr">The handle to a managed object.</param>
        </member>
        <member name="M:System.Runtime.InteropServices.GCHandle`1.#ctor(System.Runtime.InteropServices.GCHandle)">
            <summary>
            Instantiates a new <see cref="T:System.Runtime.InteropServices.GCHandle`1"/> typed <typeparamref name="T"/> from an existing untyped handle to a managed object.
            </summary>
            <param name="handle">The existing untyped handle to a managed object.</param>
        </member>
        <member name="M:System.Runtime.InteropServices.GCHandle`1.AddrOfPinnedObject(System.Runtime.InteropServices.GCHandle{`0})">
            <inheritdoc cref="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject"/>
        </member>
        <member name="M:System.Runtime.InteropServices.GCHandle`1.op_Implicit(System.Runtime.InteropServices.GCHandle{`0})~System.Runtime.InteropServices.GCHandle">
            <summary>
            Returns the untyped <see cref="T:System.Runtime.InteropServices.GCHandle"/> a typed <see cref="T:System.Runtime.InteropServices.GCHandle`1"/> represents.
            </summary>
            <param name="handle">The <see cref="T:System.Runtime.InteropServices.GCHandle`1"/> to convert.</param>
        </member>
        <member name="M:System.Runtime.InteropServices.GCHandle`1.op_Equality(System.Runtime.InteropServices.GCHandle{`0},System.Runtime.InteropServices.GCHandle{`0})">
            <summary>
            Returns a value indicating whether two typed <see cref="T:System.Runtime.InteropServices.GCHandle`1"/> instances are equal.
            </summary>
            <param name="left">The first <see cref="T:System.Runtime.InteropServices.GCHandle`1"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Runtime.InteropServices.GCHandle`1"/> to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> and <paramref name="right"/> are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Runtime.InteropServices.GCHandle`1.op_Inequality(System.Runtime.InteropServices.GCHandle{`0},System.Runtime.InteropServices.GCHandle{`0})">
            <summary>
            Returns a value indicating whether two typed <see cref="T:System.Runtime.InteropServices.GCHandle`1"/> instances are unequal.
            </summary>
            <param name="left">The first <see cref="T:System.Runtime.InteropServices.GCHandle`1"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Runtime.InteropServices.GCHandle`1"/> to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> and <paramref name="right"/> are unequal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Runtime.InteropServices.GCHandle`1.op_Explicit(System.Runtime.InteropServices.GCHandle{`0})~System.IntPtr">
            <summary>
            Returns the internal integer representation of the wrapped <see cref="P:System.Runtime.InteropServices.GCHandle`1.Handle"/>.
            </summary>
            <param name="handle">The <see cref="T:System.Runtime.InteropServices.GCHandle`1"/> to convert.</param>
        </member>
        <member name="M:System.Runtime.InteropServices.GCHandle`1.op_Explicit(System.Runtime.InteropServices.GCHandle{`0})~System.Nullable{System.IntPtr}">
            <summary>
            Returns the internal integer representation of the wrapped <see cref="P:System.Runtime.InteropServices.GCHandle`1.Handle"/>.
            </summary>
            <param name="handle">The <see cref="T:System.Runtime.InteropServices.GCHandle`1"/> to convert.</param>
        </member>
        <member name="M:System.Runtime.InteropServices.GCHandle`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.Runtime.InteropServices.GCHandle`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:System.Runtime.InteropServices.GCHandle`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:System.Runtime.InteropServices.GCHandle`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged and optionally the managed resources used by this <see cref="T:System.Runtime.InteropServices.GCHandle`1"/> instance.
            </summary>
            <param name="disposing">Whether to release the managed resources used by this <see cref="T:System.Runtime.InteropServices.GCHandle`1"/> instance.</param>
        </member>
        <member name="M:System.Runtime.InteropServices.GCHandle`1.Dispose">
            <summary>
            Releases the managed and unmanaged resources used by this <see cref="T:System.Runtime.InteropServices.GCHandle`1"/> instance.
            </summary>
        </member>
        <member name="T:System.Xml.Linq.XRepetition">
            <summary>
            Represents an <see cref="T:System.Xml.Linq.XElement"/> that is repeated a certain number of times.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XRepetition.Count">
            <summary>
            The number of times this element is repeated when it is serialized to XML. If left unchanged, this is <c>1</c>.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XRepetition.XElement">
            <summary>
            The <see cref="T:System.Xml.Linq.XElement"/> this <see cref="T:System.Xml.Linq.XRepetition"/> wraps.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XRepetition.#ctor(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Instantiates an <see cref="T:System.Xml.Linq.XRepetition"/> from an existing <see cref="T:System.Xml.Linq.XElement"/> and the number of times it is to be repeated.
            </summary>
            <param name="other">The <see cref="T:System.Xml.Linq.XElement"/> this <see cref="T:System.Xml.Linq.XRepetition"/> wraps.</param>
            <param name="count">The number of times this element is repeated when it is serialized to XML.</param>
        </member>
        <member name="M:System.Xml.Linq.XRepetition.#ctor(System.Xml.Linq.XName,System.Int32)">
            <summary>
            Instantiates an <see cref="T:System.Xml.Linq.XRepetition"/> from an <see cref="T:System.Xml.Linq.XName"/> and the number of times it is to be repeated.
            </summary>
            <param name="name">An <see cref="T:System.Xml.Linq.XName"/> instance that represents the name of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="count">The number of times this element is repeated when it is serialized to XML.</param>
        </member>
        <member name="M:System.Xml.Linq.XRepetition.#ctor(System.Xml.Linq.XStreamingElement,System.Int32)">
            <summary>
            Instantiates an <see cref="T:System.Xml.Linq.XRepetition"/> from an existing <see cref="T:System.Xml.Linq.XStreamingElement"/> and the number of times it is to be repeated.
            </summary>
            <param name="other">The <see cref="T:System.Xml.Linq.XStreamingElement"/> this <see cref="T:System.Xml.Linq.XRepetition"/> wraps.</param>
            <param name="count">The number of times this element is repeated when it is serialized to XML.</param>
        </member>
        <member name="M:System.Xml.Linq.XRepetition.#ctor(System.Xml.Linq.XName,System.Object,System.Int32)">
            <summary>
            Instantiates an <see cref="T:System.Xml.Linq.XRepetition"/> from an <see cref="T:System.Xml.Linq.XName"/>, a content <see cref="T:System.Object"/> and the number of times it is to be repeated.
            </summary>
            <param name="name">An <see cref="T:System.Xml.Linq.XName"/> instance that represents the name of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="content">The content of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="count">The number of times this element is repeated when it is serialized to XML.</param>
        </member>
        <member name="M:System.Xml.Linq.XRepetition.#ctor(System.Xml.Linq.XName,System.Object[],System.Int32)">
            <summary>
            Instantiates an <see cref="T:System.Xml.Linq.XRepetition"/> from an <see cref="T:System.Xml.Linq.XName"/>, an <see cref="T:System.Array"/> of content <see cref="T:System.Object"/>s and the number of times it is to be repeated.
            </summary>
            <param name="name">An <see cref="T:System.Xml.Linq.XName"/> instance that represents the name of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="content">An <see cref="T:System.Array"/> of content <see cref="T:System.Object"/>s of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="count">The number of times this element is repeated when it is serialized to XML.</param>
        </member>
        <member name="M:System.Xml.Linq.XRepetition.#ctor(System.Xml.Linq.XName,System.Object[])">
            <summary>
            Instantiates an <see cref="T:System.Xml.Linq.XRepetition"/> from an <see cref="T:System.Xml.Linq.XName"/> and an <see cref="T:System.Array"/> of content <see cref="T:System.Object"/>s.
            </summary>
            <param name="name">An <see cref="T:System.Xml.Linq.XName"/> instance that represents the name of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="content">An <see cref="T:System.Array"/> of content <see cref="T:System.Object"/>s of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
        </member>
        <member name="M:System.Xml.Linq.XRepetition.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Instantiates an <see cref="T:System.Xml.Linq.XRepetition"/> from an existing <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="other">The <see cref="T:System.Xml.Linq.XElement"/> this <see cref="T:System.Xml.Linq.XRepetition"/> wraps.</param>
        </member>
        <member name="M:System.Xml.Linq.XRepetition.#ctor(System.Xml.Linq.XName)">
            <summary>
            Instantiates an <see cref="T:System.Xml.Linq.XRepetition"/> from an <see cref="T:System.Xml.Linq.XName"/>.
            </summary>
            <param name="name">An <see cref="T:System.Xml.Linq.XName"/> instance that represents the name of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
        </member>
        <member name="M:System.Xml.Linq.XRepetition.#ctor(System.Xml.Linq.XName,System.Object)">
            <summary>
            Instantiates an <see cref="T:System.Xml.Linq.XRepetition"/> from an <see cref="T:System.Xml.Linq.XName"/> and a content <see cref="T:System.Object"/>.
            </summary>
            <param name="name">An <see cref="T:System.Xml.Linq.XName"/> instance that represents the name of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="content">The content of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
        </member>
        <member name="M:System.Xml.Linq.XRepetition.#ctor(System.Xml.Linq.XStreamingElement)">
            <summary>
            Instantiates an <see cref="T:System.Xml.Linq.XRepetition"/> from an existing <see cref="T:System.Xml.Linq.XStreamingElement"/>.
            </summary>
            <param name="other">The <see cref="T:System.Xml.Linq.XStreamingElement"/> this <see cref="T:System.Xml.Linq.XRepetition"/> wraps.</param>
        </member>
    </members>
</doc>
