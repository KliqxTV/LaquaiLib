<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LaquaiLib</name>
    </assembly>
    <members>
        <member name="T:LaquaiLib.Collections.AddedEventArgs`1">
            <summary>
            Represents the event arguments for the Added event.
            </summary>
            <typeparam name="T">The type of the item being added.</typeparam>
        </member>
        <member name="P:LaquaiLib.Collections.AddedEventArgs`1.Item">
            <summary>
            Gets the item that was added.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.AddedEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.AddedEventArgs`1"/> class.
            </summary>
            <param name="item">The item that was added.</param>
        </member>
        <member name="T:LaquaiLib.Collections.Deque`1">
            <summary>
            Represents a "deque" (or "double-ended queue") data structure.
            This is essentially just a <see cref="T:System.Collections.Generic.LinkedList`1"/> with the last element pointing to the first element and vice versa.
            </summary>
            <typeparam name="T">The type of elements in the deque.</typeparam>
        </member>
        <member name="P:LaquaiLib.Collections.Deque`1.Head">
            <summary>
            Gets the first element of the deque.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.Deque`1.Tail">
            <summary>
            Gets the "last" element of the deque.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.Deque`1.Count">
            <summary>
            Gets the number of nodes in the <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.Deque`1.IsEmpty">
            <summary>
            Gets a value indicating whether the <see cref="T:LaquaiLib.Collections.Deque`1"/> is empty.
            </summary>
            <remarks>
            Do not use <see cref="P:LaquaiLib.Collections.Deque`1.Count"/> to perform an empty check under any circumstances. With sufficiently large deques, the performance penalty is significant.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.#ctor">
            <summary>
            Instantiates a new, empty <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.#ctor(`0[])">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Collections.Deque`1"/> with nodes containing the specified values.
            </summary>
            <param name="values">The values to insert into the deque.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc cref="M:LaquaiLib.Collections.Deque`1.#ctor(`0[])"/>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.#ctor(System.Int32)">
            <summary>
            Instantaites a new <see cref="T:LaquaiLib.Collections.Deque`1"/> with the specified number of nodes that contain the default value of <typeparamref name="T"/>.
            </summary>
            <param name="nodes">The number of nodes to insert into the deque.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.FindFirst(`0)">
            <summary>
            Finds the first node in the deque that contains the specified value.
            </summary>
            <param name="value">The value to find.</param>
            <returns>A reference to the first node that contains the specified value, or <see langword="null"/> if no such node was found.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.FindLast(`0)">
            <summary>
            Finds the last node in the deque that contains the specified value.
            </summary>
            <param name="value">The value to find.</param>
            <returns>A reference to the last node that contains the specified value, or <see langword="null"/> if no such node was found.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.FindAll(`0)">
            <summary>
            Finds all nodes in the deque that contain the specified value.
            </summary>
            <param name="value">The value to find.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that enumerates all nodes that contain the specified value.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.AddAfter(LaquaiLib.Collections.DequeNode{`0},`0)">
            <summary>
            Inserts a new <see cref="T:LaquaiLib.Collections.DequeNode`1"/> containing the specified value after the specified node.
            </summary>
            <param name="node">The node to insert the new node after.</param>
            <param name="value">The value to insert.</param>
            <returns>A reference to the newly inserted node.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.AddAfter(LaquaiLib.Collections.DequeNode{`0},LaquaiLib.Collections.DequeNode{`0})">
            <summary>
            Inserts the specified <see cref="T:LaquaiLib.Collections.DequeNode`1"/> after the specified node.
            </summary>
            <param name="node">The node to insert the new node after.</param>
            <param name="newNode">The node to insert.</param>
            <returns>A reference to the newly inserted node.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="newNode"/> already belongs to a <see cref="T:LaquaiLib.Collections.Deque`1"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.AddBefore(LaquaiLib.Collections.DequeNode{`0},`0)">
            <summary>
            Inserts a new <see cref="T:LaquaiLib.Collections.DequeNode`1"/> containing the specified value before the specified node.
            </summary>
            <param name="node">The node to insert the new node before.</param>
            <param name="value">The value to insert.</param>
            <returns>A reference to the newly inserted node.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.AddBefore(LaquaiLib.Collections.DequeNode{`0},LaquaiLib.Collections.DequeNode{`0})">
            <summary>
            Inserts the specified <see cref="T:LaquaiLib.Collections.DequeNode`1"/> before the specified node.
            </summary>
            <param name="node">The node to insert the new node before.</param>
            <param name="newNode">The node to insert.</param>
            <returns>A reference to the newly inserted node.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="newNode"/> already belongs to a <see cref="T:LaquaiLib.Collections.Deque`1"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.AddFirst(`0)">
            <summary>
            Adds a new <see cref="T:LaquaiLib.Collections.DequeNode`1"/> containing the specified value to the beginning of the deque (that is, the specified node becomes the <see cref="P:LaquaiLib.Collections.Deque`1.Head"/>).
            </summary>
            <param name="value">The value to insert.</param>
            <returns>A reference to the newly inserted node.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.AddFirst(LaquaiLib.Collections.DequeNode{`0})">
            <summary>
            Adds the specified <see cref="T:LaquaiLib.Collections.DequeNode`1"/> to the beginning of the deque (that is, the specified node becomes the <see cref="P:LaquaiLib.Collections.Deque`1.Head"/>).
            </summary>
            <param name="node">The node to insert.</param>
            <returns>A reference to the newly inserted node.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="node"/> already belongs to a <see cref="T:LaquaiLib.Collections.Deque`1"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.AddLast(`0)">
            <summary>
            Adds a new <see cref="T:LaquaiLib.Collections.DequeNode`1"/> containing the specified value to the end of the deque (that is, the specified node becomes the <see cref="P:LaquaiLib.Collections.Deque`1.Tail"/>).
            </summary>
            <param name="value">The value to insert.</param>
            <returns>A reference to the newly inserted node.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.AddLast(LaquaiLib.Collections.DequeNode{`0})">
            <summary>
            Adds the specified <see cref="T:LaquaiLib.Collections.DequeNode`1"/> to the end of the deque (that is, the specified node becomes the <see cref="P:LaquaiLib.Collections.Deque`1.Tail"/>).
            </summary>
            <param name="node">The node to insert.</param>
            <returns>A reference to the newly inserted node.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="node"/> already belongs to a <see cref="T:LaquaiLib.Collections.Deque`1"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.Clear">
            <summary>
            Clears the reference to <see cref="P:LaquaiLib.Collections.Deque`1.Head"/>, which in turn clears the reference to all other nodes.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.Contains(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Determines whether the <see cref="T:LaquaiLib.Collections.Deque`1"/> contains at least one node that contains the specified value.
            </summary>
            <param name="value">The value to find.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values.</param>
            <returns><see langword="true"/> if the <see cref="T:LaquaiLib.Collections.Deque`1"/> contains at least one node that contains the specified value, otherwise <see langword="false"/>.</returns>
            <remarks>
            If the <see cref="T:LaquaiLib.Collections.Deque`1"/> is empty (that is, <see cref="P:LaquaiLib.Collections.Deque`1.Head"/> is <see langword="null"/>), this method always returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the values of the <see cref="T:LaquaiLib.Collections.Deque`1"/> to the specified array, starting at the specified index.
            </summary>
            <param name="array">The array to copy the values to.</param>
            <param name="index">The index in <paramref name="array"/> at which to begin inserting values.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.EnsureIntegrity">
            <summary>
            Enumerates the <see cref="T:LaquaiLib.Collections.Deque`1"/> and ensures that all contained nodes have references to neighboring nodes and to this <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.Rotate(System.Int32)">
            <summary>
            Rotates the <see cref="T:LaquaiLib.Collections.Deque`1"/> by the specified number of nodes (that is, the node <see cref="P:LaquaiLib.Collections.Deque`1.Head"/> references is shifted by the specified number of nodes).
            </summary>
            <param name="n">The number of nodes to rotate by. For example, if <paramref name="n"/> is 1, the node <see cref="P:LaquaiLib.Collections.Deque`1.Head"/> references becomes <c><see cref="P:LaquaiLib.Collections.Deque`1.Head"/>.Previous</c>.</param>
            <returns>A reference to the new <see cref="P:LaquaiLib.Collections.Deque`1.Head"/> node.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.RemoveNode(LaquaiLib.Collections.DequeNode{`0})">
            <summary>
            Detaches the specified node from the <see cref="T:LaquaiLib.Collections.Deque`1"/> and its neighbors.
            </summary>
            <param name="node">The node to remove.</param>
            <remarks>
            This method ensures that, unless <see cref="P:LaquaiLib.Collections.Deque`1.Head"/> itself is detached, <see cref="P:LaquaiLib.Collections.Deque`1.Head"/> will always remain in a valid state (that is, it will remain attached to its <see cref="T:LaquaiLib.Collections.Deque`1"/> and its, possibly new, neighbors).
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="node"/> does not belong to this <see cref="T:LaquaiLib.Collections.Deque`1"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.RemoveNodes(LaquaiLib.Collections.DequeNode{`0}[])">
            <summary>
            Detaches the specified nodes from the <see cref="T:LaquaiLib.Collections.Deque`1"/> and their neighbors.
            </summary>
            <param name="nodes">The nodes to remove.</param>
            <returns>The number of nodes that were removed.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.RemoveNodes(System.Collections.Generic.IEnumerable{LaquaiLib.Collections.DequeNode{`0}})">
            <inheritdoc cref="M:LaquaiLib.Collections.Deque`1.RemoveNodes(LaquaiLib.Collections.DequeNode{`0}[])"/>"
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.RemoveAll(`0)">
            <summary>
            Detaches all nodes that contain the specified value from the <see cref="T:LaquaiLib.Collections.Deque`1"/> and their neighbors.
            </summary>
            <param name="value">The value to remove.</param>
            <returns>The number of nodes that were removed.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.PopLeft">
            <summary>
            Detaches the <see cref="P:LaquaiLib.Collections.Deque`1.Head"/> from the <see cref="T:LaquaiLib.Collections.Deque`1"/> and its neighbors.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="T:LaquaiLib.Collections.Deque`1"/> is empty.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.PopRight">
            <summary>
            Detaches the <see cref="P:LaquaiLib.Collections.Deque`1.Tail"/> from the <see cref="T:LaquaiLib.Collections.Deque`1"/> and its neighbors.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="T:LaquaiLib.Collections.Deque`1"/> is empty.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.System#Collections#Generic#IEnumerable{LaquaiLib#Collections#DequeNode{T}}#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that iterates through the <see cref="T:LaquaiLib.Collections.Deque`1"/>'s nodes.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that iterates through the values of the <see cref="T:LaquaiLib.Collections.Deque`1"/>'s nodes.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.ToLinkedList">
            <summary>
            Constructs a new <see cref="T:System.Collections.Generic.LinkedList`1"/> from the <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
            <returns>The newly constructed <see cref="T:System.Collections.Generic.LinkedList`1"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Collections.DequeNode`1">
            <summary>
            Represents a node in a <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
            <typeparam name="T">The type of the value this node contains. It must be compatible with the type of the <see cref="T:LaquaiLib.Collections.Deque`1"/> this node belongs to.</typeparam>
        </member>
        <member name="M:LaquaiLib.Collections.DequeNode`1.#ctor(`0)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Collections.DequeNode`1"/> with the specified value that is not attached to a <see cref="T:LaquaiLib.Collections.Deque`1"/> and has no neighbors.
            </summary>
            <param name="value">The value this node contains.</param>
        </member>
        <member name="M:LaquaiLib.Collections.DequeNode`1.#ctor(`0,LaquaiLib.Collections.DequeNode{`0},LaquaiLib.Collections.DequeNode{`0})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Collections.DequeNode`1"/> with the specified value that is not attached to a <see cref="T:LaquaiLib.Collections.Deque`1"/> and has the specified neighbors.
            </summary>
            <param name="value">The value this node contains.</param>
            <param name="next">The next node in the <see cref="T:LaquaiLib.Collections.Deque`1"/>.</param>
            <param name="previous">The previous node in the <see cref="T:LaquaiLib.Collections.Deque`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Collections.DequeNode`1.#ctor(`0,LaquaiLib.Collections.DequeNode{`0},LaquaiLib.Collections.DequeNode{`0},LaquaiLib.Collections.Deque{`0})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Collections.DequeNode`1"/> with the specified value that attached to the specified <see cref="T:LaquaiLib.Collections.Deque`1"/> and has the specified neighbors.
            </summary>
            <param name="value">The value this node contains.</param>
            <param name="next">The next node in the <see cref="T:LaquaiLib.Collections.Deque`1"/>.</param>
            <param name="previous">The previous node in the <see cref="T:LaquaiLib.Collections.Deque`1"/>.</param>
            <param name="deque">The <see cref="T:LaquaiLib.Collections.Deque`1"/> this node belongs to.</param>
        </member>
        <member name="P:LaquaiLib.Collections.DequeNode`1.Deque">
            <summary>
            Returns the <see cref="T:LaquaiLib.Collections.Deque`1"/> this node belongs to.
            If <see langword="null"/> or set explicitly, the node is not coupled to a <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.DequeNode`1.Next">
            <summary>
            Returns the next node in the <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.DequeNode`1.Previous">
            <summary>
            Returns the previous node in the <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.DequeNode`1.Value">
            <summary>
            Returns the value this node contains.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.DequeNode`1.ToString">
            <summary>
            Returns the string representation of the <see cref="P:LaquaiLib.Collections.DequeNode`1.Value"/> this node contains.
            </summary>
            <returns>A <see cref="T:System.String"/> as described.</returns>
        </member>
        <member name="T:LaquaiLib.Collections.DetachedDequeNodeException`1">
            <summary>
            The exception that is thrown when <see cref="M:LaquaiLib.Collections.Deque`1.EnsureIntegrity"/> encounters a <see cref="T:LaquaiLib.Collections.DequeNode`1"/> that is not attached to a <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
            <typeparam name="T">The type of the value the detached <see cref="T:LaquaiLib.Collections.DequeNode`1"/> contains.</typeparam>
        </member>
        <member name="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Message">
            <inheritdoc />
        </member>
        <member name="P:LaquaiLib.Collections.DetachedDequeNodeException`1.InnerException">
            <inheritdoc cref="P:System.Exception.InnerException"/>
        </member>
        <member name="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Node">
            <summary>
            The <see cref="T:LaquaiLib.Collections.DequeNode`1"/> that is not attached to a <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Offense">
            <summary>
            The kind of offense that <see cref="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Node"/> committed which caused this exception to be thrown.
            </summary>
        </member>
        <member name="T:LaquaiLib.Collections.DetachedDequeNodeException`1.OffenseKind">
            <summary>
            Identifies the kind of offense that <see cref="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Node"/> committed which caused this exception to be thrown.
            </summary>
        </member>
        <member name="F:LaquaiLib.Collections.DetachedDequeNodeException`1.OffenseKind.NoDeque">
            <summary>
            Indicates that <see cref="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Node"/> is not attached to a <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
        </member>
        <member name="F:LaquaiLib.Collections.DetachedDequeNodeException`1.OffenseKind.NoNext">
            <summary>
            Indicates that <see cref="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Node"/> is missing a reference to its next node.
            </summary>
        </member>
        <member name="F:LaquaiLib.Collections.DetachedDequeNodeException`1.OffenseKind.NoPrevious">
            <summary>
            Indicates that <see cref="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Node"/> is missing a reference to its previous node.
            </summary>
        </member>
        <member name="F:LaquaiLib.Collections.DetachedDequeNodeException`1.OffenseKind.InconsistentNext">
            <summary>
            Indicates that <see cref="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Node"/>'s next node does not have a reference to <see cref="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Node"/> as its previous node.
            </summary>
        </member>
        <member name="F:LaquaiLib.Collections.DetachedDequeNodeException`1.OffenseKind.InconsistentPrevious">
            <summary>
            Indicates that <see cref="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Node"/>'s previous node does not have a reference to <see cref="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Node"/> as its next node.
            </summary>
        </member>
        <member name="T:LaquaiLib.Collections.IndexGetEventArgs">
            <summary>
            Represents the event arguments for the IndexGet event.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.IndexGetEventArgs.Index">
            <summary>
            Gets the index being accessed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.IndexGetEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.IndexGetEventArgs"/> class.
            </summary>
            <param name="index">The index being accessed.</param>
        </member>
        <member name="T:LaquaiLib.Collections.IndexSetEventArgs">
            <summary>
            Represents the event arguments for the IndexSet event.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.IndexSetEventArgs.Index">
            <summary>
            Gets the index being accessed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.IndexSetEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.IndexSetEventArgs"/> class.
            </summary>
            <param name="index">The index being accessed.</param>
        </member>
        <member name="T:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1">
            <summary>
            Represents a <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> with a maximum number of items allowed in it. When the collection is at capacity and it is attempted to enqueue another object, the oldest is removed.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
        </member>
        <member name="P:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1.Capacity">
            <summary>
            The capacity of this <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1.#ctor">
            <summary>
            Instantiates a new empty <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1"/> with the default maximum capacity.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1"/> with the items from the passed <paramref name="collection"/>. Its maximum capacity is set to <paramref name="collection"/>'s length.
            </summary>
            <param name="collection">The collection to copy the new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1"/>'s items from.</param>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1.#ctor(System.ReadOnlySpan{`0})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1"/> with the items from the passed <paramref name="span"/>. Its maximum capacity is set to <paramref name="span"/>'s length.
            </summary>
            <param name="span">The <see cref="T:System.ReadOnlySpan`1"/> of <typeparamref name="T"/> to copy the new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1"/>'s items from.</param>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1.#ctor(System.Int32)">
            <summary>
            Instantiates a new empty <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1"/> with the given maximum <paramref name="capacity"/>.
            </summary>
            <param name="capacity">The maximum number of items this <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1"/> can hold before discarding the oldest value.</param>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1"/> with the items from the passed <paramref name="collection"/>. Its maximum capacity is set to <paramref name="capacity"/>.
            </summary>
            <param name="collection">The collection to copy the new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1"/>'s items from.</param>
            <param name="capacity">The maximum number of items this <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1"/> can hold before discarding the oldest value.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="capacity"/> is smaller than the number of items in <paramref name="collection"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1.#ctor(System.ReadOnlySpan{`0},System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1"/> with the items from the passed <paramref name="span"/>. Its maximum capacity is set to <paramref name="capacity"/>.
            </summary>
            <param name="span">The span to copy the new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1"/>'s items from.</param>
            <param name="capacity">The maximum number of items this <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1"/> can hold before discarding the oldest value.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="capacity"/> is smaller than the number of items in <paramref name="span"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1.Enqueue(`0)">
            <summary>
            Forcibly adds an item to the end of the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1"/>, discarding the oldest item if the collection is at maximum capacity.
            </summary>
            <param name="item">The item to add to the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1.TryEnqueue(`0)">
            <summary>
            Attempts to add an item to the end of the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1"/>. If this would cause the oldest item to be discarded because the collection is at capacity, the collection remains unchanged.
            </summary>
            <param name="item">The object to add to the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1"/>.</param>
            <returns>A value indicating whether the collection was modified; <see langword="true"/> if <paramref name="item"/> could be added, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1.Reduce(System.Int32)">
            <summary>
            Removes items from the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue`1"/>, discarding the oldest items until the passed <paramref name="length"/> is reached.
            </summary>
            <param name="length">The number of items to remain in the collection.</param>
        </member>
        <member name="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1">
            <summary>
            Represents a <see cref="T:System.Collections.Generic.Queue`1"/> with a maximum number of items allowed in it. When the collection is at capacity and it is attempted to enqueue another object, the oldest is removed.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
        </member>
        <member name="P:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.Capacity">
            <summary>
            The capacity of this <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.#ctor">
            <summary>
            Instantiates a new empty <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> with the default maximum capacity.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> with the items from the passed <paramref name="collection"/>. Its maximum capacity is set to <paramref name="collection"/>'s length.
            </summary>
            <param name="collection">The collection to copy the new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>'s items from.</param>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.#ctor(System.ReadOnlySpan{`0})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> with the items from the passed <paramref name="span"/>. Its maximum capacity is set to <paramref name="span"/>'s length.
            </summary>
            <param name="span">The <see cref="T:System.ReadOnlySpan`1"/> of <typeparamref name="T"/> to copy the new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>'s items from.</param>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.#ctor(System.Int32)">
            <summary>
            Instantiates a new empty <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> with the given maximum <paramref name="capacity"/>.
            </summary>
            <param name="capacity">The maximum number of items this <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> can hold before discarding the oldest value.</param>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> with the items from the passed <paramref name="collection"/>. Its maximum capacity is set to <paramref name="capacity"/>.
            </summary>
            <param name="collection">The collection to copy the new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>'s items from.</param>
            <param name="capacity">The maximum number of items this <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> can hold before discarding the oldest value.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="capacity"/> is smaller than the number of items in <paramref name="collection"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.#ctor(System.ReadOnlySpan{`0},System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> with the items from the passed <paramref name="span"/>. Its maximum capacity is set to <paramref name="capacity"/>.
            </summary>
            <param name="span">The span to copy the new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>'s items from.</param>
            <param name="capacity">The maximum number of items this <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> can hold before discarding the oldest value.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="capacity"/> is smaller than the number of items in <paramref name="span"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.Enqueue(`0)">
            <summary>
            Forcibly adds an item to the end of the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>, discarding the oldest item if the collection is at maximum capacity.
            </summary>
            <param name="item">The item to add to the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.TryEnqueue(`0)">
            <summary>
            Attempts to add an item to the end of the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>. If this would cause the oldest item to be discarded because the collection is at capacity, the collection remains unchanged.
            </summary>
            <param name="item">The object to add to the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>.</param>
            <returns>A value indicating whether the collection was modified; <see langword="true"/> if <paramref name="item"/> could be added, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.Reduce(System.Int32)">
            <summary>
            Removes items from the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>, discarding the oldest items until the passed <paramref name="length"/> is reached.
            </summary>
            <param name="length">The number of items to remain in the collection.</param>
        </member>
        <member name="T:LaquaiLib.Collections.ObservableCollectionFast`1">
            <summary>
            Represents a fast implementation of a dynamic data collection that provides notifications when items get added, removed, or when the whole list is refreshed.
            </summary>
            <typeparam name="T">The Type of the elements in the collection.</typeparam>
        </member>
        <member name="P:LaquaiLib.Collections.ObservableCollectionFast`1.IsSilenced">
            <summary>
            Whether the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> is silenced. No registered events are raised, not even ones manually triggered using <see cref="M:LaquaiLib.Collections.ObservableCollectionFast`1.RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.ObservableCollectionFast`1.KeepOrdered">
            <summary>
            Whether the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> should keep itself ordered. When this is <see langword="true"/>, whenever the collection is modified in a way that raises a <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> event, it is sorted using <see cref="P:LaquaiLib.Collections.ObservableCollectionFast`1.Comparer"/>.
            Assigning a new <see cref="T:System.Boolean"/> value will cause the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> to be sorted using the currently set <see cref="P:LaquaiLib.Collections.ObservableCollectionFast`1.Comparer"/> immediately. This also raises a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> event.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.ObservableCollectionFast`1.Comparer">
            <summary>
            The <see cref="T:System.Collections.Generic.IComparer`1"/> used to compare elements in the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> if <see cref="P:LaquaiLib.Collections.ObservableCollectionFast`1.KeepOrdered"/> is <see langword="true"/>.
            <para/>
            <para/>Assigning a new <see cref="T:System.Collections.Generic.IComparer`1"/> will cause the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> to be sorted using the new <see cref="T:System.Collections.Generic.IComparer`1"/> immediately. This also raises a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> event.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.ObservableCollectionFast`1.#ctor">
            <summary>
            Instantiates a new <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.ObservableCollectionFast`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Instantiates a new <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection from which the elements are copied.</param>
        </member>
        <member name="M:LaquaiLib.Collections.ObservableCollectionFast`1.#ctor(System.ReadOnlySpan{`0})">
            <summary>
            Instantiates a new <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> that contains elements copied from the specified span.
            </summary>
            <param name="span">The <see cref="T:System.ReadOnlySpan`1"/> of <typeparamref name="T"/> from which the elements are copied.</param>
        </member>
        <member name="M:LaquaiLib.Collections.ObservableCollectionFast`1.#ctor(`0[])">
            <summary>
            Instantiates a new <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> that contains the specified items and has a capacity equal to the number of items.
            </summary>
            <param name="items">The items for the list to contain.</param>
        </member>
        <member name="P:LaquaiLib.Collections.ObservableCollectionFast`1.Item(System.Index)">
            <summary>
            Gets or sets the element at the specified <paramref name="index"/>.
            </summary>
            <param name="index">An <see cref="T:System.Index"/> instance that identifies the location of the element to get or set.</param>
            <returns>The element at the specified <paramref name="index"/>.</returns>
        </member>
        <member name="P:LaquaiLib.Collections.ObservableCollectionFast`1.Item(System.Range)">
            <summary>
            Gets or sets elements within the specified <paramref name="range"/>.
            </summary>
            <param name="range">The <see cref="T:System.Range"/> in which to get or set elements.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the items that were get or set.</returns>
        </member>
        <member name="P:LaquaiLib.Collections.ObservableCollectionFast`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets elements within a range as specified by <paramref name="index"/> and <paramref name="count"/>.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to get or set.</param>
            <param name="count">The number of elements to get or set.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the items that were get or set.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.ObservableCollectionFast`1.Silenced(System.Action)">
            <summary>
            Executes the specified <paramref name="action"/>. For its entire context, the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> is silenced, then the previous state is restored (that is, if the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> was silenced before, this is the same as calling <paramref name="action"/> directly).
            </summary>
            <param name="action">The <see cref="T:System.Action"/> to execute.</param>
        </member>
        <member name="M:LaquaiLib.Collections.ObservableCollectionFast`1.Unsilenced(System.Action)">
            <summary>
            Executes the specified <paramref name="action"/>. For its entire context, the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> is unsilenced, then the previous state is restored (that is, if the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> was unsilenced before, this is the same as calling <paramref name="action"/> directly).
            </summary>
            <param name="action">The <see cref="T:System.Action"/> to execute.</param>
        </member>
        <member name="M:LaquaiLib.Collections.ObservableCollectionFast`1.Sort">
            <summary>
            Orders the elements in the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> using the <see cref="P:LaquaiLib.Collections.ObservableCollectionFast`1.Comparer"/> or the default <see cref="T:System.Collections.Generic.Comparer`1"/> if <see cref="P:LaquaiLib.Collections.ObservableCollectionFast`1.Comparer"/> is <see langword="null"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.ObservableCollectionFast`1.SortSilent">
            <summary>
            Silently orders the elements in the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> using the <see cref="P:LaquaiLib.Collections.ObservableCollectionFast`1.Comparer"/> or the default <see cref="T:System.Collections.Generic.Comparer`1"/> if <see cref="P:LaquaiLib.Collections.ObservableCollectionFast`1.Comparer"/> is <see langword="null"/>. This causes no <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> event to be fired.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.ObservableCollectionFast`1.Add(`0)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/>
        </member>
        <member name="M:LaquaiLib.Collections.ObservableCollectionFast`1.AddRangeSilent(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Silently adds the elements of the specified collection to the end of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>. This causes no <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"/> event to be fired.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Collections.ObservableCollectionFast`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Collections.ObservableCollectionFast`1.AddSilent(`0)">
            <summary>
            Silently adds an element to the end of this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>. This causes no <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"/> event to be fired.
            </summary>
            <param name="item">The item to add to the end of this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Collections.ObservableCollectionFast`1.ClearSilent">
            <summary>
            Silently clears this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>. This causes no <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> event to be fired.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.ObservableCollectionFast`1.Reset(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Resets this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> by clearing it (silently) and re-filling it using the specified <paramref name="collection"/>.
            </summary>
            <param name="collection">The collection to fill this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> with.</param>
            <remarks>
            The clearing operation itself is silent, but the re-filling operation is not; that is, observers of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> will only be notified AFTER the re-filling operation is complete.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Collections.ObservableCollectionFast`1.Remove(`0)">
            <summary>
            Removes an element from this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <param name="item">The item to remove from this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Collections.ObservableCollectionFast`1.Remove(System.Func{`0,System.Boolean})">
            <summary>
            Removes all elements from this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> as dictated by a <paramref name="selector"/> <see cref="T:System.Func`2"/>.
            </summary>
            <param name="selector">A <see cref="T:System.Func`2"/> that determines whether an element should be removed.</param>
        </member>
        <member name="M:LaquaiLib.Collections.ObservableCollectionFast`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all occurrences of the specified items from the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <param name="collection">A sequence of values to remove from this <see cref="T:LaquaiLib.Collections.ObservableCollectionFast`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Collections.ObservableCollectionFast`1.RemoveSilent(`0)">
            <summary>
            Silently removes an element from this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>. This causes no <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"/> event to be fired.
            </summary>
            <param name="item">The item to remove from this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Collections.ObservableCollectionFast`1.RemoveSilent(System.Func{`0,System.Boolean})">
            <summary>
            Silently removes all elements from this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> as dictated by a <paramref name="selector"/> <see cref="T:System.Func`2"/>. This causes no <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove"/> event to be fired.
            </summary>
            <param name="selector">A <see cref="T:System.Func`2"/> that determines whether an element should be removed.</param>
        </member>
        <member name="M:LaquaiLib.Collections.ObservableCollectionFast`1.RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> event. Changes made to the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> by any methods with a "Silent" suffix will not be propagated to observers until this method is called.
            <paramref name="e"/>The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> to pass to observers. If <see langword="null"/>, a <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> with <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> will be passed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.ObservableCollectionFast`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="E:LaquaiLib.Collections.ObservableCollectionFast`1.PreCollectionChanged">
            <summary>
            Occurs before a <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> event is raised. It may modify the collection.
            </summary>
        </member>
        <member name="E:LaquaiLib.Collections.ObservableCollectionFast`1.PostCollectionChanged">
            <summary>
            Occurs after a <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> event is raised. It should not modify the collection as changes
            </summary>
        </member>
        <member name="E:LaquaiLib.Collections.ObservableCollectionFast`1.Added">
            <summary>
            Occurs before a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"/> event is raised for this <see cref="T:LaquaiLib.Collections.ObservableCollectionFast`1"/>. It may modify the collection.
            </summary>
        </member>
        <member name="E:LaquaiLib.Collections.ObservableCollectionFast`1.Removed">
            <summary>
            Occurs before a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove"/> event is raised for this <see cref="T:LaquaiLib.Collections.ObservableCollectionFast`1"/>. It may modify the collection.
            </summary>
        </member>
        <member name="E:LaquaiLib.Collections.ObservableCollectionFast`1.RangeAdded">
            <summary>
            Occurs before multiple items are added to this <see cref="T:LaquaiLib.Collections.ObservableCollectionFast`1"/>. It may modify the collection.
            </summary>
        </member>
        <member name="E:LaquaiLib.Collections.ObservableCollectionFast`1.RangeRemoved">
            <summary>
            Occurs before multiple items are removed from this <see cref="T:LaquaiLib.Collections.ObservableCollectionFast`1"/>. It may modify the collection.
            </summary>
        </member>
        <member name="E:LaquaiLib.Collections.ObservableCollectionFast`1.IndexGet">
            <summary>
            Occurs when an item located at an individual index is accessed. It may modify the collection.
            </summary>
        </member>
        <member name="E:LaquaiLib.Collections.ObservableCollectionFast`1.IndexSet">
            <summary>
            The event that is raised when an item located at an individual index is set. It may modify the collection.
            </summary>
        </member>
        <member name="E:LaquaiLib.Collections.ObservableCollectionFast`1.RangeGet">
            <summary>
            Occurs when multiple items in a specific range are accessed. It may modify the collection.
            </summary>
        </member>
        <member name="E:LaquaiLib.Collections.ObservableCollectionFast`1.RangeSet">
            <summary>
            Occurs when multiple items in a specific range are set. It may modify the collection.
            </summary>
        </member>
        <member name="E:LaquaiLib.Collections.ObservableCollectionFast`1.Refill">
            <summary>
            Occurs when the collection is reset by clearing it and refilling it. It may modify the collection.
            </summary>
        </member>
        <member name="E:LaquaiLib.Collections.ObservableCollectionFast`1.Empty">
            <summary>
            Occurs when the collection is reset by clearing it. It may modify the collection.
            </summary>
        </member>
        <member name="T:LaquaiLib.Collections.RangeAddedEventArgs`1">
            <summary>
            Represents the event arguments for the RangeAdded event.
            </summary>
            <typeparam name="T">The type of the items being added.</typeparam>
        </member>
        <member name="P:LaquaiLib.Collections.RangeAddedEventArgs`1.Items">
            <summary>
            Gets the items that were added.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.RangeAddedEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.RangeAddedEventArgs`1"/> class.
            </summary>
            <param name="items">The items that were added.</param>
        </member>
        <member name="T:LaquaiLib.Collections.RangeGetEventArgs">
            <summary>
            Represents the event arguments for the RangeGet event.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.RangeGetEventArgs.Index">
            <summary>
            Gets the starting index of the range being accessed.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.RangeGetEventArgs.Count">
            <summary>
            Gets the number of items in the range being accessed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.RangeGetEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.RangeGetEventArgs"/> class.
            </summary>
            <param name="index">The starting index of the range being accessed.</param>
            <param name="count">The number of items in the range being accessed.</param>
        </member>
        <member name="T:LaquaiLib.Collections.RangeRemovedEventArgs`1">
            <summary>
            Represents the event arguments for the RangeRemoved event.
            </summary>
            <typeparam name="T">The type of the items being removed.</typeparam>
        </member>
        <member name="P:LaquaiLib.Collections.RangeRemovedEventArgs`1.Items">
            <summary>
            Gets the items that were removed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.RangeRemovedEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.RangeRemovedEventArgs`1"/> class.
            </summary>
            <param name="items">The items that were removed.</param>
        </member>
        <member name="T:LaquaiLib.Collections.RangeSetEventArgs">
            <summary>
            Represents the event arguments for the RangeSet event.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.RangeSetEventArgs.Index">
            <summary>
            Gets the starting index of the range being accessed.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.RangeSetEventArgs.Count">
            <summary>
            Gets the number of items in the range being accessed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.RangeSetEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.RangeSetEventArgs"/> class.
            </summary>
            <param name="index">The starting index of the range being accessed.</param>
            <param name="count">The number of items in the range being accessed.</param>
        </member>
        <member name="T:LaquaiLib.Collections.RemovedEventArgs`1">
            <summary>
            Represents the event arguments for the Removed event.
            </summary>
            <typeparam name="T">The type of the item being removed.</typeparam>
        </member>
        <member name="P:LaquaiLib.Collections.RemovedEventArgs`1.Item">
            <summary>
            Gets the item that was removed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.RemovedEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.RemovedEventArgs`1"/> class.
            </summary>
            <param name="item">The item that was removed.</param>
        </member>
        <member name="T:LaquaiLib.Collections.ResetEventArgs`1">
            <summary>
            Represents the event arguments for the Reset event.
            </summary>
            <typeparam name="T">The type of the new contents.</typeparam>
        </member>
        <member name="P:LaquaiLib.Collections.ResetEventArgs`1.NewContents">
            <summary>
            Gets the new contents.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.ResetEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.ResetEventArgs`1"/> class.
            </summary>
            <param name="newContents">The new contents.</param>
        </member>
        <member name="T:LaquaiLib.Collections.Set`1">
            <summary>
            Represents an unsorted collection of unique items.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.#ctor">
            <summary>
            Instantiates a new, empty <see cref="T:LaquaiLib.Collections.Set`1"/> with the default equality comparer.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Collections.Set`1"/> with items copied from the specified <paramref name="collection"/> and the default equality comparer.
            </summary>
            <param name="collection">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose items are copied to the new <see cref="T:LaquaiLib.Collections.Set`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Instantiates a new, empty <see cref="T:LaquaiLib.Collections.Set`1"/> with the specified <paramref name="equalityComparer"/>.
            </summary>
            <param name="equalityComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use for equality comparisons.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Collections.Set`1"/> with items copied from the specified <paramref name="collection"/> and the specified <paramref name="equalityComparer"/>.
            </summary>
            <param name="collection">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose items are copied to the new <see cref="T:LaquaiLib.Collections.Set`1"/>.</param>
            <param name="equalityComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use for equality comparisons.</param>
        </member>
        <member name="P:LaquaiLib.Collections.Set`1.EqualityComparer">
            <summary>
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used for equality comparisons.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.Set`1.Count">
            <summary>
            The number of items in the <see cref="T:LaquaiLib.Collections.Set`1"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.Set`1.IsReadOnly">
            <summary>
            Whether the <see cref="T:LaquaiLib.Collections.Set`1"/> is read-only.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.Add(`0)">
            <summary>
            Attempts to add the specified item to the <see cref="T:LaquaiLib.Collections.Set`1"/>.
            </summary>
            <param name="item">The item to add.</param>
            <returns><see langword="true"/> if the addition was successful (that is, if the <see cref="T:LaquaiLib.Collections.Set`1"/> did not previously contain the item), otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.Clear">
            <summary>
            Removes all items from the <see cref="T:LaquaiLib.Collections.Set`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:LaquaiLib.Collections.Set`1"/> contains the specified item.
            </summary>
            <param name="item">The item to check for.</param>
            <returns><see langword="true"/> if the <see cref="T:LaquaiLib.Collections.Set`1"/> contains the item, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.Contains(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Determines whether the <see cref="T:LaquaiLib.Collections.Set`1"/> contains the specified item.
            </summary>
            <param name="item">The item to check for.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use for equality comparisons.</param>
            <returns><see langword="true"/> if the <see cref="T:LaquaiLib.Collections.Set`1"/> contains the item, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all items in the <see cref="T:LaquaiLib.Collections.Set`1"/> to the specified <paramref name="array"/>, starting at the specified <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">The array to copy the items to.</param>
            <param name="arrayIndex">The index in the array to start copying at.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all items in the <see cref="T:LaquaiLib.Collections.Set`1"/> that are also in the specified <paramref name="other"/> collection.
            </summary>
            <param name="other">The collection of items to remove.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that may be used to iterate over the items in the <see cref="T:LaquaiLib.Collections.Set`1"/>.
            The order in which it enumerates the items is undefined.
            </summary>
            <returns>The enumerator as described.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Keeps only the items in the <see cref="T:LaquaiLib.Collections.Set`1"/> that are also in the specified <paramref name="other"/> collection.
            </summary>
            <param name="other">The collection of items to keep.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the <see cref="T:LaquaiLib.Collections.Set`1"/> is a proper subset of the specified <paramref name="other"/> collection (that is, whether all items in the <see cref="T:LaquaiLib.Collections.Set`1"/> are also in the <paramref name="other"/> collection, but the <paramref name="other"/> collection contains at least one item that is not in the <see cref="T:LaquaiLib.Collections.Set`1"/>).
            </summary>
            <param name="other">The collection to compare to.</param>
            <returns><see langword="true"/> if the <see cref="T:LaquaiLib.Collections.Set`1"/> is a proper subset of the <paramref name="other"/> collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the <see cref="T:LaquaiLib.Collections.Set`1"/> is a proper superset of the specified <paramref name="other"/> collection (that is, whether all items in the <paramref name="other"/> collection are also in the <see cref="T:LaquaiLib.Collections.Set`1"/>, but the <see cref="T:LaquaiLib.Collections.Set`1"/> contains at least one item that is not in the <paramref name="other"/> collection).
            </summary>
            <param name="other">The collection to compare to.</param>
            <returns><see langword="true"/> if the <see cref="T:LaquaiLib.Collections.Set`1"/> is a proper superset of the <paramref name="other"/> collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the <see cref="T:LaquaiLib.Collections.Set`1"/> is a subset of the specified <paramref name="other"/> collection (that is, whether all items in the <see cref="T:LaquaiLib.Collections.Set`1"/> are also in the <paramref name="other"/> collection).
            </summary>
            <param name="other">The collection to compare to.</param>
            <returns><see langword="true"/> if the <see cref="T:LaquaiLib.Collections.Set`1"/> is a subset of the <paramref name="other"/> collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the <see cref="T:LaquaiLib.Collections.Set`1"/> is a superset of the specified <paramref name="other"/> collection (that is, whether all items in the <paramref name="other"/> collection are also in the <see cref="T:LaquaiLib.Collections.Set`1"/>).
            </summary>
            <param name="other">The collection to compare to.</param>
            <returns><see langword="true"/> if the <see cref="T:LaquaiLib.Collections.Set`1"/> is a superset of the <paramref name="other"/> collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the <see cref="T:LaquaiLib.Collections.Set`1"/> overlaps with the specified <paramref name="other"/> collection (that is, whether the <see cref="T:LaquaiLib.Collections.Set`1"/> contains at least one item that is also in the <paramref name="other"/> collection).
            </summary>
            <param name="other">The collection to compare to.</param>
            <returns><see langword="true"/> if the <see cref="T:LaquaiLib.Collections.Set`1"/> overlaps with the <paramref name="other"/> collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.Remove(`0)">
            <summary>
            Removes the specified item from the <see cref="T:LaquaiLib.Collections.Set`1"/>.
            </summary>
            <param name="item">The item to remove.</param>
            <returns><see langword="true"/> if the removal was successful (that is, if the <see cref="T:LaquaiLib.Collections.Set`1"/> contained the item), otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the <see cref="T:LaquaiLib.Collections.Set`1"/> is equal to the specified <paramref name="other"/> collection (that is, whether the <see cref="T:LaquaiLib.Collections.Set`1"/> contains the same items as the <paramref name="other"/> collection).
            </summary>
            <param name="other">The collection to compare to.</param>
            <returns><see langword="true"/> if the <see cref="T:LaquaiLib.Collections.Set`1"/> is equal to the <paramref name="other"/> collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all items from the <see cref="T:LaquaiLib.Collections.Set`1"/> that are also in the specified <paramref name="other"/> collection, and adds all items from the <paramref name="other"/> collection that are not already in the <see cref="T:LaquaiLib.Collections.Set`1"/>.
            </summary>
            <param name="other">The collection of items to operate on.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds all items from the specified <paramref name="other"/> collection to the <see cref="T:LaquaiLib.Collections.Set`1"/> that are not already in the <see cref="T:LaquaiLib.Collections.Set`1"/>.
            </summary>
            <param name="other">The collection of items to add.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.ToFrozenSet">
            <summary>
            Freezes the set into a <see cref="T:System.Collections.Frozen.FrozenSet`1"/>.
            </summary>
            <returns>The frozen set.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.ToSortedSet">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.SortedSet`1"/> from the <see cref="T:LaquaiLib.Collections.Set`1"/> using the default comparer for <typeparamref name="T"/>.
            </summary>
            <returns>The created <see cref="T:System.Collections.Generic.SortedSet`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.ToImmutableSortedSet">
            <summary>
            Creates an <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1"/> from the <see cref="T:LaquaiLib.Collections.Set`1"/>
            </summary>
            <returns>The created <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.Equals(LaquaiLib.Collections.Set{`0})">
            <summary>
            Compares the <see cref="T:LaquaiLib.Collections.Set`1"/> to the specified <paramref name="other"/> <see cref="T:LaquaiLib.Collections.Set`1"/> for equality.
            </summary>
            <param name="other">The <see cref="T:LaquaiLib.Collections.Set`1"/> to compare to.</param>
            <returns><see langword="true"/> if the <see cref="T:LaquaiLib.Collections.Set`1"/> is equal to the <paramref name="other"/> <see cref="T:LaquaiLib.Collections.Set`1"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Set`1.Equals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Compares the <see cref="T:LaquaiLib.Collections.Set`1"/> to the specified <paramref name="other"/> collection for equality.
            </summary>
            <param name="other">The collection to compare to.</param>
            <returns><see langword="true"/> if the <see cref="T:LaquaiLib.Collections.Set`1"/> is equal to the <paramref name="other"/> collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Collections.TwoWayLookup`2">
            <summary>
            Represents a two-way lookup table where entries can be looked up by either key or value and are guaranteed to be unique.
            Automatic enumeration is supported in the forward direction using standard <see cref="T:System.Collections.Generic.IEnumerable`1"/> methods.
            For (manual-only) reverse enumeration, use <see cref="M:LaquaiLib.Collections.TwoWayLookup`2.GetReverseEnumerator"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.AddForward(`0,`1)">
            <summary>
            Adds a new entry to the lookup table by the first type parameter <typeparamref name="T1"/>. An exception is thrown if either the key or the value already exists.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.AddReverse(`1,`0)">
            <summary>
            Adds a new entry to the lookup table by the second type parameter <typeparamref name="T2"/>. An exception is thrown if either the key or the value already exists.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.TryAddForward(`0,`1)">
            <summary>
            Attempts to add a new entry to the lookup table by the first type parameter <typeparamref name="T1"/>.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
            <returns><see langword="true"/> if the key-value pair could be added, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.TryAddReverse(`1,`0)">
            <summary>
            Attempts to add a new entry to the lookup table by the second type parameter <typeparamref name="T2"/>.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
            <returns><see langword="true"/> if the key-value pair could be added, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.Add``2(``0,``1)">
            <summary>
            Adds a new entry to the lookup table. An exception is thrown if either the key or the value already exists or if the type parameters do not match <typeparamref name="T1"/> and <typeparamref name="T2"/>.
            </summary>
            <typeparam name="TFirst">The type of the key.</typeparam>
            <typeparam name="TSecond">The type of the value.</typeparam>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
            <remarks>For the love of all things holy, avoid using this method. The 9000 generic type parameters make it a nightmare to use and slow as all hell. Additionally, it's incredibly inefficient because values of the generic types of this method cannot be directly cast to the generic types of the <see cref="T:LaquaiLib.Collections.TwoWayLookup`2"/>.</remarks>
            <exception cref="T:System.ArgumentException">Thrown if the types <typeparamref name="TFirst"/> and <typeparamref name="TSecond"/> do not match the <see cref="T:LaquaiLib.Collections.TwoWayLookup`2"/>'s type parameters in any order.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the type <typeparamref name="TFirst"/> matches both <typeparamref name="T1"/> and <typeparamref name="T2"/>, but the latter are different types.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the type <typeparamref name="TSecond"/> matches both <typeparamref name="T1"/> and <typeparamref name="T2"/>, but the latter are different types.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.TryAdd``2(``0,``1)">
            <summary>
            Attempts to add a new entry to the lookup table.
            </summary>
            <typeparam name="TFirst">The type of the key.</typeparam>
            <typeparam name="TSecond">The type of the value.</typeparam>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
            <remarks>For the love of all things holy, avoid using this method. The 9000 generic type parameters make it a nightmare to use and slow as all hell. Not just that, but the fact that this is specifically designed to fail silently without any indication of what's wrong, possibly with the type parameters, makes it even worse.</remarks>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.GetForward(`0)">
            <summary>
            Retrieves an entry from the lookup table by its key. An exception is thrown if there is no entry with the given key.
            </summary>
            <param name="key">The key of the entry.</param>
            <returns>The value associated with the given key.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.GetReverse(`1)">
            <summary>
            Retrieves an entry from the lookup table by its value. An exception is thrown if there is no entry with the given value.
            </summary>
            <param name="value">The value of the entry.</param>
            <returns>The key associated with the given value.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.TryGetForward(`0,`1@)">
            <summary>
            Attempts to retrieve an entry from the lookup table by its key.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">An <c>out</c> <typeparamref name="T2"/> variable that receives the retrieved value.</param>
            <returns><see langword="true"/> if there was a value associated with the key, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.TryGetReverse(`1,`0@)">
            <summary>
            Attempts to retrieve an entry from the lookup table by its value.
            </summary>
            <param name="value">The value of the entry.</param>
            <param name="key">An <c>out</c> <typeparamref name="T1"/> variable that receives the retrieved key.</param>
            <returns><see langword="true"/> if there was a key associated with the value, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.RemoveForward(`0)">
            <summary>
            Removes an entry from the lookup table by its key. An exception is thrown if there is no entry with the given key.
            </summary>
            <param name="key">The key of the entry.</param>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.RemoveReverse(`1)">
            <summary>
            Removes an entry from the lookup table by its value. An exception is thrown if there is no entry with the given value.
            </summary>
            <param name="value">The value of the entry.</param>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.TryRemoveForward(`0)">
            <summary>
            Attempts to remove an entry from the lookup table by its key.
            </summary>
            <param name="key">The key of the entry.</param>
            <returns><see langword="true"/> if there was a value associated with the key that could be removed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.TryRemoveReverse(`1)">
            <summary>
            Attempts to remove an entry from the lookup table by its value.
            </summary>
            <param name="value">The value of the entry.</param>
            <returns><see langword="true"/> if there was a key associated with the value that could be removed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.GetReverseEnumerator">
            <summary>
            Returns an enumerator that iterates through the reverse collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the reverse collection.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.AnyExtensions">
            <summary>
            Provides Extension Methods for all Types.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.AllEqual``1(``0,``0[])">
            <summary>
            Checks whether a number of objects are all equal to each other. If any of the passed objects are <see langword="null"/>, all others must also be <see langword="null"/>.
            </summary>
            <typeparam name="T">The Type of the objects to compare.</typeparam>
            <param name="source">The first object to use for the comparison.</param>
            <param name="other">The remaining objects to use for the comparison.</param>
            <returns><see langword="true"/> if all passed objects are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.EqualBy``2(``0,System.Func{``0,``1},``0[])">
            <summary>
            Invokes a <paramref name="transform"/> function on a <paramref name="source"/> and any <paramref name="other"/> objects and checks whether the results are all equal to each other. If any of the passed objects are <see langword="null"/>, all others must also be <see langword="null"/>. In this case, <paramref name="transform"/> is never invoked.
            </summary>
            <typeparam name="T">The Type of the input objects.</typeparam>
            <typeparam name="TCompare">The Type of the results <paramref name="transform"/> yields.</typeparam>
            <param name="source">The first object to use for the comparison..</param>
            <param name="transform">The transform function to invoke on each object before performing the comparison.</param>
            <param name="other">The remaining objects to use for the comparison..</param>
            <returns><see langword="true"/> if all the results produced by <paramref name="transform"/> are all equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.IsNull``1(``0)">
            <summary>
            Checks whether a given input object is <see langword="null"/>. If not, it is marked to the compiler as non-<see langword="null"/> for the remainder of the scope.
            </summary>
            <typeparam name="T">The Type of the input object.</typeparam>
            <param name="source">The input object.</param>
            <returns><see langword="true"/> if <paramref name="source"/> is <see langword="null"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.CreateObservable``1(``0)">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Util.ObservableValue`1"/> from the given value by cloning <paramref name="value"/>. As such, <typeparamref name="T"/> must implement <see cref="T:System.ICloneable"/>.
            </summary>
            <typeparam name="T">The Type of the value to create an <see cref="T:LaquaiLib.Util.ObservableValue`1"/> from.</typeparam>
            <param name="value">The value to create an <see cref="T:LaquaiLib.Util.ObservableValue`1"/> from.</param>
            <returns>An <see cref="T:LaquaiLib.Util.ObservableValue`1"/> wrapping a copy of the given value.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.AsObservable``1(``0)">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Util.ObservableValue`1"/> as a wrapper around the given value.
            </summary>
            <typeparam name="T">The Type of the value to create an <see cref="T:LaquaiLib.Util.ObservableValue`1"/> from.</typeparam>
            <param name="value">The value to create an <see cref="T:LaquaiLib.Util.ObservableValue`1"/> from.</param>
            <returns>An <see cref="T:LaquaiLib.Util.ObservableValue`1"/> wrapping the given value.</returns>
            <remarks>
            If <typeparamref name="T"/> is a <see langword="struct"/>, this method behaves like <see cref="M:LaquaiLib.Extensions.AnyExtensions.CreateObservable``1(``0)"/>.
            If <typeparamref name="T"/> is a <see langword="class"/>, <paramref name="value"/> is referenced instead.
            </remarks>
        </member>
        <member name="T:LaquaiLib.Extensions.ArrayExtensions">
            <summary>
            Provides Extension Methods for <see cref="T:System.Array"/> Types.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.AsEnumerable``1(System.Array)">
            <summary>
            Uses the default order to transform the <see cref="T:System.Array"/> of <typeparamref name="T"/> to an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/>. This allows using Linq methods on multi-dimensional <see cref="T:System.Array"/>s.
            </summary>
            <typeparam name="T">The Type of the items in the array.</typeparam>
            <param name="source">The <see cref="T:System.Array"/> to transform.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the transformed elements from the input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.ArrayAny``1(``0[],System.Predicate{``0})">
            <summary>
            Determines if any element of the <see cref="T:System.Array"/> matches the given <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">They Type of the items in the array.</typeparam>
            <param name="source">The <see cref="T:System.Array"/> to check.</param>
            <param name="predicate">A <see cref="T:System.Predicate`1"/> that checks each element for a condition.</param>
            <returns><see langword="true"/> if any element matches the given <paramref name="predicate"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.ArrayContains``1(``0[],``0)">
            <summary>
            Determines if any element of the <see cref="T:System.Array"/> matches the given <paramref name="item"/>.
            </summary>
            <typeparam name="T">They Type of the items in the array.</typeparam>
            <param name="source">The <see cref="T:System.Array"/> to check.</param>
            <param name="item">The item to search for.</param>
            <returns><see langword="true"/> if any element matches the given <paramref name="item"/>, otherwise <see langword="false"/>.</returns>"
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.ArrayAll``1(``0[],System.Predicate{``0})">
            <summary>
            Determines if all elements of the <see cref="T:System.Array"/> match the given <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The Type of the items in the array.</typeparam>
            <param name="source">The <see cref="T:System.Array"/> to check.</param>
            <param name="predicate">A <see cref="T:System.Predicate`1"/> that checks each element for a condition.</param>
            <returns><see langword="true"/> if all elements match the given <paramref name="predicate"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.ArrayWhere``1(``0[],System.Predicate{``0})">
            <summary>
            Filters the elements of the <see cref="T:System.Array"/> based on a <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The Type of the items in the array.</typeparam>
            <param name="source">The <see cref="T:System.Array"/> to filter.</param>
            <param name="predicate">A <see cref="T:System.Predicate`1"/> that checks each element for a condition.</param>
            <returns>A new <see cref="T:System.Array"/> of <typeparamref name="T"/> that contains all elements of the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.ArraySelect``2(``0[],System.Func{``0,``1})">
            <summary>
            Projects each element of the <see cref="T:System.Array"/> into a new form.
            </summary>
            <typeparam name="TSource">The Type of the items in the array.</typeparam>
            <typeparam name="TResult">The Type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">The <see cref="T:System.Array"/> to transform.</param>
            <param name="selector">A <see cref="T:System.Func`2"/> that transforms each element from <typeparamref name="TSource"/> to <typeparamref name="TResult"/>.</param>
            <returns>A new <see cref="T:System.Array"/> of <typeparamref name="TResult"/> that contains the transformed elements from the input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.Split``1(``0[],``0[],``0[],System.Func{``0,System.Boolean})">
            <summary>
            Splits the specified <paramref name="array"/> into two new <see cref="T:System.Array"/>s based on the given <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The Type of the items in the array.</typeparam>
            <param name="array">The <see cref="T:System.Array"/> to split.</param>
            <param name="true">The <see cref="T:System.Array"/> that will contain all elements that match the given <paramref name="predicate"/>.</param>
            <param name="false">The <see cref="T:System.Array"/> that will contain all elements that do not match the given <paramref name="predicate"/>.</param>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> that checks each element for a condition.</param>
            <remarks>
            <paramref name="true"/> and <paramref name="false"/>'s lengths are not checked against <paramref name="array"/>'s length. If they are too small, an <see cref="T:System.IndexOutOfRangeException"/> will be thrown by the runtime.
            </remarks>
        </member>
        <member name="T:LaquaiLib.Extensions.AssemblyExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Reflection.Assembly"/> Type.
            </summary>
        </member>
        <member name="T:LaquaiLib.Extensions.ByteArrayExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Array"/> of <see cref="T:System.Char"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ByteArrayExtensions.ToHexString(System.Byte[])">
            <summary>
            Converts an array of <see cref="T:System.Byte"/>s to its equivalent string representation that is encoded with uppercase hex characters.
            </summary>
            <param name="bytes">The <see cref="T:System.Byte"/> array to convert.</param>
            <returns>The string as described.</returns>
            <remarks>This method uses the internal <see cref="M:System.Convert.ToHexString(System.Byte[])"/> method for the conversion, but its output is reversed appropriately to account for endianness differences.</remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.ByteArrayExtensions.ToHexString(System.ReadOnlySpan{System.Byte})">
            <summary>
            Converts a <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Byte"/> to its equivalent string representation that is encoded with uppercase hex characters.
            </summary>
            <param name="bytes">The <see cref="T:System.Byte"/> span to convert.</param>
            <returns>The string as described.</returns>
            <remarks>This method uses the internal <see cref="M:System.Convert.ToHexString(System.Byte[])"/> method for the conversion, but its output is reversed appropriately to account for endianness differences.</remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.ByteArrayExtensions.AsMemoryStream(System.Byte[])">
            <summary>
            Creates a (non-resizable!) <see cref="T:System.IO.MemoryStream"/> from the given <see cref="T:System.Byte"/> array.
            </summary>
            <param name="bytes">The <see cref="T:System.Byte"/> array to create the <see cref="T:System.IO.MemoryStream"/> from.</param>
            <returns>The created <see cref="T:System.IO.MemoryStream"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.ByteArrayExtensions.ToMemoryStream(System.Byte[])">
            <summary>
            Creates a <see cref="T:System.IO.MemoryStream"/> from the given <see cref="T:System.Byte"/> array. Its <see cref="P:System.IO.Stream.Position"/> upon return is set to the <see cref="P:System.Array.Length"/> of <paramref name="bytes"/>, i.e. it is not sought to the beginning.
            </summary>
            <param name="bytes">The <see cref="T:System.Byte"/> array to write into the new <see cref="T:System.IO.MemoryStream"/>.</param>
            <returns>The created <see cref="T:System.IO.MemoryStream"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.CaptureExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Text.RegularExpressions.Capture"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.CaptureExtensions.GetSource(System.Text.RegularExpressions.Capture)">
            <summary>
            Retrieves the original <see cref="T:System.String"/> that was matched by a <see cref="T:System.Text.RegularExpressions.Regex"/> instance to produce this <paramref name="capture"/>.
            </summary>
            <param name="capture">The <see cref="T:System.Text.RegularExpressions.Capture"/> instance to retrieve the original <see cref="T:System.String"/> from.</param>
            <returns>The original <see cref="T:System.String"/> that was matched by a <see cref="T:System.Text.RegularExpressions.Regex"/> instance to produce this <paramref name="capture"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.CharExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Char"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.CharExtensions.IsVowel(System.Char)">
            <summary>
            Determines if a specified <see cref="T:System.Char"/> is a vowel (including 'y').
            </summary>
            <param name="character">The <see cref="T:System.Char"/> to check.</param>
            <returns><see langword="true"/> if <paramref name="character"/> is a vowel, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.CharExtensions.IsConsonant(System.Char)">
            <summary>
            Determines if a specified <see cref="T:System.Char"/> is a consonant.
            </summary>
            <param name="character">The <see cref="T:System.Char"/> to check.</param>
            <returns><see langword="true"/> if <paramref name="character"/> is a consonant, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.ColorExtensions">
            <summary>
            Provides Extension Methods for the <see cref="T:System.Drawing.Color"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ColorExtensions.AsHtml(System.Drawing.Color)">
            <summary>
            Formats the <see cref="T:System.Drawing.Color"/> as a HTML color string.
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to format.</param>
            <returns>The HTML color string.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.ComparisonExtensions">
            <summary>
            Provides Extension Methods for the <see cref="T:System.Comparison`1"/> <see langword="delegate"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ComparisonExtensions.AsComparer``1(System.Comparison{``0})">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.IComparer`1"/> instance from the specified <see cref="T:System.Comparison`1"/> <see langword="delegate"/>.
            </summary>
            <typeparam name="T">The Type of the objects to compare.</typeparam>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> <see langword="delegate"/> to convert.</param>
            <returns>The <see cref="T:System.Collections.Generic.IComparer`1"/> instance.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.ConcurrentQueueExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ConcurrentQueueExtensions.Enqueue``1(System.Collections.Concurrent.ConcurrentQueue{``0},``0,``0[])">
            <summary>
            Adds items to the end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to add the items from <paramref name="items"/> to.</param>
            <param name="item">The first item to add to <paramref name="queue"/>.</param>
            <param name="items">Any more items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ConcurrentQueueExtensions.Enqueue``1(System.Collections.Concurrent.ConcurrentQueue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds items from a collection to the end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to add the items from the <paramref name="collection"/> to.</param>
            <param name="collection">A collection of items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ConcurrentQueueExtensions.Enqueue``1(LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue{``0},``0,``0[])">
            <summary>
            Adds items to the end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to add the items from <paramref name="items"/> to.</param>
            <param name="item">The first item to add to <paramref name="queue"/>.</param>
            <param name="items">Any more items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ConcurrentQueueExtensions.Enqueue``1(LaquaiLib.Collections.LimitedCollections.LimitedConcurrentQueue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds items from a collection to the end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to add the items from the <paramref name="collection"/> to.</param>
            <param name="collection">A collection of items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="T:LaquaiLib.Extensions.ConstructorInfoExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Reflection.ConstructorInfo"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ConstructorInfoExtensions.New(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Attempts to instantiate a new object of the type <paramref name="constructorInfo"/> belongs to, using the given <paramref name="parameters"/>.
            </summary>
            <param name="constructorInfo">The <see cref="T:System.Reflection.ConstructorInfo"/> that identifies a constructor of the type to instantiate.</param>
            <param name="parameters">The parameters to pass to the constructor. May be <see langword="null"/> if the constructor has no parameters.</param>
            <returns>An instance of the type <paramref name="constructorInfo"/> belongs to, or <see langword="null"/> if the constructor could not be invoked.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.ConstructorInfoExtensions.New``1(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Attempts to instantiate a new object of the type <paramref name="constructorInfo"/> belongs to, using the given <paramref name="parameters"/> and returns it cast to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to cast the new instance to.</typeparam>
            <param name="constructorInfo">The <see cref="T:System.Reflection.ConstructorInfo"/> that identifies a constructor of the type to instantiate.</param>
            <param name="parameters">The parameters to pass to the constructor. May be <see langword="null"/> if the constructor has no parameters. May be <see langword="null"/> if the constructor has no parameters.</param>
            <returns>An instance of <typeparamref name="T"/>, or <see langword="null"/> if the constructor could not be invoked.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.DelegateExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Delegate"/> Type.
            </summary>
        </member>
        <member name="T:LaquaiLib.Extensions.DictionaryExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.Dictionary`2"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.DictionaryExtensions.Invert``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Creates an inverted <see cref="T:System.Collections.Generic.Dictionary`2"/>, where the original keys are now the values and vice versa.
            </summary>
            <typeparam name="TKey">The Type of the keys of the original <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <typeparam name="TValue">The Type of the values of the original <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <param name="source">The original <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <returns>A new <see cref="T:System.Collections.Generic.Dictionary`2"/> where the keys are the values of the original <see cref="T:System.Collections.Generic.Dictionary`2"/> and vice versa.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.DictionaryExtensions.InvertContentAware``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Creates a content-aware inverse <see cref="T:System.Collections.Generic.Dictionary`2"/> where the original keys are now values grouped by the original values.
            </summary>
            <typeparam name="TKey">The Type of the keys of the original <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <typeparam name="TValue">The Type of the values of the original <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <param name="source">The original <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <returns>An inverted <see cref="T:System.Collections.Generic.Dictionary`2"/> as described.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.DictionaryExtensions.Clone``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Creates a shallow copy of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <typeparam name="TValue">They Type of the values of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to clone.</param>
            <returns>A shallow copy of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1,System.Func{``1,``1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.Dictionary`2"/> if the key does not already exist. Otherwise, a factory <see cref="T:System.Func`2"/> that produces a new value is invoked with the existing value.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <typeparam name="TValue">The Type of the values of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to add to or update.</param>
            <param name="key">The key of the element to add or update.</param>
            <param name="addValue">The value to be added for an absent key.</param>
            <param name="updateValueFactory">A factory <see cref="T:System.Func`2"/> that takes the existing value for a key and produces a new value.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1,System.Func{``1,``1,``1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.Dictionary`2"/> if the key does not already exist. Otherwise, a factory <see cref="T:System.Func`3"/> that produces a new value is invoked with the existing value and <paramref name="addValue"/>.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <typeparam name="TValue">The Type of the values of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to add to or update.</param>
            <param name="key">The key of the element to add or update.</param>
            <param name="addValue">The value to be added for an absent key.</param>
            <param name="updateValueFactory">A factory <see cref="T:System.Func`3"/> that takes the existing value for a key and <paramref name="addValue"/> itself and produces a new value. This avoids having to materialize the value twice.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1},System.Func{``1,``1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.Dictionary`2"/> where the value is produced by <paramref name="addValueFactory"/> if the key does not already exist. Otherwise, a factory <see cref="T:System.Func`2"/> that produces a new value is invoked with the existing value.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <typeparam name="TValue">The Type of the values of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to add to or update.</param>
            <param name="key">The key of the element to add or update.</param>
            <param name="addValueFactory">A <see cref="T:System.Func`1"/> that produces the value to be added for an absent key. It is only invoked if the key does not already exist in the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <param name="updateValueFactory">A factory <see cref="T:System.Func`3"/> that takes the existing value for a key and produces a new value.</param>
        </member>
        <member name="T:LaquaiLib.Extensions.DispatcherObjectExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Windows.Threading.DispatcherObject"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.DispatcherObjectExtensions.Dispatch(System.Windows.Threading.DispatcherObject,System.Action)">
            <summary>
            Invokes the specified <paramref name="action"/> on the thread the <paramref name="dispatcherObject"/> was created on.
            </summary>
            <param name="dispatcherObject">The <see cref="T:System.Windows.Threading.DispatcherObject"/> of which the <see cref="T:System.Windows.Threading.Dispatcher"/> is used to invoke the <paramref name="action"/>.</param>
            <param name="action">The <see cref="T:System.Action"/> to invoke.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.DispatcherObjectExtensions.Dispatch(System.Windows.Threading.DispatcherObject,System.Delegate,System.Object[])">
            <summary>
            Invokes the specified <paramref name="method"/> with the given <paramref name="arguments"/> on the thread the <paramref name="dispatcherObject"/> was created on.
            </summary>
            <param name="dispatcherObject">The <see cref="T:System.Windows.Threading.DispatcherObject"/> of which the <see cref="T:System.Windows.Threading.Dispatcher"/> is used to invoke the <paramref name="method"/>.</param>
            <param name="method">The <see cref="T:System.Delegate"/> to invoke.</param>
            <param name="arguments">The arguments to pass to the <paramref name="method"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.DispatcherObjectExtensions.Dispatch``1(System.Windows.Threading.DispatcherObject,System.Func{``0})">
            <summary>
            Invokes the specified <paramref name="func"/> on the thread the <paramref name="dispatcherObject"/> was created on.
            </summary>
            <typeparam name="T">The type of the result returned by the <paramref name="func"/>.</typeparam>
            <param name="dispatcherObject">The <see cref="T:System.Windows.Threading.DispatcherObject"/> of which the <see cref="T:System.Windows.Threading.Dispatcher"/> is used to invoke the <paramref name="func"/>.</param>
            <param name="func">The <see cref="T:System.Func`1"/> to invoke.</param>
            <returns>The result returned by the <paramref name="func"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.DispatcherObjectExtensions.DispatchAsync(System.Windows.Threading.DispatcherObject,System.Action)">
            <summary>
            Asynchronously invokes the specified <paramref name="action"/> on the thread the <paramref name="dispatcherObject"/> was created on.
            </summary>
            <param name="dispatcherObject">The <see cref="T:System.Windows.Threading.DispatcherObject"/> of which the <see cref="T:System.Windows.Threading.Dispatcher"/> is used to invoke the <paramref name="action"/>.</param>
            <param name="action">The <see cref="T:System.Action"/> to invoke.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.DispatcherObjectExtensions.DispatchAsync(System.Windows.Threading.DispatcherObject,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Asynchronously invokes the specified <paramref name="asyncDelegate"/> on the thread the <paramref name="dispatcherObject"/> was created on.
            </summary>
            <param name="dispatcherObject">The <see cref="T:System.Windows.Threading.DispatcherObject"/> of which the <see cref="T:System.Windows.Threading.Dispatcher"/> is used to invoke the <paramref name="asyncDelegate"/>.</param>
            <param name="asyncDelegate">The <see cref="T:System.Func`1"/> to invoke.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> returned by the <paramref name="asyncDelegate"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.DispatcherObjectExtensions.DispatchAsync``1(System.Windows.Threading.DispatcherObject,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Asynchronously invokes the specified <paramref name="asyncDelegate"/> on the thread the <paramref name="dispatcherObject"/> was created on.
            </summary>
            <typeparam name="T">The type of the result returned by the <paramref name="asyncDelegate"/>.</typeparam>
            <param name="dispatcherObject">The <see cref="T:System.Windows.Threading.DispatcherObject"/> of which the <see cref="T:System.Windows.Threading.Dispatcher"/> is used to invoke the <paramref name="asyncDelegate"/>.</param>
            <param name="asyncDelegate">The <see cref="T:System.Func`1"/> to invoke.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> returned by the <paramref name="asyncDelegate"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.EnumExtensions">
            <summary>
            Provides Extension Methods for <see cref="T:System.Enum"/> Types.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.EnumExtensions.GetDescription(System.Enum)">
            <summary>
            Returns the <see cref="P:System.ComponentModel.DescriptionAttribute.Description"/> for the given <see cref="T:System.Enum"/> value. If the value is not decorated with a <see cref="T:System.ComponentModel.DescriptionAttribute"/>, the default <see cref="T:System.String"/> representation of the value is returned.
            </summary>
            <param name="any">The <see cref="T:System.Enum"/> value to retrieve the description for.</param>
            <returns>The value of the <see cref="P:System.ComponentModel.DescriptionAttribute.Description"/> for the given <see cref="T:System.Enum"/> value or its default <see cref="T:System.String"/> representation.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.FieldInfoExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Reflection.FieldInfo"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.FieldInfoExtensions.GetValue``1(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Retrieves the value of the field represented by this <paramref name="fieldInfo"/> from the given <paramref name="obj"/>ect typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The Type to attempt to convert the retrieved value to.</typeparam>
            <param name="fieldInfo">The <see cref="T:System.Reflection.FieldInfo"/> instance representing the field to retrieve the value of.</param>
            <param name="obj">The <see cref="T:System.Object"/> instance to retrieve the value from. May be <see langword="null"/> if <paramref name="fieldInfo"/> represents a field that is static.</param>
            <returns>The value of the field represented by this <paramref name="fieldInfo"/> typed as <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.FieldInfoExtensions.GetValueOrDefault``1(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Attempts to retrieve the value of the field represented by this <paramref name="fieldInfo"/> from the given <paramref name="obj"/>ect typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The Type to attempt to convert the retrieved value to.</typeparam>
            <param name="fieldInfo">The <see cref="T:System.Reflection.FieldInfo"/> instance representing the field to retrieve the value of.</param>
            <param name="obj">The <see cref="T:System.Object"/> instance to retrieve the value from. May be <see langword="null"/> if <paramref name="fieldInfo"/> represents a field that is static.</param>
            <returns>The value of the field represented by this <paramref name="fieldInfo"/> typed as <typeparamref name="T"/> if the field exists and its could be cast to <typeparamref name="T"/>, otherwise <c>default</c>.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.HashAlgorithmExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Security.Cryptography.HashAlgorithm"/> and derived Types.
            </summary>
        </member>
        <member name="T:LaquaiLib.Extensions.HttpListenerRequestExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Net.HttpListenerRequest"/> Type.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LaquaiLib.Extensions.HttpListenerRequestExtensions.GetRoute(System.Net.HttpListenerRequest)" -->
        <member name="T:LaquaiLib.Extensions.ICollectionExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.ICollection`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ICollectionExtensions.KeepOnly``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            Replaces the contents of this <see cref="T:System.Collections.Generic.ICollection`1"/> with only the elements that match the given <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The Type of the elements in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/> to be modified.</param>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to keep.</param>
        </member>
        <member name="T:LaquaiLib.Extensions.IconExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Drawing.Icon"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IconExtensions.ToImageSource(System.Drawing.Icon)">
            <summary>
            Converts this <see cref="T:System.Drawing.Icon"/> instance to an <see cref="T:System.Windows.Media.ImageSource"/>.
            </summary>
            <param name="icon">The <see cref="T:System.Drawing.Icon"/> instance to convert.</param>
            <returns>The created <see cref="T:System.Windows.Media.ImageSource"/> instance.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.IDataObjectExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Windows.Forms.IDataObject"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IDataObjectExtensions.TryGetData(System.Windows.Forms.IDataObject,System.String,System.Object@)">
            <summary>
            Attempts to retrieve the data with the specified <paramref name="format"/> from this <see cref="T:System.Windows.Forms.IDataObject"/>.
            </summary>
            <param name="dataObject">The <see cref="T:System.Windows.Forms.IDataObject"/> to retrieve the data from.</param>
            <param name="format">The format of the data to retrieve.</param>
            <param name="data">A <c>ref <see cref="T:System.Object"/>?</c> variable that receives the data if the retrieval was successful.</param>
            <returns><see langword="true"/> if the retrieval was successful, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IDataObjectExtensions.TryGetData``1(System.Windows.Forms.IDataObject,System.String,``0@)">
            <summary>
            Attempts to retrieve the data with the specified <paramref name="format"/> from this <see cref="T:System.Windows.Forms.IDataObject"/>.
            </summary>
            <typeparam name="T">The actual type of which the data is expected to be.</typeparam>
            <param name="dataObject">The <see cref="T:System.Windows.Forms.IDataObject"/> to retrieve the data from.</param>
            <param name="format">The format of the data to retrieve.</param>
            <param name="data">A <c>ref <typeparamref name="T"/>?</c> variable that receives the data if the retrieval was successful.</param>
            <returns><see langword="true"/> if the retrieval was successful, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.IEnumerableBoolExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Boolean"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableBoolExtensions.All(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Determines whether all elements of a sequence of <see cref="T:System.Boolean"/> values are true.
            </summary>
            <param name="source">The sequence of <see cref="T:System.Boolean"/> values to check.</param>
            <returns>A value that indicates whether all elements of the sequence are true.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.IEnumerableByteExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Byte"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableByteExtensions.IntoStruct``1(System.Collections.Generic.IEnumerable{System.Byte},System.Boolean)">
            <summary>
            Using the specified <see cref="T:System.Byte"/> sequence, creates a new <typeparamref name="T"/> instance.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the <see langword="struct"/> to marshal the specified bytes into.</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Byte"/> to marshal into a new <typeparamref name="T"/> instance.</param>
            <param name="bigEndian">Whether the individual byte sequences the struct's fields are represented by are in big-endian order (which is the default for byte sequences returned from <see cref="T:System.BitConverter"/>).</param>
            <returns>The new <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the specified struct type is not declared in a manner compatible with marshalling, or the specified byte sequence is not of the correct length.</exception>
        </member>
        <member name="T:LaquaiLib.Extensions.IEnumerableExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Select``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Selects each element in the input sequence without transformation.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains each element in the input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.SelectMany``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Flattens a sequence of nested sequences of the same type <typeparamref name="T"/> into a single sequence without transformation.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="source">The sequence of nested sequences to flatten.</param>
            <returns>A sequence that contains all the elements of the nested sequences.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Shuffles the elements in the input sequence.
            </summary>
            <remarks>
            If the calling code already has an instance of <see cref="T:System.Random"/>, it should use the <see cref="M:LaquaiLib.Extensions.IEnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0},System.Random)"/> overload.
            </remarks>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <returns>A shuffled sequence of the elements in the input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Shuffles the elements in the input sequence, using a specified <see cref="T:System.Random"/> instance.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="random">The <see cref="T:System.Random"/> instance to use for shuffling.</param>
            <returns>A shuffled sequence of the elements in the input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified <paramref name="action"/> on each element of the source collection.
            </summary>
            <typeparam name="T">The Type of the elements in the collection.</typeparam>
            <param name="source">The source collection to iterate over.</param>
            <param name="action">The action to perform on each element of the source collection. It is passed each element in the source collection.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Performs the specified <paramref name="action"/> on each element of the source collection, incorporating each element's index in the <see cref="T:System.Action`2"/>.
            </summary>
            <typeparam name="T">The Type of the elements in the collection.</typeparam>
            <param name="source">The source collection to iterate over.</param>
            <param name="action">The action to perform on each element of the source collection. It is passed each element and its index in the source collection.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.GetRange``1(System.Collections.Generic.IEnumerable{``0},System.Range)">
            <summary>
            Extracts a range of elements from this collection.
            </summary>
            <typeparam name="T">The Type of the elements in the collection.</typeparam>
            <param name="source">The collection to extract elements from.</param>
            <param name="range">A <see cref="T:System.Range"/> instance that indicates where the items to be extracted are located in the <paramref name="source"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.AllEqual``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks whether the items in a sequence are all equal to each other. If any of the passed objects are <see langword="null"/>, all others must also be <see langword="null"/>.
            </summary>
            <typeparam name="T">The Type of the objects to compare.</typeparam>
            <param name="source">The collection that contains the items to compare. An exception is thrown if the collection is empty.</param>
            <returns><see langword="true"/> if all objects in the passed <paramref name="source"/> collection are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Produces the set difference of two sequences according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">The first sequence to compare.</param>
            <param name="other">The second sequence to compare.</param>
            <param name="keySelector">The <see cref="T:System.Func`2"/> that is passed each element of the source sequence and returns the key to use for comparison.</param>
            <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
            <remarks>Basically just another <see cref="M:System.Linq.Enumerable.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1})"/> overload that... actually makes sense.</remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ModeBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Determines the mode of a sequence of values from a given key extracted from each value; that is, the value that appears most frequently. If multiple items share the highest frequency, the first one encountered is returned.
            </summary>
            <typeparam name="TSource">The Type of the elements in <paramref name="source"/>.</typeparam>
            <typeparam name="TSelect">The Type of the elements <paramref name="selector"/> produces.</typeparam>
            <param name="source">The sequence of values to determine the mode of.</param>
            <param name="selector">A <see cref="T:System.Func`2"/> that is passed each element of <paramref name="source"/> and produces a value that is used to determine the mode of <paramref name="source"/>.</param>
            <returns>The mode of <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is empty.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Mode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines the mode of a sequence of values; that is, the value that appears most frequently. If multiple items share the highest frequency, the first one encountered is returned.
            </summary>
            <typeparam name="T">The Type of the elements in <paramref name="source"/>.</typeparam>
            <param name="source">The sequence of values to determine the mode of.</param>
            <returns>The mode of <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is empty.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Sample``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Samples a specified number of elements from the input sequence.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence to sample.</param>
            <param name="itemCount">The number of elements to sample from the input sequence. If not specified, 1% of the input sequence's length is used.</param>
            <returns>The sampled elements.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.OrderedSample``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Samples a specified number of elements from the input sequence, ensuring that the sampled elements remain in the same order as they were in the input sequence.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence to sample.</param>
            <param name="itemCount">The number of elements to sample from the input sequence. If not specified, 1% of the input sequence's length is used.</param>
            <returns>The sampled elements.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.SequenceEquivalent``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if two sequences are equivalent, meaning they contain the same elements, regardless of order.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence to reference.</param>
            <param name="other">The sequence to compare to.</param>
            <param name="comparer">An instance of an <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>-implementing Type that is used to compare the elements in the sequences. If not specified, the default comparer for <typeparamref name="T"/> is used.</param>
            <returns><see langword="true"/> if the sequences are equivalent, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.SelectWhere``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``0})">
            <summary>
            Conditionally projects elements from a sequence into a new form, transforming only items that satisfy a specified <paramref name="predicate"/> and returning all other items unchanged.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> that is passed each element of the input sequence and determines whether the element should be transformed.</param>
            <param name="selector">A <see cref="T:System.Func`2"/> that is passed each element of the input sequence, if it passes the condition encapsulated by <paramref name="predicate"/>, and produces a new value.</param>
            <returns>The transformed elements.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.SelectWhere``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean},System.Func{``0,System.Int32,``0})">
            <summary>
            Conditionally projects elements from a sequence into a new form, transforming only items that satisfy a specified <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> that is passed each element of the input sequence and its index in the <paramref name="source"/> collection and determines whether the element should be transformed.</param>
            <param name="selector">A <see cref="T:System.Func`2"/> that is passed each element of the input sequence and its index in the <paramref name="source"/> collection, if it passes the condition encapsulated by <paramref name="predicate"/>, and produces a new value.</param>
            <returns>The transformed elements.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.SelectOnlyWhere``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})">
            <summary>
            Conditionally projects elements from a sequence into a new form, transforming only items that satisfy a specified <paramref name="predicate"/>.
            </summary>
            <typeparam name="TSource">The Type of the elements in the input sequence.</typeparam>
            <typeparam name="TResult">The Type of the elements the <paramref name="selector"/> produces.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> that is passed each element of the input sequence and determines whether the element should be transformed.</param>
            <param name="selector">A <see cref="T:System.Func`2"/> that is passed each element of the input sequence, if it passes the condition encapsulated by <paramref name="predicate"/>, and produces a new value.</param>
            <returns>The transformed elements.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.SelectOnlyWhere``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean},System.Func{``0,System.Int32,``1})">
            <summary>
            Conditionally projects elements from a sequence into a new form, transforming only items that satisfy a specified <paramref name="predicate"/>.
            </summary>
            <typeparam name="TSource">The Type of the elements in the input sequence.</typeparam>
            <typeparam name="TResult">The Type of the elements the <paramref name="selector"/> produces.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> that is passed each element of the input sequence and its index in the <paramref name="source"/> collection and determines whether the element should be transformed.</param>
            <param name="selector">A <see cref="T:System.Func`2"/> that is passed each element of the input sequence and its index in the <paramref name="source"/> collection, if it passes the condition encapsulated by <paramref name="predicate"/>, and produces a new value.</param>
            <returns>The transformed elements.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Blitted``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Blits the elements in the input sequence into a sequence of bytes.
            <typeparamref name="T"/> must be an unmanaged Type.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <returns>All elements in the input sequence, blitted into a sequence of bytes and concatenated.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.WhereNot``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate. The predicate's result is inverted.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> that is passed each element of the input sequence and determines whether the element should be yielded.</param>
            <returns>The elements in the input sequence that do not satisfy the predicate.</returns>
            <remarks>
            This has essentially no purpose but to avoid the need to create a lambda that inverts the result of the predicate.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Split``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Splits a sequence of values into two sequences based on a predicate.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> that is passed each element of the input sequence and determines which sequence the element should be yielded to.</param>
            <returns>A <see cref="T:System.Tuple`2"/> containing the two sequences. The first collection contains all elements that satisfy the predicate, the second collection contains all remaining elements.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.IEnumerableIDisposableExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.IDisposable"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableIDisposableExtensions.Dispose(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Disposes all elements in this sequence of <see cref="T:System.IDisposable"/> objects.
            </summary>
            <param name="disposables">The sequence of <see cref="T:System.IDisposable"/> objects to dispose.</param>
            <remarks>
            If any of the <see cref="M:System.IDisposable.Dispose"/> calls throw an exception, the exceptions are collected and rethrown as an <see cref="T:System.AggregateException"/> after all <see cref="M:System.IDisposable.Dispose"/> calls have been made.
            </remarks>
        </member>
        <member name="T:LaquaiLib.Extensions.IEnumerableTaskExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Threading.Tasks.Task"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableTaskExtensions.Start(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Starts all the tasks in this collection of <see cref="T:System.Threading.Tasks.Task"/>s.
            </summary>
            <param name="tasks">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Threading.Tasks.Task"/> that contains the <see cref="T:System.Threading.Tasks.Task"/>s that are to be started.</param>
            <remarks>Note that this does not await any of the <see cref="T:System.Threading.Tasks.Task"/>s, they are merely started. The calling code is expected to await the availability of and process their results.</remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableTaskExtensions.StartAsync(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Starts all the tasks in this collection of <see cref="T:System.Threading.Tasks.Task"/>s and returns a <see cref="T:System.Threading.Tasks.Task"/> that represents their completion.
            </summary>
            <param name="tasks">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Threading.Tasks.Task"/> that contains the <see cref="T:System.Threading.Tasks.Task"/>s that are to be started.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when all of the <see cref="T:System.Threading.Tasks.Task"/>s in this collection have completed.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.IGroupingExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Linq.IGrouping`2"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IGroupingExtensions.ToListDictionary``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}})">
            <summary>
            Constructs a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Linq.IGrouping`2"/>. The keys of the dictionary are the <see cref="P:System.Linq.IGrouping`2.Key"/>s of the <see cref="T:System.Linq.IGrouping`2"/>s, and the values are the values of the <see cref="T:System.Linq.IGrouping`2"/>s as <see cref="T:System.Collections.Generic.List`1"/>s to allow for adding more values.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Linq.IGrouping`2"/>s.</typeparam>
            <typeparam name="TElement">The Type of the values of the <see cref="T:System.Linq.IGrouping`2"/>s.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Linq.IGrouping`2"/>s to construct the <see cref="T:System.Collections.Generic.Dictionary`2"/> from.</param>
            <returns>The constructed <see cref="T:System.Collections.Generic.Dictionary`2"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IGroupingExtensions.ToArrayDictionary``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}})">
            <summary>
            Constructs a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Linq.IGrouping`2"/>. The keys of the dictionary are the <see cref="P:System.Linq.IGrouping`2.Key"/>s of the <see cref="T:System.Linq.IGrouping`2"/>s, and the values are the values of the <see cref="T:System.Linq.IGrouping`2"/>s as <see cref="T:System.Array"/>s.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Linq.IGrouping`2"/>s.</typeparam>
            <typeparam name="TElement">The Type of the values of the <see cref="T:System.Linq.IGrouping`2"/>s.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Linq.IGrouping`2"/>s to construct the <see cref="T:System.Collections.Generic.Dictionary`2"/> from.</param>
            <returns>The constructed <see cref="T:System.Collections.Generic.Dictionary`2"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IGroupingExtensions.ToDictionary``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``2}})">
            <summary>
            Constructs a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Linq.IGrouping`2"/>. The keys of the dictionary are the <see cref="P:System.Linq.IGrouping`2.Key"/>s of the <see cref="T:System.Linq.IGrouping`2"/>s, and the values are the values of the <see cref="T:System.Linq.IGrouping`2"/>s as <typeparamref name="TCollection"/>s.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Linq.IGrouping`2"/>s.</typeparam>
            <typeparam name="TCollection">The Type of the collections that will be used to store the values of the <see cref="T:System.Linq.IGrouping`2"/>s.</typeparam>
            <typeparam name="TElement">The Type of the values of the <typeparamref name="TCollection"/>s.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Linq.IGrouping`2"/>s to construct the <see cref="T:System.Collections.Generic.Dictionary`2"/> from.</param>
            <returns>The constructed <see cref="T:System.Collections.Generic.Dictionary`2"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.LinkedListNodeExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.LinkedListNode`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.LinkedListNodeExtensions.DequeNext``1(System.Collections.Generic.LinkedListNode{``0})">
            <summary>
            Returns the next node in the <see cref="T:System.Collections.Generic.LinkedList`1"/> to which <paramref name="node"/> belongs, wrapping around to the first node if <paramref name="node"/> is the last node (that is, the <see cref="T:System.Collections.Generic.LinkedList`1"/> is treated like a "deque" data structure).
            </summary>
            <typeparam name="T">The type of the elements in the <see cref="T:System.Collections.Generic.LinkedList`1"/>.</typeparam>
            <param name="node">The node to get the next node of.</param>
            <returns>The next node as described, or whatever <see cref="P:System.Collections.Generic.LinkedListNode`1.Next"/> returns if <paramref name="node"/> is not the last node. This can be <see langword="null"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.LinkedListNodeExtensions.DequePrevious``1(System.Collections.Generic.LinkedListNode{``0})">
            <summary>
            Returns the previous node in the <see cref="T:System.Collections.Generic.LinkedList`1"/> to which <paramref name="node"/> belongs, wrapping around to the last node if <paramref name="node"/> is the first node (that is, the <see cref="T:System.Collections.Generic.LinkedList`1"/> is treated like a "deque" data structure).
            </summary>
            <typeparam name="T">The type of the elements in the <see cref="T:System.Collections.Generic.LinkedList`1"/>.</typeparam>
            <param name="node">The node to get the previous node of.</param>
            <returns>The previous node as described, or whatever <see cref="P:System.Collections.Generic.LinkedListNode`1.Previous"/> returns if <paramref name="node"/> is not the first node. This can be <see langword="null"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.LinkedListNodeExtensions.ToDeque``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
            Constructs a <see cref="T:LaquaiLib.Collections.Deque`1"/> from the specified <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
            <typeparam name="T">The type of the elements in the <see cref="T:System.Collections.Generic.LinkedList`1"/>.</typeparam>
            <param name="linkedList">The <see cref="T:System.Collections.Generic.LinkedList`1"/> to construct the <see cref="T:LaquaiLib.Collections.Deque`1"/> from.</param>
            <returns>The newly constructed <see cref="T:LaquaiLib.Collections.Deque`1"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.ListExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.List`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.Remove``1(System.Collections.Generic.List{``0},System.Index)">
            <summary>
            Removes the element at the specified <paramref name="index"/> from this <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T">The Type of the elements in the <see cref="T:System.Collections.Generic.List`1"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.List`1"/> to be modified.</param>
            <param name="index">An <see cref="T:System.Index"/> instance that indicates where the item to be removed is located in the <paramref name="list"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.RemoveRange``1(System.Collections.Generic.List{``0},System.Range)">
            <summary>
            Removes elements in a specified <paramref name="range"/> from this <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T">The Type of the elements in the <see cref="T:System.Collections.Generic.List`1"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.List`1"/> to be modified.</param>
            <param name="range">A <see cref="T:System.Range"/> instance that indicates where the items to be removed are located in the <paramref name="list"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.GetRange``1(System.Collections.Generic.List{``0},System.Range)">
            <summary>
            Extracts a range of elements from this <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T">The Type of the elements in the <see cref="T:System.Collections.Generic.List`1"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.List`1"/> to extract elements from.</param>
            <param name="range">A <see cref="T:System.Range"/> instance that indicates where the items to be extracted are located in the <paramref name="list"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.KeepOnly``1(System.Collections.Generic.List{``0},System.Predicate{``0})">
            <summary>
            Removes all elements from this <see cref="T:System.Collections.Generic.List`1"/> that match the conditions defined by the specified <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The Type of the elements in the <see cref="T:System.Collections.Generic.List`1"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.List`1"/> to be modified.</param>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to keep.</param>
        </member>
        <member name="T:LaquaiLib.Extensions.MatchExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Text.RegularExpressions.Match"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.MatchExtensions.GetRegex(System.Text.RegularExpressions.Match)">
            <summary>
            Retrieves the <see cref="T:System.Text.RegularExpressions.Regex"/> instance that was used to create this <see cref="T:System.Text.RegularExpressions.Match"/>.
            </summary>
            <param name="match">The <see cref="T:System.Text.RegularExpressions.Match"/> instance to retrieve the <see cref="T:System.Text.RegularExpressions.Regex"/> instance from.</param>
            <returns>The <see cref="T:System.Text.RegularExpressions.Regex"/> instance that was used to create this <see cref="T:System.Text.RegularExpressions.Match"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.MethodInfoExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Reflection.MethodInfo"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.IsGetterOrSetter(System.Reflection.MethodInfo)">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is a property getter or setter.
            </summary>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns>A value indicating whether the method is a property getter or setter.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.IsGetter(System.Reflection.MethodInfo)">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is a property getter.
            </summary>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns>A value indicating whether the method is a property getter.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.IsSetter(System.Reflection.MethodInfo)">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is a property setter.
            </summary>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns>A value indicating whether the method is a property setter.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.IsAdderOrRemover(System.Reflection.MethodInfo)">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is an event subscription adder or remover.
            </summary>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns>A value indicating whether the method is an event subscription adder or remover.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.IsAdder(System.Reflection.MethodInfo)">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is an event subscription adder.
            </summary>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns>A value indicating whether the method is an event subscription adder.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.IsRemover(System.Reflection.MethodInfo)">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is an event subscription remover.
            </summary>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns>A value indicating whether the method is an event subscription remover.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.IsAccessor(System.Reflection.MethodInfo)">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is an accessor (includes property getters/setters and event subscription adders/removers).
            </summary>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns>A value indicating whether the method is an accessor.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.ObjectExtensions">
            <summary>
            Provides Extension Methods for the <see cref="T:System.Object"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ObjectExtensions.Cast``1(System.Object)">
            <summary>
            Casts an <see cref="T:System.Object"/> to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to cast <paramref name="obj"/> to.</typeparam>
            <param name="obj">The <see cref="T:System.Object"/> to cast.</param>
            <returns>An instance of <typeparamref name="T"/> that has been produced by casting <paramref name="obj"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="obj"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.ObjectExtensions.As``1(System.Object)">
            <summary>
            Safely casts an <see cref="T:System.Object"/> to <typeparamref name="T"/> using <c>as</c>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to cast <paramref name="obj"/> to.</typeparam>
            <param name="obj">The <see cref="T:System.Object"/> to cast.</param>
            <returns>An instance of <typeparamref name="T"/> that has been produced by casting <paramref name="obj"/> or <see langword="null"/> if the cast failed.</returns>
            <remarks>Contrary to <see cref="M:LaquaiLib.Extensions.ObjectExtensions.Cast``1(System.Object)"/>, this method never throws an exception.</remarks>
        </member>
        <member name="T:LaquaiLib.Extensions.PartitionerExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Concurrent.Partitioner"/> type and derived types.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.PartitionerExtensions.ToList``1(System.Collections.Concurrent.Partitioner{``0},System.Int32)">
            <summary>
            Enumerates each partition of the <paramref name="partitioner"/> and returns a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Collections.Generic.List`1"/>s containing the elements of each partition.
            </summary>
            <typeparam name="T">The type of the elements in the <paramref name="partitioner"/>.</typeparam>
            <param name="partitioner">The <see cref="T:System.Collections.Concurrent.Partitioner`1"/> to enumerate.</param>
            <param name="partitions">The number of partitions to request.</param>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Collections.Generic.List`1"/>s containing the elements of each partition.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.ProcessExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Diagnostics.Process"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ProcessExtensions.GetCommandLine(System.Diagnostics.Process)">
            <summary>
            Retrieves the command line of the specified <see cref="T:System.Diagnostics.Process"/>.
            This is done either by using the <see cref="T:System.Diagnostics.ProcessStartInfo"/> property of the <see cref="T:System.Diagnostics.Process"/> instance or, if that is <see langword="null"/>, by using WMI.
            </summary>
            <param name="process">A <see cref="T:System.Diagnostics.Process"/> instance.</param>
            <returns>The command line of the specified <see cref="T:System.Diagnostics.Process"/> or <see langword="null"/> if it could not be retrieved.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.PropertyInfoExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Reflection.PropertyInfo"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.PropertyInfoExtensions.GetValue``1(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Retrieves the value of the property represented by this <paramref name="propertyInfo"/> from the given <paramref name="obj"/>ect typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The Type to attempt to convert the retrieved value to.</typeparam>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> instance representing the property to retrieve the value of.</param>
            <param name="obj">The <see cref="T:System.Object"/> instance to retrieve the value from. May be <see langword="null"/> if <paramref name="propertyInfo"/> represents a property that is static.</param>
            <returns>The value of the property represented by this <paramref name="propertyInfo"/> typed as <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.PropertyInfoExtensions.GetValueOrDefault``1(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Attempts to retrieve the value of the property represented by this <paramref name="propertyInfo"/> from the given <paramref name="obj"/>ect typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The Type to attempt to convert the retrieved value to.</typeparam>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> instance representing the property to retrieve the value of.</param>
            <param name="obj">The <see cref="T:System.Object"/> instance to retrieve the value from. May be <see langword="null"/> if <paramref name="propertyInfo"/> represents a property that is static.</param>
            <returns>The value of the property represented by this <paramref name="propertyInfo"/> typed as <typeparamref name="T"/> if the property exists and its could be cast to <typeparamref name="T"/>, otherwise <c>default</c>.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.QueueExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.Queue`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.QueueExtensions.Enqueue``1(System.Collections.Generic.Queue{``0},``0,``0[])">
            <summary>
            Adds items to the end of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> instance to add the items from <paramref name="items"/> to.</param>
            <param name="item">The first item to add to <paramref name="queue"/>.</param>
            <param name="items">Any more items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.QueueExtensions.Enqueue``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds items from a collection to the end of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> instance to add the items from the <paramref name="collection"/> to.</param>
            <param name="collection">A collection of items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.QueueExtensions.Enqueue``1(LaquaiLib.Collections.LimitedCollections.LimitedQueue{``0},``0,``0[])">
            <summary>
            Adds items to the end of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> instance to add the items from <paramref name="items"/> to.</param>
            <param name="item">The first item to add to <paramref name="queue"/>.</param>
            <param name="items">Any more items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.QueueExtensions.Enqueue``1(LaquaiLib.Collections.LimitedCollections.LimitedQueue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds items from a collection to the end of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> instance to add the items from the <paramref name="collection"/> to.</param>
            <param name="collection">A collection of items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="T:LaquaiLib.Extensions.ReflectionOptions">
            <summary>
            Represents a set of options for <see cref="M:LaquaiLib.Extensions.TypeExtensions.Reflect(System.Type,LaquaiLib.Extensions.ReflectionOptions)"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.ReflectionOptions.Namespace">
            <summary>
            The namespace into which the generated type(s) should be placed. If <see langword="null"/> or empty, the code is generated without a namespace declaration.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.ReflectionOptions.Inherit">
            <summary>
            Whether to make the generated type inherit from the <see cref="T:System.Type"/>.
            <para/>If <see langword="false"/>, a private field of the original type is generated and all method calls are initially redirected to that field.
            <para/>If <see langword="true"/>, the generated type inherits from <see cref="T:System.Type"/> and all method calls are initially redirected to <see langword="base"/>.
            <para/>If <see langword="null"/>, only a skeleton of the type is generated, with all methods throwing <see cref="T:System.NotImplementedException"/>s.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.ReflectionOptions.Inherited">
            <summary>
            Whether to generate code for all members <see cref="T:System.Type"/> inherits from its base types. This defaults to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.ReflectionOptions.Deep">
            <summary>
            Whether to generate code for all <see cref="T:System.Type"/>s that the original type has nested within it.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.ReflectionOptions.IgnoreInaccessible">
            <summary>
            Whether to ignore members which cannot be redirected to an instance of the original type (or to <see langword="base"/> when <see cref="P:LaquaiLib.Extensions.ReflectionOptions.Inherit"/> is <see langword="true"/>). Defaults to <see langword="true"/>.
            <para/>This is ignored when <see cref="P:LaquaiLib.Extensions.ReflectionOptions.Inherit"/> is <see langword="null"/>.
            </summary>
            <remarks>
            Setting this to <see langword="false"/> is helpful when you intend to supply custom implementations for inaccessible members, otherwise this will pollute your generated code with <see cref="T:System.NotImplementedException"/> (inside methods which potentially cannot be called from outside the generated type).
            </remarks>
        </member>
        <member name="P:LaquaiLib.Extensions.ReflectionOptions.Default">
            <summary>
            Returns a cached instance of <see cref="T:LaquaiLib.Extensions.ReflectionOptions"/> with the default behavior.
            </summary>
        </member>
        <member name="T:LaquaiLib.Extensions.SpanExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Span`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.SpanExtensions.AsReadOnly``1(System.Span{``0})">
            <summary>
            Returns  a <see cref="T:System.ReadOnlySpan`1"/> that represents a read-only view of the current <see cref="T:System.Span`1"/> instance.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="span"/>.</typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to wrap.</param>
            <returns>The <see cref="T:System.ReadOnlySpan`1"/> that acts as a read-only view of the current <see cref="T:System.Span`1"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.StreamExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.IO.Stream"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.ReadToEnd(System.IO.Stream)">
            <summary>
            Reads all bytes from the current position to the end of the <see cref="T:System.IO.Stream"/> and advances the position within it to the end.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <returns>The bytes of the rest of the <see cref="T:System.IO.Stream"/>, from its current position to the end.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.ReadToEnd(System.IO.Stream,System.Span{System.Byte})">
            <summary>
            Reads all bytes from the current position to the end of the <see cref="T:System.IO.Stream"/> into the specified <paramref name="span"/> and advances the position within it to the end.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="span">The <see cref="T:System.Span`1"/> of <see cref="T:System.Byte"/> to read into.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.ReadToEndAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Reads all bytes from the current position to the end of the <see cref="T:System.IO.Stream"/> asynchronously, optionally monitoring a <paramref name="cancellationToken"/> for cancellation requests, and advances the position within it to the end.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read operation and proxies for the read bytes.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.StringExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.String"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Repeat(System.String,System.Int32)">
            <summary>
            Constructs a new string from this string repeated <paramref name="count"/> times.
            </summary>
            <param name="source">The string to repeat.</param>
            <param name="count">The number of times to repeat <paramref name="source"/>.</param>
            <returns>A string consisting of <paramref name="source"/> repeated <paramref name="count"/> times.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Replace(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new string from this string with all occurrences of the strings in <paramref name="finds"/> replaced with <paramref name="replace"/>.
            </summary>
            <param name="source">The string to perform replacements in.</param>
            <param name="finds">A collection of strings to search for in <paramref name="source"/>.</param>
            <param name="replace">The replacement for occurrences of strings in <paramref name="finds"/>.</param>
            <returns>A string as described.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Match(System.String,System.String)">
            <summary>
            Searches the specified input string for occurrences of a specified regex pattern.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to search.</param>
            <param name="pattern">The pattern to search for.</param>
            <returns>The <see cref="T:System.Text.RegularExpressions.MatchCollection"/> instance returned by <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)"/></returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Match(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Searches the specified input string for occurrences of a specified regex pattern represented by a <see cref="T:System.Text.RegularExpressions.Regex"/> instance.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to search.</param>
            <param name="regex">The pattern to search for.</param>
            <returns>The <see cref="T:System.Text.RegularExpressions.MatchCollection"/> instance returned by <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)"/></returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.ReplaceExcept(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new string from this string with all occurrences of any string that is not contained in <paramref name="except"/> replaced with <paramref name="replace"/>.
            </summary>
            <param name="source">The string to perform replacements in.</param>
            <param name="except">A collection of strings to except from replacement in <paramref name="source"/>.</param>
            <param name="replace">The replacement for occurrences of strings that are not in <paramref name="except"/>.</param>
            <returns>A string as described.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.ToSentence(System.String)">
            <summary>
            Converts the specified input string to sentence case (that is, the first character is capitalized and all other characters are lower case).
            </summary>
            <param name="source">The <see cref="T:System.String"/> to convert.</param>
            <returns><paramref name="source"/> in sentence case.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.ToTitle(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified input string to title case according to the rules of the specified <paramref name="culture"/>.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for casing rules.</param>
            <returns><paramref name="source"/> in title case according to <paramref name="culture"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.ToTitleInvariant(System.String)">
            <summary>
            Converts the specified input string to title case according to the rules of the invariant culture.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to convert.</param>
            <returns><paramref name="source"/> in title case according to the invariant culture.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Remove(System.String,System.Char[])">
            <summary>
            Removes all occurrences of the specified <see cref="T:System.Char"/>s from this <see cref="T:System.String"/>.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to modify.</param>
            <param name="remove">The <see cref="T:System.Char"/>s to remove.</param>
            <returns>The original string with all occurrences of the <paramref name="remove"/> chars removed.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Remove(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Removes all occurrences of the specified <see cref="T:System.Char"/>s from this <see cref="T:System.String"/>.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to modify.</param>
            <param name="remove">The <see cref="T:System.Char"/>s to remove.</param>
            <returns>The original string with all occurrences of the <paramref name="remove"/> chars removed.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Remove(System.String,System.Int32,System.Char[])">
            <summary>
            Removes all occurrences of the specified <see cref="T:System.Char"/>s from this <see cref="T:System.String"/> starting at the specified index.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to modify.</param>
            <param name="startIndex">The zero-based index at which to begin removing <see cref="T:System.Char"/>s.</param>
            <param name="remove">The <see cref="T:System.Char"/>s to remove.</param>
            <returns>The original string with all occurrences of the <paramref name="remove"/> chars removed.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Remove(System.String,System.String[])">
            <summary>
            Removes all occurrences of the specified <see cref="T:System.String"/>s from this <see cref="T:System.String"/>.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to modify.</param>
            <param name="remove">The <see cref="T:System.String"/>s to remove.</param>
            <returns>The original string with all occurrences of the <paramref name="remove"/> chars removed.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Remove(System.String,System.Int32,System.String[])">
            <summary>
            Removes all occurrences of the specified <see cref="T:System.String"/>s from this <see cref="T:System.String"/> starting at the specified index.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to modify.</param>
            <param name="startIndex">The zero-based index at which to begin removing <see cref="T:System.String"/>s.</param>
            <param name="remove">The <see cref="T:System.String"/>s to remove.</param>
            <returns>The original string with all occurrences of the <paramref name="remove"/> chars removed.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOf(System.String,System.Char)">
            <summary>
            Reports the zero-based indices of all occurrences of the specified Unicode character in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="search">A Unicode character to seek.</param>
            <returns>All zero-based index positions of <paramref name="search"/> if that character is found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOf(System.String,System.Char,System.Int32)">
            <summary>
            Reports the zero-based indices of all occurrences of the specified Unicode character in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="search">A Unicode character to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>All zero-based index positions of <paramref name="search"/> if that character is found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOf(System.String,System.String)">
            <summary>
            Reports the zero-based indices of all occurrences of the specified string in this instance.
            </summary>
            <param name="source">The string to search.</param>
            <param name="search">The string to seek.</param>
            <returns>All zero-based index positions of <paramref name="search"/> if that string is found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOf(System.String,System.String,System.Int32)">
            <summary>
            Reports the zero-based indices of all occurrences of the specified string in this instance. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="search">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>All zero-based index positions of <paramref name="search"/> if that string is found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndexOfAny(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any string in a specified sequence of strings.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any string in <paramref name="searches"/> was found; -1 if no string in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndexOfAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any string in a specified sequence of strings. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any string in <paramref name="searches"/> was found; -1 if no string in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAny(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Reports the zero-based indices of the all occurrences in this instance of any Unicode character in a specified sequence of characters.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any character in <paramref name="searches"/> was found; an empty collection if no character in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAny(System.String,System.Collections.Generic.IEnumerable{System.Char},System.Int32)">
            <summary>
            Reports the zero-based indices of the all occurrences in this instance of any Unicode character in a specified sequence of characters. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any character in <paramref name="searches"/> was found; an empty collection if no character in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAny(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reports the zero-based indices of the all occurrences in this instance of any string in a specified sequence of strings.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any string in <paramref name="searches"/> was found; an empty collection if no string in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Reports the zero-based indices of the all occurrences in this instance of any string in a specified sequence of strings. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any string in <paramref name="searches"/> was found; an empty collection if no string in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfExcept(System.String,System.Char)">
            <summary>
            Reports the zero-based indices of all occurrences of Unicode characters other than the one specified in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="except">A Unicode character to except.</param>
            <returns>All zero-based index positions of any characters that are left, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfExcept(System.String,System.Char,System.Int32)">
            <summary>
            Reports the zero-based indices of all occurrences of Unicode characters other than the one specified in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="except">A Unicode character to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>All zero-based index positions of any characters that are left, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfExcept(System.String,System.String)">
            <summary>
            Reports the zero-based indices of all occurrences of Unicode characters other than the ones contained in <paramref name="except"/> in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="except">A string containing Unicode character to except.</param>
            <returns>All zero-based index positions of any characters that are left, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfExcept(System.String,System.String,System.Int32)">
            <summary>
            Reports the zero-based indices of all occurrences of Unicode characters other than the ones contained in <paramref name="except"/> in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="except">A string containing Unicode character to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>All zero-based index positions of any characters that are left, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndexOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Reports the zero-based index of the first occurrence of a character other than the ones specified in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any character other than the ones in <paramref name="excepts"/> was found, or -1 otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndexOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.Char},System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of a character other than the ones specified in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any character other than the ones in <paramref name="excepts"/> was found, or -1 otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndexOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reports the zero-based index of the first occurrence of a string (or single character) other than the ones specified in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of strings to except.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any string other than the ones in <paramref name="excepts"/> was found, or -1 otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndexOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of a string (or single character) other than the ones specified in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of strings to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any string other than the ones in <paramref name="excepts"/> was found, or -1 otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Reports the zero-based indices of the all occurrences of any Unicode character other than the ones specified in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any character not contained in <paramref name="excepts"/> was found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.Char},System.Int32)">
            <summary>
            Reports the zero-based indices of the all occurrences of any Unicode character other than the ones specified in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any character not contained in <paramref name="excepts"/> was found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reports the zero-based indices of the all occurrences of any string (or single character) other than the ones specified in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any string not contained in <paramref name="excepts"/> was found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Reports the zero-based indices of the all occurrences of any string (or single character) other than the ones specified in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any string not contained in <paramref name="excepts"/> was found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.ForEachLine(System.String,System.Func{System.String,System.String})">
            <summary>
            Applies a <paramref name="transform"/> function to each line of a string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="transform">The function used to transform each line of the input string.</param>
            <returns>The transformed string.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.ForEachLine(System.String,System.Func{System.String,System.Int32,System.String})">
            <summary>
            Applies a <paramref name="transform"/> function to each line of a string, incorporating each line's index in the function.
            </summary>
            <param name="source">The string to search.</param>
            <param name="transform">The function used to transform each line of the input string.</param>
            <returns>The transformed string.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.ForEachLine(System.String,System.Func{System.String,System.String},System.Func{System.String,System.Boolean})">
            <summary>
            Applies a <paramref name="transform"/> function to each line of a string that satisfies conditions defined by <paramref name="predicate"/>. Lines that do not satisfy this condition are copied without applying <paramref name="transform"/>.
            </summary>
            <param name="source">The string to search.</param>
            <param name="transform">The function used to transform each line of the input string.</param>
            <param name="predicate">The function used to determine which lines are transformed using <paramref name="transform"/>.</param>
            <returns></returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.ForEachLine(System.String,System.Func{System.String,System.Int32,System.String},System.Func{System.String,System.Int32,System.Boolean})">
            <summary>
            Applies a <paramref name="transform"/> function to each line of a string that satisfies conditions defined by <paramref name="predicate"/>, incorporating each line's index in the functions. Lines that do not satisfy this condition are copied without applying <paramref name="transform"/>.
            </summary>
            <param name="source">The string to search.</param>
            <param name="transform">The function used to transform each line of the input string.</param>
            <param name="predicate">The function used to determine which lines are transformed using <paramref name="transform"/>.</param>
            <returns></returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.GetSimilarity(System.String,System.String,System.StringComparer)">
            <summary>
            Computes a value that indicates the similarity between two strings. "Similarity" is defined as the number of characters that are the same in both strings, divided by the length of the longer string. As such, the value returned by this method is always between <c>0</c> (the strings are have no characters in common) and <c>1</c> (the strings are equal), inclusive.
            </summary>
            <param name="first">The first <see cref="T:System.String"/> to use for the comparison.</param>
            <param name="second">The second <see cref="T:System.String"/> to use for the comparison.</param>
            <param name="stringComparer">A <see cref="T:System.StringComparer"/> instance to use when comparing the <see cref="T:System.String"/>s. Defaults to <see cref="P:System.StringComparer.OrdinalIgnoreCase"/>.</param>
            <returns>The computed similarity as described.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.XNodeExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Xml.Linq.XNode"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.XNodeExtensions.SiblingNodes(System.Xml.Linq.XNode)">
            <summary>
            Returns a collection of the sibling nodes of this node, in document order.
            </summary>
            <param name="source">The <see cref="T:System.Xml.Linq.XNode"/> to get the siblings of.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Xml.Linq.XNode"/> containing the sibling nodes of this node, in document order.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.ThirdParty.HtmlAgilityPackExtensions.HtmlDocumentExtensions">
            <summary>
            Provides Extension Methods for the <see cref="T:HtmlAgilityPack.HtmlDocument"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ThirdParty.HtmlAgilityPackExtensions.HtmlDocumentExtensions.CreateElement(HtmlAgilityPack.HtmlDocument,System.String,System.Action{HtmlAgilityPack.HtmlNode})">
            <summary>
            Creates an <see cref="T:HtmlAgilityPack.HtmlNode"/> using this <see cref="T:HtmlAgilityPack.HtmlDocument"/>, the new node's <paramref name="name"/> and a <paramref name="config"/> <see cref="T:System.Action`1"/> that may configure it.
            </summary>
            <param name="htmlDoc">The <see cref="T:HtmlAgilityPack.HtmlDocument"/> to associate with the new node.</param>
            <param name="name">The element name of the new node.</param>
            <param name="config">An <see cref="T:System.Action`1"/> that may configure the new node.</param>
            <returns>A reference to the created node.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.ThirdParty.HtmlAgilityPackExtensions.HtmlNodeExtensions">
            <summary>
            Provides Extension Methods for the <see cref="T:HtmlAgilityPack.HtmlNode"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ThirdParty.HtmlAgilityPackExtensions.HtmlNodeExtensions.AppendChildren(HtmlAgilityPack.HtmlNode,HtmlAgilityPack.HtmlNode[])">
            <summary>
            Adds child nodes to the <see cref="T:HtmlAgilityPack.HtmlNode"/>.
            </summary>
            <param name="node">The <see cref="T:HtmlAgilityPack.HtmlNode"/>to add child nodes to.</param>
            <param name="children">The child nodes to add to the <paramref name="node"/>.</param>
        </member>
        <member name="T:LaquaiLib.Extensions.TypeExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Type"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.GetInterfaceImplementingTypes(System.Type)">
            <summary>
            Returns a collection of all types that implement the supplied interface.
            </summary>
            <param name="type">The interface type to get the implementing types for.</param>
            <returns>A collection of all types that implement the supplied interface.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="type"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="type"/>'s assembly cannot be resolved.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.GetInheritingTypes(System.Type,System.Boolean)">
            <summary>
            Returns a collection of all types that inherit from the supplied type.
            </summary>
            <param name="type">The type to get the options.Inheriting types for.</param>
            <param name="anyDepth">Whether to include all types that inherit from the supplied type, regardless of hierarchy depth.</param>
            <returns>A collection of all types that inherit from the supplied type.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="type"/>'s assembly cannot be resolved.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.GetNonAbstractInheritingTypes(System.Type)">
            <summary>
            Returns a collection of all types that inherit from the supplied type and are not abstract.
            </summary>
            <param name="type">The type to get the non-abstract options.Inheriting types for.</param>
            <returns>A collection of all types that inherit from the supplied type and are not abstract.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="type"/>'s assembly cannot be resolved.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.GetConstructableInheritingTypes(System.Type)">
            <summary>
            Returns a collection of all types that inherit from the supplied type and contain public constructors.
            </summary>
            <param name="type">The type to get the constructable options.Inheriting types for.</param>
            <returns>A collection of all types that inherit from the supplied type and contain public constructors.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="type"/>'s assembly cannot be resolved.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.New(System.Type,System.Object[])">
            <summary>
            Attempts to instantiate a new object of the supplied <paramref name="type"/> using the given <paramref name="parameters"/>.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance representing the type to instantiate.</param>
            <param name="parameters">The parameters to pass to the constructor. May be <see langword="null"/> to target the parameterless constructor.</param>
            <returns>An instance of the supplied <paramref name="type"/>, or <see langword="null"/> if a constructor matching the given <paramref name="parameters"/> could not be found or that constructor could not be invoked.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.GetDefault(System.Type)">
            <summary>
            Returns a (potentially boxed) instance of the default value for the supplied type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get the default value for.</param>
            <returns>The default value for the supplied type.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.GetInstanceValues(System.Type,System.Object,System.Boolean)">
            <summary>
            Compiles a <see cref="T:System.Collections.Generic.Dictionary`2"/> of all instance fields and properties of the supplied type from the given object, optionally calling all parameterless methods that do not return void.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> the <see cref="T:System.Reflection.FieldInfo"/>, <see cref="T:System.Reflection.PropertyInfo"/> and <see cref="T:System.Reflection.MethodInfo"/> instances are to be reflected from.</param>
            <param name="obj">The object to use to collect the values from.</param>
            <param name="callMethods">Whether to call all parameterless methods that do not return void instead of adding all method names to the output dictionary. This is a dangerous operation and should only be used if the methods are known to be safe and not have side effects.</param>
            <returns>The <see cref="T:System.Collections.Generic.Dictionary`2"/> as described.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.GetStaticValues(System.Type,System.Boolean)">
            <summary>
            Compiles a <see cref="T:System.Collections.Generic.Dictionary`2"/> of all static fields and properties of the supplied type, optionally calling all parameterless methods that do not return void.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> the <see cref="T:System.Reflection.FieldInfo"/>, <see cref="T:System.Reflection.PropertyInfo"/> and <see cref="T:System.Reflection.MethodInfo"/> instances are to be reflected from.</param>
            <param name="callMethods">Whether to call all parameterless methods that do not return void. This is a dangerous operation and should only be used if the methods are known to be safe and not have side effects.</param>
            <returns>The <see cref="T:System.Collections.Generic.Dictionary`2"/> as described.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.CanCastTo(System.Type,System.Type)">
            <summary>
            Determines whether an instance of this <see cref="T:System.Type"/> can be cast to the given <paramref name="other"/> <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the instance to be cast.</param>
            <param name="other">The <see cref="T:System.Type"/> to cast to.</param>
            <returns><see langword="true"/> if an instance of <paramref name="type"/> can be cast to <paramref name="other"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.CanCastFrom(System.Type,System.Type)">
            <summary>
            Determines whether an instance of the given <paramref name="type"/> can be cast to this <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to cast to.</param>
            <param name="other">The <see cref="T:System.Type"/> of the instance to be cast.</param>
            <returns><see langword="true"/> if an instance of <paramref name="other"/> can be cast to <paramref name="type"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.HasNarrowingConversion(System.Type,System.Type)">
            <summary>
            Determines if there exists a narrowing conversion from this <see cref="T:System.Type"/> to <paramref name="other"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check.</param>
            <param name="other">The <see cref="T:System.Type"/> to check against.</param>
            <returns><see langword="true"/> if there exists a narrowing conversion from this <see cref="T:System.Type"/> to <paramref name="other"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.HasConsistentWideningConversion(System.Type,System.Type)">
            <summary>
            Determines if there exists a consistent widening conversion (that is, a conversion that is guaranteed to not lose any information) from this <see cref="T:System.Type"/> to <paramref name="other"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check.</param>
            <param name="other">The <see cref="T:System.Type"/> to check against.</param>
            <returns><see langword="true"/> if there exists a consistent widening conversion from this <see cref="T:System.Type"/> to <paramref name="other"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.HasLossyWideningConversion(System.Type,System.Type)">
            <summary>
            Determines if there exists a lossy widening conversion (that is, a conversion that may lose information) from this <see cref="T:System.Type"/> to <paramref name="other"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check.</param>
            <param name="other">The <see cref="T:System.Type"/> to check against.</param>
            <returns><see langword="true"/> if there exists a lossy widening conversion from this <see cref="T:System.Type"/> to <paramref name="other"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.HasWideningConversion(System.Type,System.Type)">
            <summary>
            Determines if there exists a widening conversion from this <see cref="T:System.Type"/> to <paramref name="other"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check.</param>
            <param name="other">The <see cref="T:System.Type"/> to check against.</param>
            <returns><see langword="true"/> if there exists a widening conversion from this <see cref="T:System.Type"/> to <paramref name="other"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.Reflect(System.Type,LaquaiLib.Extensions.ReflectionOptions)">
            <summary>
            Reflects the entirety of this <see cref="T:System.Type"/> and generates .NET 8.0 code that can be used to replicate it.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to reflect.</param>
            <param name="namespace">The namespace to place the generated type(s) into. If <see langword="null"/> or empty, the code is generated without a namespace declaration.</param>
            <param name="options.Inheriting.Inheriting">Whether to make the generated type(s) inherit from the <paramref name="type"/>. If <see langword="false"/>, a private static field of type <paramref name="type"/> is generated and all method calls are redirected to that field. If <see langword="true"/>, the generated type(s) inherit from <paramref name="type"/> and all method calls are redirected to <see langword="base"/>. If <see langword="null"/>, only a skeleton of the type is generated, with all methods throwing <see cref="T:System.NotImplementedException"/>s.</param>
            <param name="inherited">Whether to generate code for all members <paramref name="type"/> inherits from its base types.</param>
            <param name="options.Deep.Deep">Whether to generate code for all <see cref="T:System.Type"/>s that are referenced by this <paramref name="type"/> in any way.</param>
            <returns>A <see cref="T:System.String"/> containing the generated code.</returns>
            <remarks>
            This method is not guaranteed to generate compilable code. It is intended to be used as a starting point for replicating existing types you may not have access to.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.FuncSignatureRegex">
            <remarks>
            Pattern:<br/>
            <code>&lt;.*?&gt;\\p{Ll}__(\\p{L}|\\p{Nd}|\\||_)+?_\\p{Nd}+?(?=\\(.*?\\))?</code><br/>
            Options:<br/>
            <code>RegexOptions.ExplicitCapture</code><br/>
            Explanation:<br/>
            <code>
            ○ Match '&lt;'.<br/>
            ○ Match a character other than '\n' lazily any number of times.<br/>
            ○ Match '&gt;'.<br/>
            ○ Match a character in the set [\p{Ll}].<br/>
            ○ Match the string "__".<br/>
            ○ Match a character in the set [_|\p{L}\d] lazily at least once.<br/>
            ○ Match '_'.<br/>
            ○ Match a Unicode digit lazily at least once.<br/>
            ○ Optional (greedy).<br/>
                ○ Zero-width positive lookahead.<br/>
                    ○ Match '('.<br/>
                    ○ Match a character other than '\n' lazily any number of times.<br/>
                    ○ Match ')'.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:LaquaiLib.Extensions.Unsafe.NintExtensions">
            <summary>
            Provides Extension Methods for the <see cref="T:System.IntPtr"/> and <see cref="T:System.UIntPtr"/> types, which implicitly includes pointers.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.Unsafe.NintExtensions.ToArray(System.IntPtr,System.Int32)">
            <summary>
            Constructs a <see cref="T:System.Byte"/> array from a region of memory starting at <paramref name="address"/> with the specified <paramref name="length"/>.
            </summary>
            <param name="address">The address of the first <see cref="T:System.Byte"/> to be included in the array.</param>
            <param name="length">The length of the array.</param>
            <returns>The constructed <see cref="T:System.Byte"/> array.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.Unsafe.NintExtensions.ToArray(System.IntPtr,System.Byte[])">
            <summary>
            Copies the contents of the memory region starting at <paramref name="address"/> to the specified <paramref name="arr"/>.
            </summary>
            <param name="address">The address of the first <see cref="T:System.Byte"/> to be copied.</param>
            <param name="arr">The <see cref="T:System.Byte"/> array to copy the memory region to. Its <see cref="P:System.Array.Length"/> dictates how many bytes will be copied.</param>
        </member>
        <member name="T:LaquaiLib.Extensions.XElementExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Xml.Linq.XElement"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.XElementExtensions.Siblings(System.Xml.Linq.XElement)">
            <summary>
            Returns a collection of the sibling elements of this node, in document order.
            </summary>
            <param name="source">The <see cref="T:System.Xml.Linq.XElement"/> to get the siblings of.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the sibling elements of this node, in document order.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.XElementExtensions.Siblings(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Returns a collection of the sibling elements of this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"/> are included in the collection.
            </summary>
            <param name="source">The <see cref="T:System.Xml.Linq.XElement"/> to get the siblings of.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> to match.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the sibling elements of this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"/> are included in the collection.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.TaskExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Threading.Tasks.Task"/> Type.
            </summary>
        </member>
        <member name="T:LaquaiLib.Interfaces.ICloneable`1">
            <summary>
            Implements a typed version of the <see cref="T:System.ICloneable"/> interface.
            </summary>
            <typeparam name="TSelf">The type of the implementing class.</typeparam>
        </member>
        <member name="M:LaquaiLib.Interfaces.ICloneable`1.Clone">
            <summary>
            Clones the current instance.
            </summary>
            <returns>A new instance of the current class with the same values as the original instance.</returns>
        </member>
        <member name="T:LaquaiLib.Miscellaneous">
            <summary>
            Contains miscellaneous functionality.
            </summary>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Range``1(``0,``0)">
            <summary>
            Compiles an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/>s from <c>0</c> to <paramref name="stop"/> with a step width of <paramref name="step"/>.
            </summary>
            <typeparam name="T">The type of the items in the created sqeuence.</typeparam>
            <param name="stop">The end of the range.</param>
            <param name="step">The step width of the range.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/> as described.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="step"/> evaluates to a value equivalent to <c>0</c>.</exception>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Range``1(``0)">
            <summary>
            Compiles an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/>s from <c>0</c> to <paramref name="stop"/> with a step width of <c>1</c>.
            </summary>
            <typeparam name="T">The type of the items in the created sqeuence.</typeparam>
            <param name="stop">The end of the range.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/> as described.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="step"/> evaluates to a value equivalent to <c>0</c>.</exception>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Range``1(``0,``0,``0)">
            <summary>
            Compiles an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/>s from <paramref name="start"/> to <paramref name="stop"/> with a step width of <paramref name="step"/>.
            </summary>
            <typeparam name="T">The type of the items in the created sqeuence.</typeparam>
            <param name="start">The inclusive start of the range.</param>
            <param name="stop">The exclusive end of the range.</param>
            <param name="step">The step width of the range.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/> as described.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="step"/> evaluates to a value equivalent to <c>0</c>.</exception>
        </member>
        <member name="T:LaquaiLib.RandomMath">
            <summary>
            Contains methods for various mathematical operations.
            </summary>
        </member>
        <member name="M:LaquaiLib.RandomMath.Sum(System.Double,System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Calculates the sum of a series of output values of a function.
            </summary>
            <param name="x">The first input value to the function.</param>
            <param name="n">The last input value to the function.</param>
            <param name="fn">The function that calculates the output values given the input values.</param>
            <returns>The sum of the values returned by <paramref name="fn"/> for each input value between <paramref name="x"/> and <paramref name="n"/>.</returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.Product(System.Double,System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Calculates the product of a series of output values of a function.
            </summary>
            <param name="x">The first input value to the function.</param>
            <param name="n">The last input value to the function.</param>
            <param name="fn">The function that calculates the output values given the input values.</param>
            <returns>The product of the values returned by <paramref name="fn"/> for each input value between <paramref name="x"/> and <paramref name="n"/>.</returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.GCD``1(System.Int32[])">
            <summary>
            Determines the greatest common divisor of a series of numbers.
            </summary>
            <param name="numbers">The numbers to determine the GCD of.</param>
            <returns>The GCD of the given <paramref name="numbers"/>.</returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.RoundToMultiple(System.Double,System.Double)">
            <summary>
            Rounds a <paramref name="number"/> to the nearest <paramref name="multiple"/> of a given number.
            </summary>
            <param name="number">The number to round.</param>
            <param name="multiple">The number a multiple of which <paramref name="number"/> is to be rounded to.</param>
            <returns><paramref name="number"/> rounded to a multiple of <paramref name="multiple"/>.</returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.InterpolateLinear(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Smooths two functions over a given interval using a smoothing function that is a linear combination of the two functions.
            </summary>
            <param name="f">The first function to use when constructing the output function.</param>
            <param name="g">The second function to use when constructing the output function.</param>
            <param name="smoothFunc">The custom smoothing function to use.</param>
            <param name="xStart">The start of the interval over which to smooth <paramref name="f"/> into <paramref name="g"/>.</param>
            <param name="xEnd">The end of the interval over which to smooth <paramref name="f"/> into <paramref name="g"/>.</param>
            <returns>A function that returns the result of <paramref name="f"/> when the input parameter is less than <paramref name="xStart"/>, the result of <paramref name="g"/> when the input parameter is greater than <paramref name="xEnd"/> and the result of <paramref name="smoothFunc"/> that combines the results of <paramref name="f"/> and <paramref name="g"/> otherwise.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="xStart"/> was greater than <paramref name="xEnd"/>.</exception>
        </member>
        <member name="M:LaquaiLib.RandomMath.InterpolateLinear(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Smooths two functions over a given interval by returning a new function that is a linear combination of the two functions within a that interval.
            </summary>
            <param name="f">The first function to use when constructing the output function.</param>
            <param name="g">The second function to use when constructing the output function.</param>
            <param name="xStart">The start of the interval over which to smooth <paramref name="f"/> into <paramref name="g"/>.</param>
            <param name="xEnd">The end of the interval over which to smooth <paramref name="f"/> into <paramref name="g"/>.</param>
            <returns>A function that returns the result of <paramref name="f"/> when the input parameter is less than <paramref name="xStart"/>, the result of <paramref name="g"/> when the input parameter is greater than <paramref name="xEnd"/> and the result of a smoothing function that combines the results of <paramref name="f"/> and <paramref name="g"/> otherwise.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:LaquaiLib.RandomMath.Trigonometry">
            <summary>
            Contains methods that use trigonometric functions.
            </summary>
        </member>
        <member name="M:LaquaiLib.RandomMath.Trigonometry.EllipseAround(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the <c>sin</c> and <c>cos</c> functions that, together, trace an ellipse with specified sine and cosine radii and a given smoothness around a point.
            </summary>
            <param name="x">The <c>x</c>-coordinate of the point to trace the ellipse around.</param>
            <param name="y">The <c>y</c>-coordinate of the point to trace the ellipse around.</param>
            <param name="rSin">The "horizontal" radius of the ellipse. If equal to <paramref name="rCos"/>, the ellipse is a circle. In that case, use <see cref="M:LaquaiLib.RandomMath.Trigonometry.EllipseAround(System.Double,System.Double,System.Double,System.Double)"/> instead.</param>
            <param name="rCos">The "vertical" radius of the ellipse. If equal to <paramref name="rSin"/>, the ellipse is a circle. In that case, use <see cref="M:LaquaiLib.RandomMath.Trigonometry.EllipseAround(System.Double,System.Double,System.Double,System.Double)"/> instead.</param>
            <param name="resolution">How many degrees / points constitute a full rotation around the circle.</param>
            <returns>A <see cref="T:System.Tuple`2"/> with the <c>Sin</c> and <c>Cos</c> functions that, together, trace an ellipse with the specified radii <paramref name="rSin"/> and <paramref name="rCos"/> and <paramref name="resolution"/> around the point <c>(<paramref name="x"/>, <paramref name="y"/>)</c>.</returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.Trigonometry.EllipseAround(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the <c>sin</c> and <c>cos</c> functions that, together, trace a circle with specified radius and a given smoothness around a point.
            </summary>
            <param name="x">The <c>x</c>-coordinate of the point to trace the circle around.</param>
            <param name="y">The <c>y</c>-coordinate of the point to trace the circle around.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="resolution">How many degrees / points constitute a full rotation around the circle.</param>
            <returns>A <see cref="T:System.Tuple`2"/> with the <c>Sin</c> and <c>Cos</c> functions that, together, trace an circle with the specified <paramref name="radius"/> and <paramref name="resolution"/> around the point <c>(<paramref name="x"/>, <paramref name="y"/>)</c>.</returns>
        </member>
        <member name="T:LaquaiLib.Streams.MemoryOrFileStream">
            <summary>
            Represents a <see cref="P:LaquaiLib.Streams.MemoryOrFileStream.Stream"/> that can be either a <see cref="T:System.IO.MemoryStream"/> or a <see cref="T:System.IO.FileStream"/>, depending on the size of the data expected to be written to it.
            </summary>
        </member>
        <member name="P:LaquaiLib.Streams.MemoryOrFileStream.Cutoff">
            <summary>
            The number of bytes at which the stream will switch from a <see cref="T:System.IO.MemoryStream"/> to a <see cref="T:System.IO.FileStream"/>.
            </summary>
            <remarks>
            You may freely change this value at runtime. Its initial value is 1/64th of the total physical memory of the system (e.g., if your system has 32 GB of total physical memory, this will initially have the value <c>32768 / 64 = 512 MB</c>). If an exception is thrown during retrieval of the total physical memory, the value will default to 64 MB.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Streams.MemoryOrFileStream.ResetCutoff">
            <summary>
            Resets the <see cref="P:LaquaiLib.Streams.MemoryOrFileStream.Cutoff"/> to the initial value. See the documentation of <see cref="P:LaquaiLib.Streams.MemoryOrFileStream.Cutoff"/> for more information.
            </summary>
            <returns>The new value of <see cref="P:LaquaiLib.Streams.MemoryOrFileStream.Cutoff"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Streams.MemoryOrFileStream.#cctor">
            <summary>
            Initializes the <see cref="T:LaquaiLib.Streams.MemoryOrFileStream"/> Type.
            </summary>
        </member>
        <member name="P:LaquaiLib.Streams.MemoryOrFileStream.Stream">
            <summary>
            The wrapped <see cref="P:LaquaiLib.Streams.MemoryOrFileStream.Stream"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Streams.MemoryOrFileStream.StreamType">
            <summary>
            The actual <see cref="T:System.Type"/> of the wrapped <see cref="P:LaquaiLib.Streams.MemoryOrFileStream.Stream"/>, either <see cref="T:System.IO.MemoryStream"/> or <see cref="T:System.IO.FileStream"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Streams.MemoryOrFileStream.#ctor(System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Streams.MemoryOrFileStream"/> with the given expected payload size.
            </summary>
            <param name="payloadSize">The expected size of the payload to be written to this stream. If it exceeds a set <see cref="P:LaquaiLib.Streams.MemoryOrFileStream.Cutoff"/>, the internal <see cref="P:LaquaiLib.Streams.MemoryOrFileStream.Stream"/> is created as a <see cref="T:System.IO.FileStream"/>.</param>
        </member>
        <member name="P:LaquaiLib.Streams.MemoryOrFileStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.MemoryOrFileStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.MemoryOrFileStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.MemoryOrFileStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.MemoryOrFileStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.MemoryOrFileStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.MemoryOrFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.MemoryOrFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.MemoryOrFileStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.MemoryOrFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.MemoryOrFileStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged and optionally the managed resources used by this <see cref="T:LaquaiLib.Streams.MemoryOrFileStream"/> instance.
            </summary>
            <param name="disposing">Whether to release the managed resources used by this <see cref="T:LaquaiLib.Streams.MemoryOrFileStream"/> instance.</param>
        </member>
        <member name="M:LaquaiLib.Streams.MemoryOrFileStream.Finalize">
            <summary>
            Finalizes this <see cref="T:LaquaiLib.Streams.MemoryOrFileStream"/> instance, releasing any unmanaged resources.
            </summary>
        </member>
        <member name="M:LaquaiLib.Streams.MemoryOrFileStream.Dispose">
            <summary>
            Releases the managed and unmanaged resources used by this <see cref="T:LaquaiLib.Streams.MemoryOrFileStream"/> instance.
            </summary>
        </member>
        <member name="T:LaquaiLib.Streams.MultiStream">
            <summary>
            Represents a wrapper for multiple <see cref="T:System.IO.Stream"/> instances to be written to as one.
            </summary>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.#ctor(System.IO.Stream[])">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Streams.MultiStream"/> with the given <see cref="T:System.IO.Stream"/>s.
            </summary>
            <param name="streams">A collection of <see cref="T:System.IO.Stream"/> instances that are to be written to simultaneously.</param>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.#ctor(System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Streams.MultiStream"/> with the given <see cref="T:System.IO.Stream"/>s.
            </summary>
            <param name="streams">A collection of <see cref="T:System.IO.Stream"/> instances that are to be written to simultaneously.</param>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.#ctor(System.Type,System.Int32,System.Object[])">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Streams.MultiStream"/> with the given number of <see cref="T:System.IO.Stream"/>s.
            </summary>
            <param name="streamType">The type of <see cref="T:System.IO.Stream"/>s to instantiate.</param>
            <param name="count">The number of <see cref="T:System.IO.Stream"/>s to instantiate.</param>
            <param name="constructorParameters">A collection of parameters to pass to the constructor of the given <paramref name="streamType"/>. If no constructor with the passed parameter types exists, instantiation is attempted with the parameterless constructor.</param>
            <exception cref="T:System.ArgumentException">Thrown if the supplied <paramref name="streamType"/> does not inherit from <see cref="T:System.IO.Stream"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.#ctor(System.Type,System.Int32,System.Func{System.Int32,System.Object[]})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Streams.MultiStream"/> with the given number of <see cref="T:System.IO.Stream"/>s.
            <example>
            For example, to create a <see cref="T:LaquaiLib.Streams.MultiStream"/> with 5 <see cref="T:System.IO.FileStream"/> instances that point to temporary files, use this constructor and something along the lines of:
            <code>
            using (var ms = new MultiStream(typeof(FileStream), 5, i =>
            {
                return new object[]
                {
                    Path.Combine(Path.GetTempPath(), $"multistream_test_{i}.txt"),
                    FileMode.Create
                };
            }))
            {
                // ...
            }
            </code>
            </example>
            </summary>
            <param name="streamType">The type of <see cref="T:System.IO.Stream"/>s to instantiate.</param>
            <param name="count">The number of <see cref="T:System.IO.Stream"/>s to instantiate.</param>
            <param name="constructorParameterFactory">A <see cref="T:System.Func`2"/> that takes an <see cref="T:System.Int32"/> and returns a collection of parameters to pass to the constructor of the given <paramref name="streamType"/>. If no constructor with the passed parameter types exists, instantiation is attempted with the parameterless constructor.</param>
            <exception cref="T:System.ArgumentException">Thrown if the supplied <paramref name="streamType"/> does not inherit from <see cref="T:System.IO.Stream"/>.</exception>
        </member>
        <member name="P:LaquaiLib.Streams.MultiStream.CanRead">
            <summary>
            A value that indicates whether all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance can be read from.
            </summary>
        </member>
        <member name="P:LaquaiLib.Streams.MultiStream.CanSeek">
            <summary>
            A value that indicates whether all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance can be seeked.
            </summary>
        </member>
        <member name="P:LaquaiLib.Streams.MultiStream.CanWrite">
            <summary>
            A value that indicates whether all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance can be written to.
            </summary>
        </member>
        <member name="P:LaquaiLib.Streams.MultiStream.Lengths">
            <summary>
            A collection of <see cref="T:System.Int64"/>s that indicate the lengths of the <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.
            </summary>
        </member>
        <member name="P:LaquaiLib.Streams.MultiStream.Positions">
            <summary>
            A collection of <see cref="T:System.Int64"/>s taht indicate the current positions of the <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.
            </summary>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.Flush">
            <summary>
            Flushes all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.
            </summary>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.
            </summary>
            <param name="offset">The offset to seek by.</param>
            <param name="origin">A <see cref="T:System.IO.SeekOrigin"/> value that indicates the reference point used to obtain the new position.</param>
            <returns>-1. Use <see cref="P:LaquaiLib.Streams.MultiStream.Positions"/> to obtain the new positions of the <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.</returns>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.SetLengths(System.Int64)">
            <summary>
            Sets a new length for all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.
            </summary>
            <param name="value">The new length for the <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.</param>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance and advances the current position within the <see cref="T:System.IO.Stream"/>s by the number of <see cref="T:System.Byte"/>s written.
            </summary>
            <param name="buffer">The buffer containing the data to write.</param>
            <param name="offset">The offset in the buffer at which to begin writing.</param>
            <param name="count">The number of <see cref="T:System.Byte"/>s to write.</param>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes a sequence of bytes to all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance and advances the current position within the <see cref="T:System.IO.Stream"/>s by the number of <see cref="T:System.Byte"/>s written.
            </summary>
            <param name="buffer">A region of memory to copy to all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.</param>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.Write(System.String,System.Text.Encoding)">
            <summary>
            Writes <paramref name="text"/> to all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance using the given <paramref name="encoding"/>.
            </summary>
            <param name="text">The text to write.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use to obtain the <see cref="T:System.Byte"/>s of the characters.</param>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.WriteLine(System.String,System.Text.Encoding)">
            <summary>
            Writes <paramref name="text"/>, followed by the current line terminator to all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance using the given <paramref name="encoding"/>.
            </summary>
            <param name="text">The text to write.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use to obtain the <see cref="T:System.Byte"/>s of the characters.</param>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Unconditionally throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.SetLength(System.Int64)">
            <summary>
            Unconditionally throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged and optionally the managed resources used by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.
            </summary>
            <param name="disposing">Whether to release the managed resources used by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.</param>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.Finalize">
            <summary>
            Finalizes this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance, releasing any unmanaged resources.
            </summary>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.Dispose">
            <summary>
            Releases the managed and unmanaged resources used by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.Condition">
            <summary>
            Represents a <see cref="T:System.Boolean"/> value that can be chained with other <see cref="T:LaquaiLib.Util.Condition"/>s.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.Condition.True">
            <summary>
            Returns a cached <see cref="T:LaquaiLib.Util.Condition"/> representing <see langword="true"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.Condition.False">
            <summary>
            Returns a cached <see cref="T:LaquaiLib.Util.Condition"/> representing <see langword="false"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.Condition.Value">
            <summary>
            The actual <see cref="T:System.Boolean"/> value this <see cref="T:LaquaiLib.Util.Condition"/> represents.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Condition.#ctor">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.Condition"/>. Its default state is representative of <see langword="false"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Condition.#ctor(System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.Condition"/> representing the given <paramref name="value"/>.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value this <see cref="T:LaquaiLib.Util.Condition"/> should represent.</param>
        </member>
        <member name="M:LaquaiLib.Util.Condition.op_Implicit(LaquaiLib.Util.Condition)~System.Boolean">
            <summary>
            Converts a <see cref="T:LaquaiLib.Util.Condition"/> to a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="condition">The <see cref="T:LaquaiLib.Util.Condition"/> to convert.</param>
        </member>
        <member name="M:LaquaiLib.Util.Condition.op_Implicit(System.Boolean)~LaquaiLib.Util.Condition">
            <summary>
            Converts a <see cref="T:System.Boolean"/> to a <see cref="T:LaquaiLib.Util.Condition"/>.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> to convert.</param>
        </member>
        <member name="M:LaquaiLib.Util.Condition.And(LaquaiLib.Util.Condition)">
            <summary>
            Chains the current <see cref="T:LaquaiLib.Util.Condition"/> with another <see cref="T:LaquaiLib.Util.Condition"/> using logical AND.
            </summary>
            <param name="condition">The <see cref="T:LaquaiLib.Util.Condition"/> to chain with.</param>
            <returns>A new <see cref="T:LaquaiLib.Util.Condition"/> representing the result of the logical AND.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Condition.And(LaquaiLib.Util.Condition[])">
            <summary>
            Chains the current <see cref="T:LaquaiLib.Util.Condition"/> with other <see cref="T:LaquaiLib.Util.Condition"/>s using logical AND.
            </summary>
            <param name="conditions">The <see cref="T:LaquaiLib.Util.Condition"/>s to chain with.</param>
            <returns>A new <see cref="T:LaquaiLib.Util.Condition"/> representing the result of the logical AND.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Condition.Or(LaquaiLib.Util.Condition)">
            <summary>
            Chains the current <see cref="T:LaquaiLib.Util.Condition"/> with another <see cref="T:LaquaiLib.Util.Condition"/> using logical OR.
            </summary>
            <param name="condition">The <see cref="T:LaquaiLib.Util.Condition"/> to chain with.</param>
            <returns>A new <see cref="T:LaquaiLib.Util.Condition"/> representing the result of the logical OR.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Condition.Or(LaquaiLib.Util.Condition[])">
            <summary>
            Chains the current <see cref="T:LaquaiLib.Util.Condition"/> with other <see cref="T:LaquaiLib.Util.Condition"/>s using logical OR.
            </summary>
            <param name="conditions">The <see cref="T:LaquaiLib.Util.Condition"/>s to chain with.</param>
            <returns>A new <see cref="T:LaquaiLib.Util.Condition"/> representing the result of the logical OR.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Condition.Not">
            <summary>
            Inverts the current <see cref="T:LaquaiLib.Util.Condition"/> using logical NOT.
            </summary>
            <returns>A new <see cref="T:LaquaiLib.Util.Condition"/> representing the result of the logical NOT.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Condition.Xor(LaquaiLib.Util.Condition[])">
            <summary>
            Chains the current <see cref="T:LaquaiLib.Util.Condition"/> with other <see cref="T:LaquaiLib.Util.Condition"/>s using logical XOR.
            </summary>
            <param name="conditions">The <see cref="T:LaquaiLib.Util.Condition"/>s to chain with.</param>
            <returns>A new <see cref="T:LaquaiLib.Util.Condition"/> representing the result of the logical XOR.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Condition.Is(LaquaiLib.Util.Condition)">
            <summary>
            Checks whether the current <see cref="T:LaquaiLib.Util.Condition"/> is equal to the given <paramref name="condition"/>.
            </summary>
            <param name="condition">The <see cref="T:LaquaiLib.Util.Condition"/> to check for equality.</param>
            <returns>A new <see cref="T:LaquaiLib.Util.Condition"/> representing the result of the equality check.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Condition.Are(LaquaiLib.Util.Condition[])">
            <summary>
            Checks whether the current <see cref="T:LaquaiLib.Util.Condition"/> is equal to all of the given <paramref name="conditions"/>.
            </summary>
            <param name="conditions">The <see cref="T:LaquaiLib.Util.Condition"/>s to check for equality.</param>
            <returns>A new <see cref="T:LaquaiLib.Util.Condition"/> representing the result of the equality check.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Condition.Any(LaquaiLib.Util.Condition[])">
            <summary>
            Checks whether the current <see cref="T:LaquaiLib.Util.Condition"/> is equal to any of the given <paramref name="conditions"/>.
            </summary>
            <param name="conditions">The <see cref="T:LaquaiLib.Util.Condition"/>s to check for equality.</param>
            <returns>A new <see cref="T:LaquaiLib.Util.Condition"/> representing the result of the equality check.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Condition.IsNot(LaquaiLib.Util.Condition)">
            <summary>
            Checks whether the current <see cref="T:LaquaiLib.Util.Condition"/> is not equal to the given <paramref name="condition"/>.
            </summary>
            <param name="condition">The <see cref="T:LaquaiLib.Util.Condition"/> to check for inequality.</param>
            <returns>A new <see cref="T:LaquaiLib.Util.Condition"/> representing the result of the inequality check.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Condition.AreNot(LaquaiLib.Util.Condition[])">
            <summary>
            Checks whether the current <see cref="T:LaquaiLib.Util.Condition"/> is not equal to all of the given <paramref name="conditions"/>.
            </summary>
            <param name="conditions">The <see cref="T:LaquaiLib.Util.Condition"/>s to check for inequality.</param>
            <returns>A new <see cref="T:LaquaiLib.Util.Condition"/> representing the result of the inequality check.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Condition.AnyNot(LaquaiLib.Util.Condition[])">
            <summary>
            Checks whether the current <see cref="T:LaquaiLib.Util.Condition"/> is not equal to any of the given <paramref name="conditions"/>.
            </summary>
            <param name="conditions">The <see cref="T:LaquaiLib.Util.Condition"/>s to check for inequality.</param>
            <returns>A new <see cref="T:LaquaiLib.Util.Condition"/> representing the result of the inequality check.</returns>
        </member>
        <member name="T:LaquaiLib.Util.ConsoleQueue">
            <summary>
            Represents a queue of console messages that is asynchronously emptied to the console.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ConsoleQueue.ForceEmptyBeforeShutdown">
            <summary>
            Controls whether the queue should be emptied before the application can shut down.
            This defaults to <see langword="false"/> and may be freely changed at any time.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ConsoleQueue.Enqueue(System.Object)">
            <summary>
            Enqueues a message to the queue.
            </summary>
            <param name="message">The message to enqueue.</param>
        </member>
        <member name="M:LaquaiLib.Util.ConsoleQueue.Enqueue(System.Object[])">
            <summary>
            Enqueues multiple messages to the queue.
            </summary>
            <param name="messages">The messages to enqueue.</param>
        </member>
        <member name="M:LaquaiLib.Util.ConsoleQueue.FlushAsync">
            <summary>
            Creates and returns a <see cref="T:System.Threading.Tasks.Task"/> that completes when the queue has been emptied.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ConsoleQueue.Flush">
            <summary>
            Blocks until the queue has been emptied.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ConsoleQueue.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the queue.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.CultureHelper">
            <summary>
            Provides helper methods for <see cref="T:System.Globalization.CultureInfo"/>, <see cref="T:System.TimeZoneInfo"/> and related types.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.CultureHelper.SimilarityThreshold">
            <summary>
            The similarity threshold for <see cref="T:System.Globalization.CultureInfo"/> names (used for <see cref="M:LaquaiLib.Util.CultureHelper.ResolveToCultureInfo(System.String)"/> and <see cref="M:LaquaiLib.Util.CultureHelper.ResolveToTimeZoneInfo(System.String)"/>). If the similarity of a <see cref="T:System.Globalization.CultureInfo"/> name to the given data is greater than or equal to this value, the <see cref="T:System.Globalization.CultureInfo"/> is considered a match.
            </summary>
            <remarks>
            The default value for this property is <c>0.7</c>.
            </remarks>
        </member>
        <member name="P:LaquaiLib.Util.CultureHelper.CultureInfoOverrides">
            <summary>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:System.Globalization.CultureInfo"/> mapping overrides. When a <see cref="T:System.Globalization.CultureInfo"/> is resolved using <see cref="M:LaquaiLib.Util.CultureHelper.ResolveToCultureInfo(System.String)"/>, before any other matching is done, the input to the method is checked against this <see cref="T:System.Collections.Generic.Dictionary`2"/>. If a match is found, the <see cref="T:System.Globalization.CultureInfo"/> from the <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> is returned.
            </summary>
            <remarks>
            Contrary to all other matching, this matching is case-sensitive. If an override is added for, for example, <c>"united states"</c> with a value of <c>"en-US"</c>, the inputs <c>"United states"</c>, <c>"united States"</c>, <c>"United States"</c> or <c>"UNITED STATES"</c> will not match the override.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Util.CultureHelper.ResolveToCultureInfo(System.String)">
            <summary>
            Resolves a <see cref="T:System.Globalization.CultureInfo"/> from data in a <see cref="T:System.String"/>. See the parameter documentation for more information.
            </summary>
            <param name="data">
            The data to analyze and resolve to a <see cref="T:System.Globalization.CultureInfo"/>. The following formats are supported:
            <list type="bullet">
            <item/>A standard <see cref="T:System.Globalization.CultureInfo"/> identifier in <c>languagecode2-country/regioncode2</c> format (<see cref="P:System.Globalization.CultureInfo.Name"/>), e.g. <c>en-US</c>.
            <item/>A standard (generic) <see cref="T:System.Globalization.CultureInfo"/> identifier in <c>languagecode2</c> format (<see cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName"/>), e.g. <c>en</c>.
            <item/>One of the following special values: <see langword="null"/>, <see cref="F:System.String.Empty"/>, whitespace-only, <c>Invariant</c> (which all resolve to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>), <c>Current</c> (which resolves to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>), <c>UI</c> (which resolves to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>).
            <item/>One of the generic culture identifiers that are returned by <see cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName"/>.
            <item/>One of the specific culture identifiers that are returned by <see cref="P:System.Globalization.CultureInfo.DisplayName"/>, <see cref="P:System.Globalization.CultureInfo.EnglishName"/>, <see cref="P:System.Globalization.CultureInfo.NativeName"/> or <see cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName"/>, or a partial match of one of these (however, exact matches are always higher priority and, as such, evaluated first).
            </list>
            </param>
            <returns>A <see cref="T:System.Globalization.CultureInfo"/> instance that matches the given data, or <see langword="null"/> if no match was found.</returns>
            <remarks>
            <list type="bullet">
            <item/>"Natural" preferences (such as the expectation that <c>United States</c> should return the <see cref="T:System.Globalization.CultureInfo"/> for <c>en-US</c> and not <c>chr-US</c>) cannot be taken into account. As such, you may use <see cref="P:LaquaiLib.Util.CultureHelper.CultureInfoOverrides"/> to manually cater to preferences within your application.
            </list>
            </remarks>
        </member>
        <member name="M:LaquaiLib.Util.CultureHelper.ResolveToTimeZoneInfo(System.String)">
            <summary>
            Resolves a <see cref="T:System.TimeZoneInfo"/> from data in a <see cref="T:System.String"/>. See the parameter documentation for more information.
            </summary>
            <param name="data">
            The data to analyze and resolve to a <see cref="T:System.TimeZoneInfo"/>. The following formats are supported:
            <list type="bullet">
            <item/>A <see cref="T:System.TimeZoneInfo"/>'s <see cref="P:System.TimeZoneInfo.Id"/>, <see cref="P:System.TimeZoneInfo.DisplayName"/>, <see cref="P:System.TimeZoneInfo.StandardName"/> or <see cref="P:System.TimeZoneInfo.DaylightName"/>, or a partial match of one of these (however, exact matches are always higher priority and, as such, evaluated first).
            <item/>One of the following special values: <see langword="null"/>, <see cref="F:System.String.Empty"/>, whitespace-only, <c>Utc</c> (which all resolve to <see cref="P:System.TimeZoneInfo.Utc"/>), <c>Current</c> or <c>Local</c> (which resolve to <see cref="P:System.TimeZoneInfo.Local"/>).
            </list>
            </param>
            <returns>A <see cref="T:System.TimeZoneInfo"/> instance that matches the given data, or <see langword="null"/> if no match was found.</returns>
        </member>
        <member name="M:LaquaiLib.Util.CultureHelper.GetSimilarityCleanerRegex">
            <remarks>
            Pattern:<br/>
            <code>[^a-zà-ÿ ]</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [^ A-Za-z\u00C0-\u00D6\u00D8-\u00DE\u00E0-\u00FF\u0130\u0178\u212A\u212B].<br/>
            </code>
            </remarks>
        </member>
        <member name="T:LaquaiLib.Util.Drives">
            <summary>
            Provides methods and events for working with drives.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.Drives.SyncRoot">
            <summary>
            The <see cref="T:System.Object"/> that is locked on when modifying collections in any of the "GetAll..." methods in <see cref="T:LaquaiLib.Util.Drives"/>. <b>Callers should lock on this when accessing these collections as well, otherwise, exceptions may be thrown during enumeration.</b>
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Drives.GetAllDrives(System.Collections.Generic.ICollection{System.IO.DriveInfo})">
            <summary>
            Replaces the contents of the given <paramref name="existing"/> <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.IO.DriveInfo"/> with <see cref="T:System.IO.DriveInfo"/> instances representing all drives on the system.
            </summary>
            <param name="existing">The <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.IO.DriveInfo"/> to place the <see cref="T:System.IO.DriveInfo"/>s into.</param>
            <remarks>For the entire duration of this method, a lock on <see cref="P:LaquaiLib.Util.Drives.SyncRoot"/> is held.</remarks>
        </member>
        <member name="M:LaquaiLib.Util.Drives.GetAllCdDrives(System.Collections.Generic.ICollection{System.IO.DriveInfo})">
            <summary>
            Replaces the contents of the given <paramref name="existing"/> <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.IO.DriveInfo"/> with <see cref="T:System.IO.DriveInfo"/> instances representing all CD-ROM drives on the system.
            </summary>
            <param name="existing">The <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.IO.DriveInfo"/> to place the CD-ROM drives' <see cref="T:System.IO.DriveInfo"/>s into.</param>
            <remarks>For the entire duration of this method, a lock on <see cref="P:LaquaiLib.Util.Drives.SyncRoot"/> is held.</remarks>
        </member>
        <member name="M:LaquaiLib.Util.Drives.GetAllRemovableDrives(System.Collections.Generic.ICollection{System.IO.DriveInfo})">
            <summary>
            Replaces the contents of the given <paramref name="existing"/> <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.IO.DriveInfo"/> with <see cref="T:System.IO.DriveInfo"/> instances representing all removable drives on the system.
            </summary>
            <param name="existing">The <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.IO.DriveInfo"/> to place the removable drives' <see cref="T:System.IO.DriveInfo"/>s into.</param>
            <remarks>For the entire duration of this method, a lock on <see cref="P:LaquaiLib.Util.Drives.SyncRoot"/> is held.</remarks>
        </member>
        <member name="E:LaquaiLib.Util.Drives.DriveConnected">
            <summary>
            Occurs when a drive is connected to the system.
            </summary>
        </member>
        <member name="E:LaquaiLib.Util.Drives.DriveDisconnected">
            <summary>
            Occurs when a drive is disconnected from the system.
            </summary>
        </member>
        <member name="E:LaquaiLib.Util.Drives.RemovableDriveConnected">
            <summary>
            Occurs when a removable drive (such as a USB drive) is connected to the system.
            </summary>
        </member>
        <member name="E:LaquaiLib.Util.Drives.RemovableDriveDisconnected">
            <summary>
            Occurs when a removable drive (such as a USB drive) is disconnected from the system.
            </summary>
        </member>
        <member name="E:LaquaiLib.Util.Drives.DiscInserted">
            <summary>
            Occurs when a disc is inserted into a drive.
            </summary>
        </member>
        <member name="E:LaquaiLib.Util.Drives.DiscEjected">
            <summary>
            Occurs when a disc is ejected from a drive.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Drives.Clear">
            <summary>
            Removes all entries in the invocation lists of the events defined in <see cref="T:LaquaiLib.Util.Drives"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Drives.Start">
            <summary>
            Starts raising the events defined in <see cref="T:LaquaiLib.Util.Drives"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Drives.Stop">
            <summary>
            Stops raising the events defined in <see cref="T:LaquaiLib.Util.Drives"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Drives.ConditionalRaiseEvents(System.Object)">
            <summary>
            Raises the events defined in <see cref="T:LaquaiLib.Util.Drives"/> if their conditions are met.
            </summary>
            <param name="state">Unused / ignored unconditionally.</param>
        </member>
        <member name="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamic`1">
            <summary>
            Represents a dynamic object that allows access to all properties and methods of the wrapped object as if they were <see langword="public"/>, regardless of their actual access level.
            <para/>Note that all dynamically retrieved members are also instances of <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamic`1"/> to allow for further dynamic access. The only value explicitly propagated to allow <c>?.</c> <see langword="null"/> propagation is <see langword="null"/>. This does <b>not</b> work directly on an object of type <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamic`1"/>, i.e. the following method invocation will always take place:
            <code language="csharp">
            MyClass? myInstance = null;
            var myFullAccessDynamic = FullAccessDynamic.Create(typeof(MyClass), myInstance);
            // This incovation will happen no matter if the underlying object myInstance is null or not
            myFullAccessDynamic?.MyMethod();
            // These ones will not, however, if MyProperty is null or MyNullReturningMethod returns null
            myFullAccessDynamic.MyProperty?.MyMethod();
            myFullAccessDynamic.MyNullReturningMethod()?.MyMethod();
            </code>
            <para/><b>Warning!</b> Nothing prevents the underlying object instance of <typeparamref name="T"/> from being <see langword="null"/>. As such, <see cref="M:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamic`1.Unwrap"/> may return <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the object to wrap.</typeparam>
        </member>
        <member name="M:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamic`1.Unwrap">
            <summary>
            Returns the underlying <typeparamref name="T"/> instance.
            </summary>
            <returns>The underlying <typeparamref name="T"/> instance.</returns>
        </member>
        <member name="M:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamic`1.GetFirstNonNull``1(System.Func{System.Reflection.BindingFlags,``0})">
            <summary>
            Executes a <see cref="T:System.Func`2"/> that is passed each <see cref="T:System.Reflection.BindingFlags"/> value in order of preference, and returns the result of the first non-null invocation.
            </summary>
            <param name="func">The function to execute.</param>
            <returns>The result of the first non-null invocation of <paramref name="func"/> or <see langword="null"/> if all invocations return <see langword="null"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamicFactory">
            <summary>
            Provides static factory methods for <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamic`1"/> instances.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamicFactory.Create``1">
            <summary>
            Creates a new instance of <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamic`1"/> that wraps a new instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object to wrap.</typeparam>
            <returns>A new instance of <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamic`1"/> that wraps a new instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamicFactory.Create``1(``0)">
            <summary>
            Creates a new instance of <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamic`1"/> that wraps the specified instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object to wrap.</typeparam>
            <param name="instance">The instance to wrap.</param>
            <returns>A new instance of <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamic`1"/> that wraps the specified instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamicFactory.Create(System.Type)">
            <summary>
            Creates a new instance of <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamic`1"/> that has the specified <paramref name="type"/> and wraps a new instance of that type.
            </summary>
            <param name="type">The type of the object to wrap.</param>
            <returns>A new instance of <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamic`1"/> that has the specified <paramref name="type"/> and wraps a new instance of that type.</returns>
        </member>
        <member name="M:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamicFactory.Create(System.Type,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamic`1"/> that has the specified <paramref name="type"/> and wraps the specified object <paramref name="instance"/>. This may be <see langword="null"/>.
            </summary>
            <param name="type">The type of the object to wrap.</param>
            <param name="instance">The instance to wrap.</param>
            <returns>A new instance of <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamic`1"/> that has the specified <paramref name="type"/> and wraps the specified object <paramref name="instance"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamicFactory.GetFullAccessDynamic``1(``0)">
            <summary>
            Creates a new instance of <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamic`1"/> that wraps the current object instance.
            </summary>
            <typeparam name="T">The type of the object to wrap.</typeparam>
            <param name="instance">The instance to wrap.</param>
            <returns>The created <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.FullAccessDynamic`1"/> instance.</returns>
        </member>
        <member name="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamic`1">
            <summary>
            Represents a dynamic object that allows access to all properties and methods of the wrapped object as if they were <see langword="public"/>, regardless of their actual access level. All binding failures and binding-related exceptions are swallowed and will result in <see langword="null"/> returns.
            <para/>Note that all dynamically retrieved members are also instances of <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamic`1"/> to allow for further dynamic access. The only value explicitly propagated to allow <c>?.</c> <see langword="null"/> propagation is <see langword="null"/>. This does <b>not</b> work directly on an object of type <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamic`1"/>, i.e. the following method invocation will always take place:
            <code language="csharp">
            MyClass? myInstance = null;
            var mySilentFullAccessDynamic = SilentFullAccessDynamic.Create(typeof(MyClass), myInstance);
            // This incovation will happen no matter if the underlying object myInstance is null or not
            mySilentFullAccessDynamic?.MyMethod();
            // These ones will not, however, if MyProperty is null or MyNullReturningMethod returns null
            mySilentFullAccessDynamic.MyProperty?.MyMethod();
            mySilentFullAccessDynamic.MyNullReturningMethod()?.MyMethod();
            </code>
            <para/><b>Warning!</b> Nothing prevents the underlying object instance of <typeparamref name="T"/> from being <see langword="null"/>. As such, <see cref="M:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamic`1.Unwrap"/> may return <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the object to wrap.</typeparam>
        </member>
        <member name="M:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamic`1.Unwrap">
            <summary>
            Returns the underlying <typeparamref name="T"/> instance.
            </summary>
            <returns>The underlying <typeparamref name="T"/> instance.</returns>
        </member>
        <member name="M:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamic`1.GetFirstNonNull``1(System.Func{System.Reflection.BindingFlags,``0})">
            <summary>
            Executes a <see cref="T:System.Func`2"/> that is passed each <see cref="T:System.Reflection.BindingFlags"/> value in order of preference, and returns the result of the first non-null invocation.
            </summary>
            <param name="func">The function to execute.</param>
            <returns>The result of the first non-null invocation of <paramref name="func"/> or <see langword="null"/> if all invocations return <see langword="null"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamicFactory">
            <summary>
            Provides static factory methods for <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamic`1"/> instances.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamicFactory.Create``1">
            <summary>
            Creates a new instance of <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamic`1"/> that wraps a new instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object to wrap.</typeparam>
            <returns>A new instance of <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamic`1"/> that wraps a new instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamicFactory.Create``1(``0)">
            <summary>
            Creates a new instance of <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamic`1"/> that wraps the specified instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object to wrap.</typeparam>
            <param name="instance">The instance to wrap.</param>
            <returns>A new instance of <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamic`1"/> that wraps the specified instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamicFactory.Create(System.Type)">
            <summary>
            Creates a new instance of <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamic`1"/> that has the specified <paramref name="type"/> and wraps a new instance of that type.
            </summary>
            <param name="type">The type of the object to wrap.</param>
            <returns>A new instance of <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamic`1"/> that has the specified <paramref name="type"/> and wraps a new instance of that type.</returns>
        </member>
        <member name="M:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamicFactory.Create(System.Type,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamic`1"/> that has the specified <paramref name="type"/> and wraps the specified object <paramref name="instance"/>. This may be <see langword="null"/>.
            </summary>
            <param name="type">The type of the object to wrap.</param>
            <param name="instance">The instance to wrap.</param>
            <returns>A new instance of <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamic`1"/> that has the specified <paramref name="type"/> and wraps the specified object <paramref name="instance"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamicFactory.GetSilentFullAccessDynamic``1(``0)">
            <summary>
            Creates a new instance of <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamic`1"/> that wraps the current object instance.
            </summary>
            <typeparam name="T">The type of the object to wrap.</typeparam>
            <param name="instance">The instance to wrap.</param>
            <returns>The created <see cref="T:LaquaiLib.Util.DynamicExtensions.FullAccessDynamic.SilentFullAccessDynamic`1"/> instance.</returns>
        </member>
        <member name="T:LaquaiLib.Util.ExceptionManagement.Assert">
            <summary>
            Contains methods to assert conditions which throw an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the condition is not met.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.That(System.Func{System.Boolean})">
            <summary>
            Asserts that a specified condition is <see langword="true"/>. If not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown.
            </summary>
            <param name="condition">The condition to assert to be <see langword="true"/>.</param>
            <returns>The result of the invocation of <paramref name="condition"/> if it is <see langword="true"/>, otherwise an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.That(System.Func{System.Boolean},System.String)">
            <summary>
            Asserts that a specified condition is <see langword="true"/>. If not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <param name="condition">The condition to assert to be <see langword="true"/>.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails.</param>
            <returns>The result of the invocation of <paramref name="condition"/> if it is <see langword="true"/>, otherwise an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsNull``1(``0,System.String)">
            <summary>
            Asserts that a specified value is <see langword="null"/>.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the value to operate on.</typeparam>
            <param name="value">The value to assert to be not <see langword="null"/>.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsNotNull``1(``0,System.String)">
            <summary>
            Asserts that a specified value is not <see langword="null"/>.
            If it is, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the value to operate on.</typeparam>
            <param name="value">The value to assert to be not <see langword="null"/>.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LaquaiLib.Util.ExceptionManagement.Assert.IsGreaterThan``1(``0,``0,System.String)" -->
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsGreaterThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that a specified value is greater than or equal to another value.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the values to operate on.</typeparam>
            <param name="value">The value to assert to be greater than or equal to <paramref name="other"/>.</param>
            <param name="other">The value to compare <paramref name="value"/> to.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsLessThan``1(``0,``0,System.String)">
            <summary>
            Asserts that a specified value is less than another value.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the values to operate on.</typeparam>
            <param name="value">The value to assert to be less than <paramref name="other"/>.</param>
            <param name="other">The value to compare <paramref name="value"/> to.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsLessThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that a specified value is less than or equal to another value.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the values to operate on.</typeparam>
            <param name="value">The value to assert to be less than or equal to <paramref name="other"/>.</param>
            <param name="other">The value to compare <paramref name="value"/> to.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that a specified value is equal to another value.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the values to operate on.</typeparam>
            <param name="value">The value to assert to be equal to <paramref name="other"/>.</param>
            <param name="other">The value to compare <paramref name="value"/> to.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsNotEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that a specified value is not equal to another value.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the values to operate on.</typeparam>
            <param name="value">The value to assert to be within the range of <paramref name="min"/> and <paramref name="max"/>.</param>
            <param name="other">The value to compare <paramref name="value"/> to.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsInRange``1(``0,``0,``0,System.String)">
            <summary>
            Asserts that a specified value is in a specified range.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the values to operate on.</typeparam>
            <param name="value">The value to assert to be greater than or equal to <paramref name="other"/>.</param>
            <param name="min">The inclusive lower bound of the range to compare <paramref name="value"/> to.</param>
            <param name="max">The inclusive upper bound of the range to compare <paramref name="value"/> to.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsNotInRange``1(``0,``0,``0,System.String)">
            <summary>
            Asserts that a specified value is not in a specified range.
            If it is, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the values to operate on.</typeparam>
            <param name="value">The value to assert to be outside the range of <paramref name="min"/> and <paramref name="max"/>.</param>
            <param name="min">The inclusive lower bound of the range to compare <paramref name="value"/> to.</param>
            <param name="max">The inclusive upper bound of the range to compare <paramref name="value"/> to.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsPositive``1(``0,System.String)">
            <summary>
            Asserts that a specified value is positive.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the value to operate on.</typeparam>
            <param name="value">The value to assert to be positive.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsNegative``1(``0,System.String)">
            <summary>
            Asserts that a specified value is negative.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the value to operate on.</typeparam>
            <param name="value">The value to assert to be negative.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsZero``1(``0,System.String)">
            <summary>
            Asserts that a specified value is zero.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the value to operate on.</typeparam>
            <param name="value">The value to assert to be zero.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsNonZero``1(``0,System.String)">
            <summary>
            Asserts that a specified value is not zero.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the value to operate on.</typeparam>
            <param name="value">The value to assert to be not equal to zero.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsDefault``1(``0,System.String)">
            <summary>
            Asserts that a specified value is the <see langword="default"/> for its type, i.e. precisely the result of the expression <c><see langword="default"/>(T)</c>.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the value to operate on.</typeparam>
            <param name="value">The value to assert to be positive.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsNotDefault``1(``0,System.String)">
            <summary>
            Asserts that a specified value is not the <see langword="default"/> for its type, i.e. precisely the result of the expression <c><see langword="default"/>(T)</c>.
            If it is, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the value to operate on.</typeparam>
            <param name="value">The value to assert to be positive.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1">
            <summary>
            The exception that is thrown when an assertion fails.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1.Message">
            <inheritdoc cref="P:System.Exception.Message"/>
        </member>
        <member name="P:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1.InnerException">
            <inheritdoc cref="P:System.Exception.InnerException"/>
        </member>
        <member name="P:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1.Value">
            <summary>
            The value that caused an assertion to fail.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.ExceptionManagement.FirstChanceException">
            <summary>
            The exception that is thrown when an unhandled exception is wrapped or otherwise handled in a <see cref="T:LaquaiLib.Util.ExceptionManagement.FirstChanceExceptionHandlers"/> method.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.ExceptionManagement.FirstChanceExceptionHandlers">
            <summary>
            Exposes <see cref="T:System.EventHandler`1"/> instances registerable for the <see cref="E:System.AppDomain.FirstChanceException"/> event.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.FirstChanceExceptionHandlers.RegisterAll">
            <summary>
            Registers all <see cref="T:System.EventHandler`1"/> instances in the <see cref="T:LaquaiLib.Util.ExceptionManagement.FirstChanceExceptionHandlers"/> class for the <see cref="E:System.AppDomain.FirstChanceException"/> event.
            </summary>
            <remarks>
            Be aware that this will pollute your call stack like all hell...
            </remarks>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.FirstChanceExceptionHandlers.WrapEntryPointNotFoundException(System.Object,System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs)">
            <summary>
            Wraps <see cref="T:System.EntryPointNotFoundException"/>s in a <see cref="T:LaquaiLib.Util.ExceptionManagement.FirstChanceException"/> with additional information about the DLL and entry point.
            <para/>Rethrows the original exception if no additional information could be gathered.
            </summary>
            <param name="sender">Ignored.</param>
            <param name="e">The <see cref="T:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs"/> instance containing the event data.</param>
            <exception cref="T:LaquaiLib.Util.ExceptionManagement.FirstChanceException">Thrown when an <see cref="T:System.EntryPointNotFoundException"/> is caught. Contains additional information about the DLL and entry point.</exception>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.FirstChanceExceptionHandlers.EntryPointNotFoundExceptionDataRegex">
            <remarks>
            Pattern:<br/>
            <code>Unable to find an entry point named '(?&lt;entryPoint&gt;[^']+)' in DLL '(?&lt;dllName&gt;[^']+)'\\.</code><br/>
            Options:<br/>
            <code>RegexOptions.ExplicitCapture</code><br/>
            Explanation:<br/>
            <code>
            ○ Match the string "Unable to find an entry point named '".<br/>
            ○ "entryPoint" capture group.<br/>
                ○ Match a character other than '\'' atomically at least once.<br/>
            ○ Match the string "' in DLL '".<br/>
            ○ "dllName" capture group.<br/>
                ○ Match a character other than '\'' atomically at least once.<br/>
            ○ Match the string "'.".<br/>
            </code>
            </remarks>
        </member>
        <member name="T:LaquaiLib.Util.ExceptionManagement.Try">
            <summary>
            Provides static methods that wrap <c>try-catch</c> blocks.
            </summary>
            <remarks>All methods in this class explicitly allow <see langword="null"/> returns.</remarks>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.ExecuteOrDefault``1(``0,System.Func{``0})">
            <summary>
            Attempts to execute the given parameterless <see cref="T:System.Func`1"/> and propagates its return value if it succeeds, otherwise returning <paramref name="defaultValue"/>.
            </summary>
            <typeparam name="T">The Type of the value returned by <paramref name="method"/>.</typeparam>
            <param name="defaultValue">The value to return if <paramref name="method"/> fails.</param>
            <param name="method">The <see cref="T:System.Func`1"/> to execute.</param>
            <returns>The value returned by <paramref name="method"/> if it succeeds, otherwise <typeparamref name="T"/>'s <c>default</c> value.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.ExecuteOrDefault``1(System.Func{``0},System.Func{``0})">
            <summary>
            Attempts to execute the given parameterless <see cref="T:System.Func`1"/> and propagates its return value if it succeeds, otherwise returning the value produced by <paramref name="defaultValueFactory"/>.
            </summary>
            <typeparam name="T">The Type of the value returned by <paramref name="method"/>.</typeparam>
            <param name="defaultValueFactory">The <see cref="T:System.Func`1"/> that returns the default value to propagate if <paramref name="method"/> throws an exception.</param>
            <param name="method">The <see cref="T:System.Func`1"/> to execute.</param>
            <returns>The value returned by <paramref name="method"/> if it succeeds, otherwise the value produced by <paramref name="defaultValueFactory"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.First``1(System.Collections.Generic.IEnumerable{System.Func{``0}})">
            <summary>
            Attempts to execute the given parameterless <see cref="T:System.Func`1"/>s and propagates its return value if it succeeds, otherwise throwing an <see cref="T:System.AggregateException"/> composed of all exceptions thrown by the <paramref name="methods"/>.
            </summary>
            <typeparam name="T">The Type of the value that is ultimately returned.</typeparam>
            <param name="methods">The methods to try.</param>
            <returns>The value of the first method that doesn't throw an exception.</returns>
            <exception cref="T:System.AggregateException">Thrown if all methods throw an exception.</exception>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.First``1(System.Func{``0}[])">
            <inheritdoc cref="M:LaquaiLib.Util.ExceptionManagement.Try.First``1(System.Collections.Generic.IEnumerable{System.Func{``0}})"/>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.First``1(System.Action{``0},``0[])">
            <inheritdoc cref="M:LaquaiLib.Util.ExceptionManagement.Try.First``1(System.Action{``0},System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.First``1(System.Action{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Tests each item in <paramref name="items"/> using <paramref name="test"/> and returns the first item which <paramref name="test"/> does not throw an exception for, otherwise throwing an <see cref="T:System.AggregateException"/> composed of all exceptions thrown by <paramref name="test"/>.
            </summary>
            <typeparam name="T">The Type of the items to test.</typeparam>
            <param name="test">The <see cref="T:System.Action`1"/> to test each item with.</param>
            <param name="items">The items to test.</param>
            <returns>The first item in <paramref name="items"/> that <paramref name="test"/> does not throw an exception for.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.FirstOrDefault``1(``0,System.Collections.Generic.IEnumerable{System.Func{``0}})">
            <summary>
            Attempts to execute the given parameterless <see cref="T:System.Func`1"/>s and propagates the return value of the first succeeds, otherwise returning <paramref name="defaultValue"/>.
            </summary>
            <typeparam name="T">The Type of the value that is ultimately returned.</typeparam>
            <param name="defaultValue">The default value to return if all methods throw an exception.</param>
            <param name="methods">The methods to try.</param>
            <returns>The first value returned by a method that doesn't throw an exception, or the default value if all methods throw an exception.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.FirstOrDefault``1(``0,System.Func{``0}[])">
            <inheritdoc cref="M:LaquaiLib.Util.ExceptionManagement.Try.FirstOrDefault``1(``0,System.Collections.Generic.IEnumerable{System.Func{``0}})"/>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.FirstOrDefault``1(System.Func{``0},System.Func{``0}[])">
            <inheritdoc cref="M:LaquaiLib.Util.ExceptionManagement.Try.FirstOrDefault``1(System.Func{``0},System.Collections.Generic.IEnumerable{System.Func{``0}})"/>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.FirstOrDefault``1(System.Func{``0},System.Collections.Generic.IEnumerable{System.Func{``0}})">
            <summary>
            Attempts to execute the given parameterless <see cref="T:System.Func`1"/>s and propagates the return value of the first one that succeeds, otherwise returning the value produced by <paramref name="defaultValueFactory"/>.
            </summary>
            <typeparam name="T">The Type of the value that is ultimately returned.</typeparam>
            <param name="defaultValueFactory">The <see cref="T:System.Func`1"/> that returns the default value to propagate if all <paramref name="methods"/> throw an exception. This is executed outside of the <c>try-catch</c> block and so is expected to always succeed.</param>
            <param name="methods">The methods to try.</param>
            <returns>The first value returned by a method that doesn't throw an exception, otherwise the value produced by <paramref name="defaultValueFactory"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.FirstOrDefault``1(``0,System.Action{``0},``0[])">
            <inheritdoc cref="M:LaquaiLib.Util.ExceptionManagement.Try.FirstOrDefault``1(``0,System.Action{``0},System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.FirstOrDefault``1(``0,System.Action{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Tests each item in <paramref name="items"/> using <paramref name="test"/> and returns the first item which <paramref name="test"/> does not throw an exception for, otherwise returning <paramref name="defaultValue"/>.
            </summary>
            <typeparam name="T">The Type of the items to test.</typeparam>
            <param name="defaultValue">The default value to return if all items throw an exception.</param>
            <param name="test">The <see cref="T:System.Action`1"/> to test each item with.</param>
            <param name="items">The items to test.</param>
            <returns>The first item in <paramref name="items"/> that <paramref name="test"/> does not throw an exception for, otherwise <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.FirstOrDefault``1(System.Func{``0},System.Action{``0},``0[])">
            <inheritdoc cref="M:LaquaiLib.Util.ExceptionManagement.Try.FirstOrDefault``1(System.Func{``0},System.Action{``0},System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.FirstOrDefault``1(System.Func{``0},System.Action{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Tests each item in <paramref name="items"/> using <paramref name="test"/> and returns the first item which <paramref name="test"/> does not throw an exception for, otherwise returning the value produced by <paramref name="defaultValueFactory"/>.
            </summary>
            <typeparam name="T">The Type of the items to test.</typeparam>
            <param name="defaultValueFactory">The <see cref="T:System.Func`1"/> that returns the default value to propagate if all <paramref name="items"/> cause an exception in <paramref name="test"/>. This is executed outside of the <c>try-catch</c> block and so is expected to always succeed.</param>
            <param name="test">The <see cref="T:System.Action`1"/> to test each item with.</param>
            <param name="items">The items to test.</param>
            <returns>The first item in <paramref name="items"/> that <paramref name="test"/> does not throw an exception for, otherwise returning the value produced by <paramref name="defaultValueFactory"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Util.ExtendedBackgroundWorker">
            <summary>
            Extends the base functionality of the <see cref="T:System.ComponentModel.BackgroundWorker"/> type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ExtendedBackgroundWorker.#ctor">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.ExtendedBackgroundWorker"/> that, by default, supports progress reporting and cancellation.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ExtendedBackgroundWorker.#ctor(System.Delegate)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.ExtendedBackgroundWorker"/> that, by default, supports progress reporting and cancellation and executes the work represented by the <paramref name="work"/> delegate when started.
            </summary>
            <param name="work">A <see cref="T:System.Delegate"/> that encapsulates a method that is executed when the <see cref="T:LaquaiLib.Util.ExtendedBackgroundWorker"/> is started. If explicitly convertible to <see cref="T:System.ComponentModel.DoWorkEventHandler"/>, it is cast and queued as work as such, otherwise dynamic invocation with no parameters is used.</param>
        </member>
        <member name="M:LaquaiLib.Util.ExtendedBackgroundWorker.#ctor(System.Delegate,System.Object[])">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.ExtendedBackgroundWorker"/> that, by default, supports progress reporting and cancellation and executes the work represented by the <paramref name="work"/> delegate when started, passing the specified <paramref name="args"/> as parameters.
            </summary>
            <param name="work">A <see cref="T:System.Delegate"/> that encapsulates a method that is executed when the <see cref="T:LaquaiLib.Util.ExtendedBackgroundWorker"/> is started. If explicitly convertible to <see cref="T:System.ComponentModel.DoWorkEventHandler"/>, it is cast and queued as work as such, otherwise dynamic invocation with the specified <paramref name="args"/> is used.</param>
            <param name="args">The arguments to pass to the <paramref name="work"/> delegate or <see langword="null"/> if the delegate does not take any arguments.</param>
            <remarks>This constructor forces wrapping of the passed <paramref name="work"/> delegate in a <see cref="T:System.ComponentModel.DoWorkEventHandler"/> delegate, even if it is already explicitly convertible to <see cref="T:System.ComponentModel.DoWorkEventHandler"/>. Use the <see cref="M:LaquaiLib.Util.ExtendedBackgroundWorker.#ctor(System.Delegate)"/> constructor to avoid this.</remarks>
        </member>
        <member name="M:LaquaiLib.Util.ExtendedBackgroundWorker.#ctor(System.Delegate[])">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.ExtendedBackgroundWorker"/> that, by default, supports progress reporting and cancellation and executes the work represented by the <paramref name="work"/> delegates when started.
            </summary>
            <param name="work">The <see cref="T:System.Delegate"/>s that encapsulate methods that are executed when the <see cref="T:LaquaiLib.Util.ExtendedBackgroundWorker"/> is started. Delegates explicitly convertible to <see cref="T:System.ComponentModel.DoWorkEventHandler"/> are cast and queued as work as such, otherwise dynamic invocation with no parameters is used.</param>
        </member>
        <member name="M:LaquaiLib.Util.ExtendedBackgroundWorker.#ctor(System.Collections.Generic.IEnumerable{System.Delegate},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.ExtendedBackgroundWorker"/> that, by default, supports progress reporting and cancellation and executes the work represented by the <paramref name="work"/> delegates when started.
            </summary>
            <param name="work">The <see cref="T:System.Delegate"/>s that encapsulate methods that are executed when the <see cref="T:LaquaiLib.Util.ExtendedBackgroundWorker"/> is started. Delegates explicitly convertible to <see cref="T:System.ComponentModel.DoWorkEventHandler"/> are cast and queued as work as such, otherwise dynamic invocation with no parameters is used.</param>
            <param name="args">The arguments to pass to the <paramref name="work"/> delegates or <see langword="null"/> if the delegates do not take any arguments.</param>
        </member>
        <member name="P:LaquaiLib.Util.ExtendedBackgroundWorker.Progress">
            <summary>
            The last reported progress of the <see cref="T:LaquaiLib.Util.ExtendedBackgroundWorker"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ExtendedBackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="E:LaquaiLib.Util.ExtendedBackgroundWorker.WorkerStarted">
            <summary>
            Occurs when the <see cref="T:LaquaiLib.Util.ExtendedBackgroundWorker"/> is started.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ExtendedBackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Util.FileSizePartitioner">
            <summary>
            Represents a <see cref="T:System.Collections.Concurrent.Partitioner`1"/> implementation that partitions files by their size.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.FileSizePartitioner.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.FileSizePartitioner"/> using the specified file paths.
            </summary>
            <param name="paths">The paths to the files to partition.</param>
        </member>
        <member name="M:LaquaiLib.Util.FileSizePartitioner.#ctor(System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.FileSizePartitioner"/> using the specified <see cref="T:System.IO.FileInfo"/> instances.
            </summary>
            <param name="fileInfos">The <see cref="T:System.IO.FileInfo"/> instances to partition.</param>
        </member>
        <member name="M:LaquaiLib.Util.FileSizePartitioner.GetPartitions(System.Int32)">
            <summary>
            Partitions the file set into at most <paramref name="partitionCount"/> partitions, accounting for the size of the files.
            The total size of the files in each partition is approximately equal, but the number of files in each partition may vary.
            </summary>
            <param name="partitionCount">The number of partitions to create.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Collections.Generic.IEnumerator`1"/> instances that represent the partitions.</returns>
        </member>
        <member name="P:LaquaiLib.Util.FileSizePartitioner.SupportsDynamicPartitions">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Util.FileSystemHelper">
            <summary>
            Provides methods and events for working with files and directories.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.FileSystemHelper.MigrateDirectory(System.String,System.String,System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <summary>
            In parallel, migrates the contents of a directory from one location to another.
            </summary>
            <param name="source">The directory to move.</param>
            <param name="to">The directory that becomes the new parent directory of <paramref name="source"/>.</param>
            <param name="allowExisting">Whether to allow the destination directory to already exist and contain files.</param>
            <param name="maxDegreeOfParallelism">The maximum number of concurrent operations to allow.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <remarks>
            This method uses <see cref="T:LaquaiLib.Util.FileSizePartitioner"/> to create partitions for parallel processing that accounts for the size of the files in the directories.
            </remarks>
        </member>
        <member name="T:LaquaiLib.Util.Hotkeys.FsModifiers">
            <summary>
            Identifies hotkey modifier keys.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Hotkeys.FsModifiers.Alt">
            <summary>
            Any Alt key.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Hotkeys.FsModifiers.Control">
            <summary>
            Any Control key.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Hotkeys.FsModifiers.Shift">
            <summary>
            Any Shift key.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.Hotkeys.Hotkey">
            <summary>
            Represents a hotkey registered by <see cref="T:LaquaiLib.Util.Hotkeys.Hotkeys"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.Hotkeys.Hotkey.Id">
            <summary>
            The ID this hotkey was registered to the system with.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.Hotkeys.Hotkey.Modifiers">
            <summary>
            The modifier keys for this hotkey.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.Hotkeys.Hotkey.Key">
            <summary>
            The key for this hotkey.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.Hotkeys.Hotkey.SyncDelegate">
            <summary>
            The action to perform when this hotkey is pressed.
            This property may be <see langword="null"/> and is as such mutually exclusive with <see cref="P:LaquaiLib.Util.Hotkeys.Hotkey.AsyncDelegate"/>, if the hotkey was created using such an asynchronous delegate.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.Hotkeys.Hotkey.AsyncDelegate">
            <summary>
            The action to perform when this hotkey is pressed.
            This property may be <see langword="null"/> and is as such mutually exclusive with <see cref="P:LaquaiLib.Util.Hotkeys.Hotkey.SyncDelegate"/>, if the hotkey was created using such a synchronous delegate.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.Hotkeys.Hotkeys">
            <summary>
            Contains static methods for managing system-wide (henceforth referred to simply as 'global') hotkeys.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.Hotkeys.Hotkeys.UsedHotkeySlots">
            <summary>
            Gets the number of used hotkey slots.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.Hotkeys.Hotkeys.FreeHotkeySlots">
            <summary>
            Gets the number of free hotkey slots.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.Hotkeys.Hotkeys.LPMSG.ModifierKeys">
            <summary>
            Retrieves the value of the low-order word of <see cref="F:LaquaiLib.Util.Hotkeys.Hotkeys.LPMSG.lParam"/>.
            This specifies the modifier keys associated with the pressed hotkey.
            </summary>
            <returns>The modifier keys associated with the pressed hotkey.</returns>
        </member>
        <member name="P:LaquaiLib.Util.Hotkeys.Hotkeys.LPMSG.VirtualKeyCode">
            <summary>
            Retrieves the value of the high-order word of <see cref="F:LaquaiLib.Util.Hotkeys.Hotkeys.LPMSG.lParam"/>.
            This specifies the virtual key code of the pressed hotkey.
            </summary>
            <returns>The virtual key code of the pressed hotkey.</returns>
        </member>
        <member name="P:LaquaiLib.Util.Hotkeys.Hotkeys.ProcessHotkeys">
            <summary>
            Controls whether hotkeys are processed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Hotkeys.Hotkeys.Start">
            <summary>
            Starts processing hotkeys.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Hotkeys.Hotkeys.Stop">
            <summary>
            Stops processing hotkeys.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Hotkeys.Hotkeys.RegisterHotkey(LaquaiLib.Util.Hotkeys.FsModifiers,System.Windows.Forms.Keys,System.Delegate,LaquaiLib.Util.Hotkeys.Hotkey@)">
            <summary>
            Registers a global hotkey and begins processing hotkeys if processing has not been explicitly stopped.
            </summary>
            <param name="fsModifiers">A <see cref="T:LaquaiLib.Util.Hotkeys.FsModifiers"/> value specifying the modifier keys to be associated with the hotkey.</param>
            <param name="vk">The virtual key code to be associated with the hotkey.</param>
            <param name="method">A <see cref="T:System.Delegate"/> representing the method to be invoked when the hotkey is pressed. Must be castable to either <see cref="T:System.Action"/> or a <see cref="T:System.Threading.Tasks.Task"/>-returning <see cref="T:System.Func`1"/>, otherwise an <see cref="T:System.ArgumentException"/> is thrown. Such an asynchronous <see langword="delegate"/> is <see langword="await"/>ed appropriately upon invocation.</param>
            <returns>The result of the registration attempt.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Hotkeys.Hotkeys.UnregisterHotkey(System.Int32,LaquaiLib.Util.Hotkeys.Hotkey)">
            <summary>
            Unregisters a global hotkey.
            </summary>
            <param name="id">The ID of the hotkey to be unregistered.</param>
            <param name="hotkey">The <see cref="T:LaquaiLib.Util.Hotkeys.Hotkey"/> to be unregistered. This should not be specified if consuming code stores its <see cref="T:LaquaiLib.Util.Hotkeys.Hotkey"/> instances by ID.</param>
            <returns>The result of the unregistration attempt.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Hotkeys.Hotkeys.UnregisterHotkey(LaquaiLib.Util.Hotkeys.Hotkey)">
            <summary>
            Unregisters a global hotkey.
            </summary>
            <param name="hotkey">The <see cref="T:LaquaiLib.Util.Hotkeys.Hotkey"/> to be unregistered.</param>
            <returns>The result of the unregistration attempt.</returns>
        </member>
        <member name="T:LaquaiLib.Util.LimitedConcurrencyTaskScheduler">
            <summary>
            Represents a <see cref="T:System.Threading.Tasks.TaskScheduler"/> implementation that limits the amount of <see cref="T:System.Threading.Tasks.Task"/>s that run concurrently at any given time.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.LimitedConcurrencyTaskScheduler.Default">
            <summary>
            Returns an instance of <see cref="T:LaquaiLib.Util.LimitedConcurrencyTaskScheduler"/> that is configured to allow a maximum of <see cref="P:System.Environment.ProcessorCount"/> <see cref="T:System.Threading.Tasks.Task"/>s to run concurrently.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.LimitedConcurrencyTaskScheduler.TaskFactory">
            <summary>
            Returns an instance of <see cref="P:LaquaiLib.Util.LimitedConcurrencyTaskScheduler.TaskFactory"/> that is configured to use <see cref="P:LaquaiLib.Util.LimitedConcurrencyTaskScheduler.Default"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.LimitedConcurrencyTaskScheduler.#ctor(System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.LimitedConcurrencyTaskScheduler"/> with the specified maximum degree of parallelism.
            </summary>
            <param name="maxDegreeOfParallelism">The maximum number of <see cref="T:System.Threading.Tasks.Task"/>s that are allowed to run concurrently.</param>
        </member>
        <member name="M:LaquaiLib.Util.LimitedConcurrencyTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.LimitedConcurrencyTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.LimitedConcurrencyTaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.LimitedConcurrencyTaskScheduler.GetScheduledTasks">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Util.LimitedConcurrencyTaskScheduler.MaximumConcurrencyLevel">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Util.Logging.AsyncLogger">
            <summary>
            Represents a logger that writes messages to the <see cref="T:System.Console"/> in a separate thread to avoid blocking operations on the main thread. This type self-initializes when it is first used, that is, when the first message is queued. Before that, the background thread is not running.
            </summary>
            <remarks>
            This type is thread-safe.
            </remarks>
        </member>
        <member name="P:LaquaiLib.Util.Logging.AsyncLogger.IsBackground">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:LaquaiLib.Util.Logging.AsyncLogger"/> should run in the background.
            If <see langword="true"/>, the <see cref="T:LaquaiLib.Util.Logging.AsyncLogger"/> will exit when the parent thread exits.
            By default, this is <see langword="true"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Logging.AsyncLogger.Initialize">
            <summary>
            Initializes the <see cref="T:LaquaiLib.Util.Logging.AsyncLogger"/>.
            It exits when the parent thread (the thread calling this method) exits.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Logging.AsyncLogger.Initialize(System.Threading.Thread)">
            <summary>
            Initializes the <see cref="T:LaquaiLib.Util.Logging.AsyncLogger"/> usnig the given <paramref name="thread"/> as its parent.
            </summary>
            <param name="thread">The thread to use as the parent thread. May be <see langword="null"/> to explicitly leave the <see cref="T:LaquaiLib.Util.Logging.AsyncLogger"/> running, even after all other threads have exited.</param>
        </member>
        <member name="M:LaquaiLib.Util.Logging.AsyncLogger.QueueMessage(System.String,LaquaiLib.Util.MessageType)">
            <summary>
            Creates and queues a new <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/> with the given <paramref name="message"/> and <paramref name="type"/>. Its <see cref="P:LaquaiLib.Util.Logging.LoggerMessage.Timestamp"/> is set to <see cref="P:System.DateTime.Now"/>.
            </summary>
            <param name="message">The text of the message.</param>
            <param name="type">The type of the message.</param>
        </member>
        <member name="M:LaquaiLib.Util.Logging.AsyncLogger.QueueMessage(System.String,System.DateTime,LaquaiLib.Util.MessageType)">
            <summary>
            Creates and queues a new <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/> with the given <paramref name="message"/>, <paramref name="timestamp"/> and <paramref name="type"/>.
            </summary>
            <param name="message">The text of the message.</param>
            <param name="timestamp">The timestamp of the message.</param>
            <param name="type">The type of the message.</param>
        </member>
        <member name="M:LaquaiLib.Util.Logging.AsyncLogger.QueueMessage(LaquaiLib.Util.Logging.LoggerMessage)">
            <summary>
            Queues the given <paramref name="message"/>.
            </summary>
            <param name="message">The <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/> to queue.</param>
        </member>
        <member name="T:LaquaiLib.Util.Logging.LoggerMessage">
            <summary>
            Represents an immutable message that can be queued for logging.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.Logging.LoggerMessage.Message">
            <summary>
            The text of the message.
            If explicitly <see langword="null"/>, an empty line is written (i.e. without the default formatting including a timestamp).
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.Logging.LoggerMessage.Timestamp">
            <summary>
            The timestamp of the message.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.Logging.LoggerMessage.Type">
            <summary>
            The type of the message.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Logging.LoggerMessage.#ctor(System.String)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/> with the given <paramref name="message"/>.
            The default <see cref="T:LaquaiLib.Util.MessageType"/> is <see cref="F:LaquaiLib.Util.MessageType.Info"/> and its <see cref="P:LaquaiLib.Util.Logging.LoggerMessage.Timestamp"/> is set to <see cref="P:System.DateTime.Now"/>.
            </summary>
            <param name="message">The text of the message.</param>
        </member>
        <member name="M:LaquaiLib.Util.Logging.LoggerMessage.#ctor(System.String,LaquaiLib.Util.MessageType)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/> with the given <paramref name="message"/> and <paramref name="type"/>.
            </summary>
            <param name="message">The text of the message.</param>
            <param name="type">The type of the message.</param>
        </member>
        <member name="M:LaquaiLib.Util.Logging.LoggerMessage.#ctor(System.String,System.DateTime,LaquaiLib.Util.MessageType)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/> with the given data.
            </summary>
            <param name="message">The text of the message.</param>
            <param name="timestamp">The timestamp of the message.</param>
            <param name="type">The type of the message.</param>
        </member>
        <member name="M:LaquaiLib.Util.Logging.LoggerMessage.Equals(LaquaiLib.Util.Logging.LoggerMessage)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.Logging.LoggerMessage.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.Logging.LoggerMessage.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.Logging.LoggerMessage.op_Equality(LaquaiLib.Util.Logging.LoggerMessage,LaquaiLib.Util.Logging.LoggerMessage)">
            <summary>
            Indicates whether two <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/>s are equal.
            </summary>
            <param name="left">The first <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/>.</param>
            <param name="right">The second <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/>.</param>
            <returns><see langword="true"/> if the two <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/>s are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Logging.LoggerMessage.op_Inequality(LaquaiLib.Util.Logging.LoggerMessage,LaquaiLib.Util.Logging.LoggerMessage)">
            <summary>
            Indicates whether two <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/>s are not equal.
            </summary>
            <param name="left">The first <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/>.</param>
            <param name="right">The second <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/>.</param>
            <returns><see langword="true"/> if the two <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/>s are not equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Util.MemoryManager">
            <summary>
            Provides methods and events for managing memory, working with the Garbage Collector (<see cref="T:System.GC"/>) and allocating unmanaged memory.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.MemoryManager.SetMemoryLimit(System.UInt64)">
            <summary>
            Sets a new memory limit for the application.
            </summary>
            <param name="limit">A 64-bit unsigned integer that represents the new memory limit in bytes.</param>
        </member>
        <member name="M:LaquaiLib.Util.MemoryManager.GetMemoryLimit">
            <summary>
            Gets the current memory limit for the application in bytes or <c>0</c> if no limit is set or the value could not be retrieved.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.MemoryManager.MAlloc(System.Int32,System.Boolean)">
            <summary>
            Allocates the specified number of bytes of unmanaged memory and returns a <see langword="void"/> pointer to the first byte.
            </summary>
            <param name="bytes">The number of bytes to allocate.</param>
            <param name="pressure">Whether to inform the GC about the allocated memory using <see cref="M:System.GC.AddMemoryPressure(System.Int64)"/>.</param>
            <returns>A <see langword="void"/> pointer to the first byte of the allocated memory.</returns>
        </member>
        <member name="M:LaquaiLib.Util.MemoryManager.CAlloc``1(System.Int32,System.Boolean)">
            <summary>
            Allocates a region of memory large enough to accommodate <paramref name="count"/> instances of type <typeparamref name="T"/> and returns a pointer to the first byte.
            </summary>
            <typeparam name="T">The <see langword="unmanaged"/> type of the instances to allocate memory for.</typeparam>
            <param name="count">The number of instances to allocate memory for.</param>
            <param name="pressure">Whether to inform the GC about the allocated memory using <see cref="M:System.GC.AddMemoryPressure(System.Int64)"/>.</param>
            <returns>A <typeparamref name="T"/>-typed pointer to the first byte of the allocated memory.</returns>
        </member>
        <member name="M:LaquaiLib.Util.MemoryManager.ReMAlloc(System.Void*,System.Int32,System.Int64)">
            <summary>
            Resizes a previously allocated region of memory to the specified number of bytes and returns a <see langword="void"/> pointer to the first byte.
            </summary>
            <param name="ptr">A pointer to the first byte of the previously allocated memory.</param>
            <param name="bytes">The new size of the memory region in bytes.</param>
            <param name="oldLength">The old length of the block of memory that is being resized. Depending on the new size, either <see cref="M:System.GC.AddMemoryPressure(System.Int64)"/> or <see cref="M:System.GC.RemoveMemoryPressure(System.Int64)"/> is called using this value. If omitted or <c>== 0</c>, no action is taken.</param>
            <returns>A <see langword="void"/> pointer to the first byte of the resized memory region.</returns>
        </member>
        <member name="M:LaquaiLib.Util.MemoryManager.ReCAlloc``1(``0*,System.Int32,System.Int64)">
            <summary>
            Resizes a previously allocated region of memory to the specified number of instances of type <typeparamref name="T"/> and returns a pointer to the first byte.
            </summary>
            <typeparam name="T">The <see langword="unmanaged"/> type of the instances to allocate memory for.</typeparam>
            <param name="ptr">A pointer to the first byte of the previously allocated memory.</param>
            <param name="count">The number of instances to allocate memory for.</param>
            <param name="oldCount">The number of instances the block of memory was previously assigned for. Depending on the new size, either <see cref="M:System.GC.AddMemoryPressure(System.Int64)"/> or <see cref="M:System.GC.RemoveMemoryPressure(System.Int64)"/> is called using this value. If omitted or <c>== 0</c>, no action is taken.</param>
            <returns>A <typeparamref name="T"/>-typed pointer to the first byte of the resized memory region.</returns>
        </member>
        <member name="M:LaquaiLib.Util.MemoryManager.Free(System.Void*,System.Int64)">
            <summary>
            Frees a previously allocated region of memory.
            </summary>
            <param name="ptr">A pointer to the first byte of the previously allocated memory.</param>
            <param name="pressure">The length of the block of memory that is being freed. If <c>&gt; 0</c>, <see cref="M:System.GC.RemoveMemoryPressure(System.Int64)"/> is called with this value.</param>
        </member>
        <member name="M:LaquaiLib.Util.MemoryManager.Next(System.Void*,System.Int32)">
            <summary>
            Returns a new <see langword="void"/> pointer that is offset from the specified pointer by the specified byte <paramref name="count"/>. That value may be negative.
            </summary>
            <param name="ptr">The pointer to offset.</param>
            <param name="count">The number of bytes to offset the pointer by.</param>
            <returns>A <see langword="void"/> pointer that is offset from <paramref name="ptr"/> by the specified <paramref name="count"/></returns>
        </member>
        <member name="M:LaquaiLib.Util.MemoryManager.Next``1(System.Void*,System.Int32)">
            <summary>
            Returns a new <see langword="void"/> pointer that is offset from the specified pointer by the size of <typeparamref name="T"/> <paramref name="count"/> times. That value may be negative.
            </summary>
            <typeparam name="T">The <see langword="unmanaged"/> type to obtain the size of to calculate the offset.</typeparam>
            <param name="ptr">The pointer to offset.</param>
            <param name="count">The number of times the size of <typeparamref name="T"/> is added to the pointer.</param>
            <returns>The <see langword="void"/> pointer that is offset from <paramref name="ptr"/> by the size of <typeparamref name="T"/> <paramref name="count"/> times.</returns>
        </member>
        <member name="T:LaquaiLib.Util.MessageType">
            <summary>
            Identifies the type of a <see cref="!:LoggerMessage"/>.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.MessageType.Info">
            <summary>
            Indicates that the <see cref="!:LoggerMessage"/> is informational.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.MessageType.Warning">
            <summary>
            Indicates that the <see cref="!:LoggerMessage"/> is a warning.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.MessageType.Error">
            <summary>
            Indicates that the <see cref="!:LoggerMessage"/> is an error.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.MessageType.Success">
            <summary>
            Indicates that the <see cref="!:LoggerMessage"/> is a success message.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.NaturalStringComparer">
            <summary>
            Represents a <see cref="T:System.Collections.Generic.IComparer`1"/> that compares strings using a natural sort order, that is, like Windows Explorer sorts file names.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.NaturalStringComparer.Instance">
            <summary>
            Gets the default instance of the <see cref="T:LaquaiLib.Util.NaturalStringComparer"/> class.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.NaturalStringComparer.Compare(System.String,System.String)">
            <summary>
            Compares two strings and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first string to compare.</param>
            <param name="y">The second string to compare.</param>
            <returns>A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Util.ObservableValue`1">
            <summary>
            Represents a value that can be observed for and notifies its observers about changes.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ObservableValue`1.Value">
            <summary>
            The current value.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ObservableValue`1.Comparer">
            <summary>
            The <see cref="T:System.Collections.Generic.IComparer`1"/> to use when comparing instances of this type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.#ctor">
            <summary>
            Instantiates an <see cref="T:LaquaiLib.Util.ObservableValue`1"/> of type <typeparamref name="T"/> and sets the value to the default for this type. At instantiation, no <see cref="E:LaquaiLib.Util.ObservableValue`1.PropertyChanged"/> event is raised.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.#ctor(`0)">
            <summary>
            Instantiates an <see cref="T:LaquaiLib.Util.ObservableValue`1"/> of type <typeparamref name="T"/> with the given initial <paramref name="value"/>. At instantiation, no <see cref="E:LaquaiLib.Util.ObservableValue`1.PropertyChanged"/> event is raised.
            </summary>
            <param name="value">The initial value.</param>
        </member>
        <member name="E:LaquaiLib.Util.ObservableValue`1.ValueChanged">
            <summary>
            Occurs when the value changes.
            </summary>
            <remarks>
            Use this if you require access to the previous and the new value immediately upon change.
            If you need just the notification <i>that</i> the value changed, use <see cref="E:LaquaiLib.Util.ObservableValue`1.PropertyChanged"/> instead.
            </remarks>
        </member>
        <member name="E:LaquaiLib.Util.ObservableValue`1.PropertyRead">
            <summary>
            Occurs when the value is read.
            </summary>
        </member>
        <member name="E:LaquaiLib.Util.ObservableValue`1.PropertyChanged">
            <summary>
            Occurs when the value changes.
            </summary>
            <remarks>
            If you require access to the previous and the new value immediately upon change, use <see cref="E:LaquaiLib.Util.ObservableValue`1.ValueChanged"/> instead.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.Set(`0)">
            <summary>
            Sets the value.
            </summary>
            <param name="newValue">The new value to set.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.SetSilent(`0)">
            <summary>
            Sets the value without raising a <see cref="E:LaquaiLib.Util.ObservableValue`1.PropertyChanged"/> event.
            </summary>
            <param name="newValue">The new value to set.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.HasValue">
            <summary>
            Determines if a value has been set.
            </summary>
            <returns><see langword="true"/> if a value has been set, otherwise <see langword="false"/>.</returns>
            <remarks>A value has been "set" if the current value is non-<see langword="null"/>. This also counts for primitive types.</remarks>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.Query">
            <summary>
            Queries the value.
            </summary>
            <returns>The current value.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.QuerySilent">
            <summary>
            Queries the value without raising a <see cref="E:LaquaiLib.Util.ObservableValue`1.PropertyRead"/> event.
            </summary>
            <returns>The current value.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.RaiseValueRead(`0)">
            <summary>
            Raises the <see cref="E:LaquaiLib.Util.ObservableValue`1.PropertyRead"/> event.
            </summary>
            <param name="value">The value that was read.</param>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.RaisePropertyChanged(`0,`0)">
            <summary>
            Raises the <see cref="E:LaquaiLib.Util.ObservableValue`1.PropertyChanged"/> and <see cref="E:LaquaiLib.Util.ObservableValue`1.ValueChanged"/> events.
            </summary>
            <param name="oldValue">The value before the change.</param>
            <param name="newValue">The value after the change.</param>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.CompareTo(LaquaiLib.Util.ObservableValue{`0})">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.Equals(LaquaiLib.Util.ObservableValue{`0})">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.CompareTo(`0)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.Equals(`0)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.Copy(System.Boolean)">
            <summary>
            Creates a copy of this <see cref="T:LaquaiLib.Util.ObservableValue`1"/> with the same initial value as this one's current value.
            </summary>
            <returns>The copy instance.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.op_Implicit(LaquaiLib.Util.ObservableValue{`0})~`0">
            <summary>
            Converts the given <see cref="T:LaquaiLib.Util.ObservableValue`1"/> to its underlying value.
            </summary>
            <param name="value">The <see cref="T:LaquaiLib.Util.ObservableValue`1"/> to convert.</param>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.op_Explicit(`0)~LaquaiLib.Util.ObservableValue{`0}">
            <summary>
            Makes the given value observable.
            </summary>
            <param name="value">The value to instantiate an <see cref="T:LaquaiLib.Util.ObservableValue`1"/> from.</param>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.op_Equality(LaquaiLib.Util.ObservableValue{`0},LaquaiLib.Util.ObservableValue{`0})">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.op_Inequality(LaquaiLib.Util.ObservableValue{`0},LaquaiLib.Util.ObservableValue{`0})">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.op_LessThan(LaquaiLib.Util.ObservableValue{`0},LaquaiLib.Util.ObservableValue{`0})">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.op_LessThanOrEqual(LaquaiLib.Util.ObservableValue{`0},LaquaiLib.Util.ObservableValue{`0})">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.op_GreaterThan(LaquaiLib.Util.ObservableValue{`0},LaquaiLib.Util.ObservableValue{`0})">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.ObservableValue`1.op_GreaterThanOrEqual(LaquaiLib.Util.ObservableValue{`0},LaquaiLib.Util.ObservableValue{`0})">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Util.Processes">
            <summary>
            Provides methods and events for working with processes.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Processes.GetAllProcesses">
            <summary>
            Returns a sequence of all processes running on the local computer.
            </summary>
        </member>
        <member name="E:LaquaiLib.Util.Processes.ProcessStarted">
            <summary>
            Occurs for each process that is started on the local computer.
            </summary>
        </member>
        <member name="E:LaquaiLib.Util.Processes.ProcessStopped">
            <summary>
            Occurs for each process that is stopped on the local computer.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Processes.Clear">
            <summary>
            Removes all entries in the invocation lists of the events defined in <see cref="T:LaquaiLib.Util.Processes"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Processes.Start">
            <summary>
            Starts raising the events defined in <see cref="T:LaquaiLib.Util.Processes"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Processes.Stop">
            <summary>
            Stops raising the events defined in <see cref="T:LaquaiLib.Util.Processes"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Processes.ConditionalRaiseEvents(System.Object)">
            <summary>
            Raises the events defined in <see cref="T:LaquaiLib.Util.Processes"/> if their conditions are met.
            </summary>
            <param name="state">Unused / ignored unconditionally.</param>
        </member>
        <member name="T:LaquaiLib.Util.ScreenCapture">
            <summary>
            Wraps some screenshot functionality from <see cref="T:System.Drawing.Bitmap"/> and <see cref="T:System.Drawing.Graphics"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ScreenCapture.ResolutionScales">
            <summary>
            The resolution scales set in Windows Settings for each monitor. They are used whenever the capture region is automatically set.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.Capture(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Captures a region of the screen. Passed coordinates are not corrected using <see cref="P:LaquaiLib.Util.ScreenCapture.ResolutionScales"/>.
            </summary>
            <param name="x1">The x-coordinate of the top-left point of the region.</param>
            <param name="y1">The y-coordinate of the top-left point of the region.</param>
            <param name="x2">The x-coordinate of the bottom-right point of the region.</param>
            <param name="y2">The y-coordinate of the bottom-right point of the region.</param>
            <returns>The <see cref="T:System.Drawing.Bitmap"/> created by capturing the region.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.Capture(System.Drawing.Rectangle)">
            <summary>
            Captures a region of the screen.
            Position coordinates of the passed <see cref="T:System.Drawing.Rectangle"/> are not corrected using <see cref="P:LaquaiLib.Util.ScreenCapture.ResolutionScales"/>.
            </summary>
            <param name="region">The region to capture.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> object containing the capture created from the given region.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.Capture">
            <summary>
            Captures the entire primary screen.
            </summary>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> object containing the capture created from the primary screen.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.TestRegion(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a test image to show which region the passed coordinates would capture. If <paramref name="extract"/> is <see langword="false"/>, a red rectangle is painted onto the created capture <see cref="T:System.Drawing.Bitmap"/> to show this region. Otherwise, only the pixels inside the region are written to the output file. A singular blue pixel shows the center of this region.
            </summary>
            <remarks>
            The blue center pixel may be off-center if the chosen region has even width and/or height.
            </remarks>
            <param name="x1">The x-coordinate of the top-left point of the region.</param>
            <param name="y1">The y-coordinate of the top-left point of the region.</param>
            <param name="x2">The x-coordinate of the bottom-right point of the region.</param>
            <param name="y2">The y-coordinate of the bottom-right point of the region.</param>
            <param name="extract">Whether to only write the pixels inside the region to the output image.</param>
            <returns>The path to saved <see cref="T:System.Drawing.Bitmap"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.ScaleCoordinates(System.Int32,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            Scales the passed coordinates using the <see cref="P:LaquaiLib.Util.ScreenCapture.ResolutionScales"/> to monitor coordinates.
            </summary>
            <param name="monitor">The monitor to scale the coordinates for.</param>
            <param name="scaleDown">Whether to scale down (<see langword="true"/>) or up (<see langword="false"/>).</param>
            <param name="x">The <c>x</c>-coordinate to scale.</param>
            <param name="y">The <c>y</c>-coordinate to scale.</param>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.ScaleCoordinates(System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Scales the passed coordinates using the <see cref="P:LaquaiLib.Util.ScreenCapture.ResolutionScales"/> to monitor coordinates.
            </summary>
            <param name="monitor">The monitor to scale the coordinates for.</param>
            <param name="scaleDown">Whether to scale down (<see langword="true"/>) or up (<see langword="false"/>).</param>
            <param name="x1">The <c>x</c>-coordinate of the top-left point to scale.</param>
            <param name="y1">The <c>y</c>-coordinate of the top-left point to scale.</param>
            <param name="x2">The <c>x</c>-coordinate of the bottom-right point to scale.</param>
            <param name="y2">The <c>y</c>-coordinate of the bottom-right point to scale.</param>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.ScaleCoordinates(System.Int32,System.Boolean,System.Drawing.Rectangle@)">
            <summary>
            Scales the passed <see cref="T:System.Drawing.Rectangle"/> using the <see cref="P:LaquaiLib.Util.ScreenCapture.ResolutionScales"/> to monitor coordinates.
            </summary>
            <param name="monitor">The monitor to scale the coordinates for.</param>
            <param name="scaleDown">Whether to scale down (<see langword="true"/>) or up (<see langword="false"/>).</param>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle"/> to scale.</param>
        </member>
        <member name="E:LaquaiLib.Util.ScreenCapture.Captured">
            <summary>
            Occurs when this <see cref="T:LaquaiLib.Util.ScreenCapture"/> captures the configured region, but only if <see cref="P:LaquaiLib.Util.ScreenCapture.Predicate"/> is satisfied.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ScreenCapture.Predicate">
            <summary>
            The predicate that is checked whenever a capture would occur. If this returns <see langword="false"/>, the capture is discarded.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.ScreenCapture.Timer">
            <summary>
            The <see cref="T:System.Threading.Timer"/> that controls when captures are made.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ScreenCapture.IsCapturing">
            <summary>
            Whether this <see cref="T:LaquaiLib.Util.ScreenCapture"/> is currently creating captures and may raise the <see cref="E:LaquaiLib.Util.ScreenCapture.Captured"/> event.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ScreenCapture.Region">
            <summary>
            The region this <see cref="T:LaquaiLib.Util.ScreenCapture"/> captures.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ScreenCapture.IsCaptureRegionScreen">
            <summary>
            Whether the configured capture <see cref="P:LaquaiLib.Util.ScreenCapture.Region"/> is the entire primary screen.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.Start">
            <summary>
            Causes this <see cref="T:LaquaiLib.Util.ScreenCapture"/> to create captures and raise the <see cref="E:LaquaiLib.Util.ScreenCapture.Captured"/> event.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.Stop">
            <summary>
            Causes this <see cref="T:LaquaiLib.Util.ScreenCapture"/> to no longer create captures and raise the <see cref="E:LaquaiLib.Util.ScreenCapture.Captured"/> event.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.#ctor">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.Util.ScreenCapture.Region"/> set to the entire primary screen and a <see cref="P:LaquaiLib.Util.ScreenCapture.Predicate"/> that allows all created captures.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.#ctor(System.Func{System.Boolean})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.Util.ScreenCapture.Region"/> set to the entire primary screen and a passed <paramref name="predicate"/>.
            </summary>
            <param name="predicate">The <see cref="P:LaquaiLib.Util.ScreenCapture.Predicate"/> that is checked whenever a capture would occur. If this returns <see langword="false"/>, the capture is discarded.</param>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.#ctor(System.Drawing.Rectangle)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.Util.ScreenCapture.Region"/> set to the passed <paramref name="region"/> and a <see cref="P:LaquaiLib.Util.ScreenCapture.Predicate"/> that allows all created captures.
            </summary>
            <param name="region">The region this <see cref="T:LaquaiLib.Util.ScreenCapture"/> captures.</param>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.#ctor(System.Drawing.Rectangle,System.Func{System.Boolean})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.Util.ScreenCapture.Region"/> set to the passed <paramref name="region"/> and a passed <paramref name="predicate"/>.
            </summary>
            <param name="region">The region this <see cref="T:LaquaiLib.Util.ScreenCapture"/> captures.</param>
            <param name="predicate">The <see cref="P:LaquaiLib.Util.ScreenCapture.Predicate"/> that is checked whenever a capture would occur. If this returns <see langword="false"/>, the capture is discarded.</param>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.Util.ScreenCapture.Region"/> created from a series of passed coordinates and a <see cref="P:LaquaiLib.Util.ScreenCapture.Predicate"/> that allows all created captures.
            </summary>
            <param name="x1">The x-coordinate of the top-left point of the region.</param>
            <param name="y1">The y-coordinate of the top-left point of the region.</param>
            <param name="x2">The x-coordinate of the bottom-right point of the region.</param>
            <param name="y2">The y-coordinate of the bottom-right point of the region.</param>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Func{System.Boolean})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.Util.ScreenCapture.Region"/> created from a series of passed coordinates and a passed <paramref name="predicate"/>.
            </summary>
            <param name="x1">The x-coordinate of the top-left point of the region.</param>
            <param name="y1">The y-coordinate of the top-left point of the region.</param>
            <param name="x2">The x-coordinate of the bottom-right point of the region.</param>
            <param name="y2">The y-coordinate of the bottom-right point of the region.</param>
            <param name="predicate">The <see cref="P:LaquaiLib.Util.ScreenCapture.Predicate"/> that is checked whenever a capture would occur. If this returns <see langword="false"/>, the capture is discarded.</param>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.#ctor(System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.Util.ScreenCapture.Region"/> set to a specific screen and a <see cref="P:LaquaiLib.Util.ScreenCapture.Predicate"/> that allows all created captures.
            </summary>
            <param name="monitor">The number of the monitor to capture.</param>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.#ctor(System.Int32,System.Func{System.Boolean})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.Util.ScreenCapture.Region"/> set to a specific screen and a passed <paramref name="predicate"/>.
            </summary>
            <param name="monitor">The number of the monitor to capture.</param>
            <param name="predicate">The <see cref="P:LaquaiLib.Util.ScreenCapture.Predicate"/> that is checked whenever a capture would occur. If this returns <see langword="false"/>, the capture is discarded.</param>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.InitTimer">
            <summary>
            Initializes the <see cref="F:LaquaiLib.Util.ScreenCapture.Timer"/> that controls when captures are made.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.RaiseEvent(LaquaiLib.Util.ScreenCapture.ScreenCaptureEventArgs)">
            <summary>
            Event raise wrapper.
            </summary>
            <param name="e">The <see cref="T:LaquaiLib.Util.ScreenCapture.ScreenCaptureEventArgs"/> passed when raising the event.</param>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.Finalize">
            <summary>
            Destructor. Ensures that the <see cref="F:LaquaiLib.Util.ScreenCapture.Timer"/> no longer causes captures to be made when this <see cref="T:LaquaiLib.Util.ScreenCapture"/> dies.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.ScreenCapture.ScreenCaptureEventArgs">
            <summary>
            Event args that are passed when raising a <see cref="E:LaquaiLib.Util.ScreenCapture.Captured"/> event.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ScreenCapture.ScreenCaptureEventArgs.Bitmap">
            <summary>
            The created <see cref="T:System.Drawing.Bitmap"/> capture.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ScreenCapture.ScreenCaptureEventArgs.CaptureTime">
            <summary>
            When the capture was created.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ScreenCapture.ScreenCaptureEventArgs.#ctor(System.Drawing.Bitmap,System.DateTime)">
            <summary>
            Instantiates <see cref="T:LaquaiLib.Util.ScreenCapture.ScreenCaptureEventArgs"/> with the passed <paramref name="bitmap"/> and <paramref name="timestamp"/>.
            </summary>
            <param name="bitmap"></param>
            <param name="timestamp"></param>
        </member>
        <member name="T:LaquaiLib.Util.TaskbarProgress">
            <summary>
            Represents a handler for a progress display on the current window's taskbar icon.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.#ctor(System.Windows.Window)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.TaskbarProgress"/> with reference to a specified <paramref name="window"/>.
            </summary>
            <param name="window">The <see cref="T:System.Windows.Window"/> the taskbar icon of which is to display progress.</param>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.GetInstance(System.Windows.Window)">
            <summary>
            Creates or directly returns an existing instance of <see cref="T:LaquaiLib.Util.TaskbarProgress"/> with reference to a specified <paramref name="window"/>.
            </summary>
            <remarks>
            The application calling this method or using its return value must own the specified <paramref name="window"/>.
            </remarks>
            <param name="window">The <see cref="T:System.Windows.Window"/> the taskbar icon of which is to display progress.</param>
            <returns>A <see cref="T:LaquaiLib.Util.TaskbarProgress"/> instance.</returns>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.GetInstance(System.IntPtr)">
            <summary>
            Creates or directly returns an existing instance of <see cref="T:LaquaiLib.Util.TaskbarProgress"/> with reference to a <see cref="T:System.Windows.Window"/> identified by its <paramref name="pointer"/>.
            </summary>
            <remarks>
            The application calling this method or using its return value must own the <see cref="T:System.Windows.Window"/> pointed to by <paramref name="pointer"/>.
            </remarks>
            <param name="pointer">The pointer to the <see cref="T:System.Windows.Window"/> the taskbar icon of which is to display progress.</param>
            <returns>A <see cref="T:LaquaiLib.Util.TaskbarProgress"/> instance.</returns>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.GetInstance">
            <summary>
            Creates or directly returns an existing instance of <see cref="T:LaquaiLib.Util.TaskbarProgress"/> with reference to the <see cref="T:System.Windows.Window"/> of the calling process.
            </summary>
            <returns>A <see cref="T:LaquaiLib.Util.TaskbarProgress"/> instance.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the calling context's window handle was 0. Usually occurs when this method is called from a non-WPF context.</exception>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.ResetInstance">
            <summary>
            Resets the state of the taskbar progress bar and the <see cref="T:LaquaiLib.Util.TaskbarProgress"/> instance that is kept internally. Only one <see cref="T:LaquaiLib.Util.TaskbarProgress"/> instance may exist at a time.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.SetState(System.Windows.Shell.TaskbarItemProgressState)">
            <summary>
            Sets the state of the taskbar progress visual.
            </summary>
            <param name="state">The new state of the taskbar progress visual.</param>
            <returns>The value of the <see cref="P:System.Windows.Shell.TaskbarItemInfo.ProgressState"/> property after the attempted set operation.</returns>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.SetValue(System.Int32)">
            <summary>
            Sets a new value for the taskbar progress bar.
            </summary>
            <param name="percent">The new value for the taskbar progress bar. Must be between 0 and 100. Values outside this range are clamped.</param>
            <returns>The value of the <see cref="P:System.Windows.Shell.TaskbarItemInfo.ProgressValue"/> property after the attempted set operation.</returns>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.SetValue(System.Double)">
            <summary>
            Sets a new value for the taskbar progress bar.
            </summary>
            <param name="value">The new value for the taskbar progress bar. Must be between 0 and 1. Values outside this range are clamped.</param>
            <returns>The value of the <see cref="P:System.Windows.Shell.TaskbarItemInfo.ProgressValue"/> property after the attempted set operation.</returns>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.IncreaseValue(System.Double)">
            <summary>
            Increases the value of the taskbar progress bar by a specified amount.
            </summary>
            <param name="value">The amount to increase the value of the taskbar progress bar by. If the given value would cause the progress bar's value to fall outside range (0-1), the value is clamped.</param>
            <returns>The value of the <see cref="P:System.Windows.Shell.TaskbarItemInfo.ProgressValue"/> property after the attempted set operation.</returns>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.DecreaseValue(System.Double)">
            <summary>
            Decreases the value of the taskbar progress bar by a specified amount.
            </summary>
            <param name="value">The amount to decrease the value of the taskbar progress bar by. If the given value would cause the progress bar's value to fall outside range (0-1), the value is clamped.</param>
            <returns>The value of the <see cref="P:System.Windows.Shell.TaskbarItemInfo.ProgressValue"/> property after the attempted set operation.</returns>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.AnimateToValueAsync(System.Double,System.Int32,System.Int32)">
            <summary>
            Animates towards a specified progress <paramref name="target"/> within a specified <paramref name="duration"/>.
            </summary>
            <param name="target">The value to animate progress towards.</param>
            <param name="duration">The amount of time for the animation to take in milliseconds. It may not be possible to obey this (exactly) in all cases.</param>
            <param name="steps">The number of steps to take to reach the target value. This is ignored if greater than <paramref name="duration"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the animation has finished.</returns>
        </member>
        <member name="M:LaquaiLib.Util.TaskbarProgress.GetValue">
            <summary>
            Gets the current value of the taskbar progress bar.
            </summary>
            <returns>The current value of the taskbar progress bar.</returns>
        </member>
        <member name="T:LaquaiLib.Util.ThrowHelper">
            <summary>
            Provides methods which help to throw exceptions.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ThrowHelper.ThrowOnFirstOffender``2(System.Func{``1,System.Object[]},System.Predicate{``1},``1[])">
            <summary>
            Throws an instance of the given exception type <typeparamref name="TException"/> on the first item in <paramref name="items"/> which does not match the given <paramref name="predicate"/>.
            </summary>
            <typeparam name="TException">The <see cref="T:System.Type"/> of the exception to throw.</typeparam>
            <typeparam name="TTest">The <see cref="T:System.Type"/> of the items to test.</typeparam>
            <param name="constructorParamFactory">A <see cref="T:System.Func`2"/> that is passed the first item in <paramref name="items"/> which does not match the given <paramref name="predicate"/> and returns an <see cref="T:System.Array"/> of nullable <see cref="T:System.Object"/>s (or <see langword="null"/>) which is passed to the constructor of the exception to throw. If it returns <see langword="null"/>, the exception type's parameterless constructor is invoked.</param>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> the items must pass.</param>
            <param name="items">The items to test.</param>
        </member>
        <member name="M:LaquaiLib.Util.ThrowHelper.ThrowOnFirstOffender``2(``0,System.Predicate{``1},``1[])">
            <summary>
            Throws the specified <paramref name="exception"/> of type <typeparamref name="TException"/> on the first item in <paramref name="items"/> which does not match the given <paramref name="predicate"/>.
            </summary>
            <typeparam name="TException">The <see cref="T:System.Type"/> of the exception to throw.</typeparam>
            <typeparam name="TTest">The <see cref="T:System.Type"/> of the items to test.</typeparam>
            <param name="exception">The <see cref="T:System.Exception"/> to throw.</param>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> the items must pass.</param>
            <param name="items">The items to test.</param>
        </member>
        <member name="M:LaquaiLib.Util.ThrowHelper.ThrowOnNull(System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> on the first item in the argument list which is <see langword="null"/>. This method has overloads for up to 10 arguments.
            </summary>
            <param name="obj1">The <see cref="T:System.Object"/> to test.</param>
            <param name="arg1">The name of the argument to test.</param>
        </member>
        <member name="M:LaquaiLib.Util.ThrowHelper.ThrowOnNull(System.Object,System.Object,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> on the first item in the argument list which is <see langword="null"/>. This method has overloads for up to 10 arguments.
            </summary>
            <param name="obj1">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj2">An <see cref="T:System.Object"/> to test.</param>
            <param name="arg1">The name of the first argument to test.</param>
            <param name="arg2">The name of the second argument to test.</param>
        </member>
        <member name="M:LaquaiLib.Util.ThrowHelper.ThrowOnNull(System.Object,System.Object,System.Object,System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> on the first item in the argument list which is <see langword="null"/>. This method has overloads for up to 10 arguments.
            </summary>
            <param name="obj1">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj2">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj3">An <see cref="T:System.Object"/> to test.</param>
            <param name="arg1">The name of the first argument to test.</param>
            <param name="arg2">The name of the second argument to test.</param>
            <param name="arg3">The name of the third argument to test.</param>
        </member>
        <member name="M:LaquaiLib.Util.ThrowHelper.ThrowOnNull(System.Object,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> on the first item in the argument list which is <see langword="null"/>. This method has overloads for up to 10 arguments.
            </summary>
            <param name="obj1">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj2">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj3">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj4">An <see cref="T:System.Object"/> to test.</param>
            <param name="arg1">The name of the first argument to test.</param>
            <param name="arg2">The name of the second argument to test.</param>
            <param name="arg3">The name of the third argument to test.</param>
            <param name="arg4">The name of the fourth argument to test.</param>
        </member>
        <member name="M:LaquaiLib.Util.ThrowHelper.ThrowOnNull(System.Object,System.Object,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> on the first item in the argument list which is <see langword="null"/>. This method has overloads for up to 10 arguments.
            </summary>
            <param name="obj1">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj2">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj3">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj4">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj5">An <see cref="T:System.Object"/> to test.</param>
            <param name="arg1">The name of the first argument to test.</param>
            <param name="arg2">The name of the second argument to test.</param>
            <param name="arg3">The name of the third argument to test.</param>
            <param name="arg4">The name of the fourth argument to test.</param>
            <param name="arg5">The name of the fifth argument to test.</param>
        </member>
        <member name="M:LaquaiLib.Util.ThrowHelper.ThrowOnNull(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> on the first item in the argument list which is <see langword="null"/>. This method has overloads for up to 10 arguments.
            </summary>
            <param name="obj1">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj2">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj3">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj4">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj5">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj6">An <see cref="T:System.Object"/> to test.</param>
            <param name="arg1">The name of the first argument to test.</param>
            <param name="arg2">The name of the second argument to test.</param>
            <param name="arg3">The name of the third argument to test.</param>
            <param name="arg4">The name of the fourth argument to test.</param>
            <param name="arg5">The name of the fifth argument to test.</param>
            <param name="arg6">The name of the sixth argument to test.</param>
        </member>
        <member name="M:LaquaiLib.Util.ThrowHelper.ThrowOnNull(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> on the first item in the argument list which is <see langword="null"/>. This method has overloads for up to 10 arguments.
            </summary>
            <param name="obj1">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj2">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj3">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj4">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj5">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj6">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj7">An <see cref="T:System.Object"/> to test.</param>
            <param name="arg1">The name of the first argument to test.</param>
            <param name="arg2">The name of the second argument to test.</param>
            <param name="arg3">The name of the third argument to test.</param>
            <param name="arg4">The name of the fourth argument to test.</param>
            <param name="arg5">The name of the fifth argument to test.</param>
            <param name="arg6">The name of the sixth argument to test.</param>
            <param name="arg7">The name of the seventh argument to test.</param>
        </member>
        <member name="M:LaquaiLib.Util.ThrowHelper.ThrowOnNull(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> on the first item in the argument list which is <see langword="null"/>. This method has overloads for up to 10 arguments.
            </summary>
            <param name="obj1">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj2">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj3">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj4">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj5">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj6">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj7">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj8">An <see cref="T:System.Object"/> to test.</param>
            <param name="arg1">The name of the first argument to test.</param>
            <param name="arg2">The name of the second argument to test.</param>
            <param name="arg3">The name of the third argument to test.</param>
            <param name="arg4">The name of the fourth argument to test.</param>
            <param name="arg5">The name of the fifth argument to test.</param>
            <param name="arg6">The name of the sixth argument to test.</param>
            <param name="arg7">The name of the seventh argument to test.</param>
            <param name="arg8">The name of the eighth argument to test.</param>
        </member>
        <member name="M:LaquaiLib.Util.ThrowHelper.ThrowOnNull(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> on the first item in the argument list which is <see langword="null"/>. This method has overloads for up to 10 arguments.
            </summary>
            <param name="obj1">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj2">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj3">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj4">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj5">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj6">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj7">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj8">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj9">An <see cref="T:System.Object"/> to test.</param>
            <param name="arg1">The name of the first argument to test.</param>
            <param name="arg2">The name of the second argument to test.</param>
            <param name="arg3">The name of the third argument to test.</param>
            <param name="arg4">The name of the fourth argument to test.</param>
            <param name="arg5">The name of the fifth argument to test.</param>
            <param name="arg6">The name of the sixth argument to test.</param>
            <param name="arg7">The name of the seventh argument to test.</param>
            <param name="arg8">The name of the eighth argument to test.</param>
            <param name="arg9">The name of the ninth argument to test.</param>
        </member>
        <member name="M:LaquaiLib.Util.ThrowHelper.ThrowOnNull(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> on the first item in the argument list which is <see langword="null"/>. This method has overloads for up to 10 arguments.
            </summary>
            <param name="obj1">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj2">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj3">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj4">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj5">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj6">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj7">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj8">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj9">An <see cref="T:System.Object"/> to test.</param>
            <param name="obj10">An <see cref="T:System.Object"/> to test.</param>
            <param name="arg1">The name of the first argument to test.</param>
            <param name="arg2">The name of the second argument to test.</param>
            <param name="arg3">The name of the third argument to test.</param>
            <param name="arg4">The name of the fourth argument to test.</param>
            <param name="arg5">The name of the fifth argument to test.</param>
            <param name="arg6">The name of the sixth argument to test.</param>
            <param name="arg7">The name of the seventh argument to test.</param>
            <param name="arg8">The name of the eighth argument to test.</param>
            <param name="arg9">The name of the ninth argument to test.</param>
            <param name="arg10">The name of the tenth argument to test.</param>
        </member>
        <member name="M:LaquaiLib.Util.ThrowHelper.ThrowOnNull(System.Object[])">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> on the first item in the argument list which is <see langword="null"/>.
            This does not accurately report the name of the argument which is <see langword="null"/>.
            </summary>
            <param name="objs">The objects to test.</param>
        </member>
        <member name="T:LaquaiLib.Util.ValueChangedEventArgs`1">
            <summary>
            Provides data for the <see cref="E:LaquaiLib.Util.ObservableValue`1.ValueChanged"/> event.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="P:LaquaiLib.Util.ValueChangedEventArgs`1.OldValue">
            <summary>
            The value before the change.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ValueChangedEventArgs`1.NewValue">
            <summary>
            The value after the change.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ValueChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Instantiates new <see cref="T:LaquaiLib.Util.ValueChangedEventArgs`1"/> with the given values.
            </summary>
            <param name="oldValue">The value before the change.</param>
            <param name="newValue">The value after the change.</param>
        </member>
        <member name="T:LaquaiLib.Util.VolumeManager.VolumeController">
            <summary>
            Represents a controller for managing the volume of a specific window or process.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.VolumeManager.VolumeController.ProcessNameOrTitle">
            <summary>
            The name of the process or window title this handler targets.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.VolumeManager.VolumeController.OnFocusReceived">
            <summary>
            The <see cref="T:System.Action`1"/> that is invoked when the targeted window gains focus.
            It is passed the <see cref="T:CoreAudio.AudioSessionControl2"/> representing the window.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.VolumeManager.VolumeController.OnFocusLost">
            <summary>
            The <see cref="T:System.Action`1"/> that is invoked when the targeted window loses focus.
            It is passed the <see cref="T:CoreAudio.AudioSessionControl2"/> representing the window.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.VolumeManager.VolumeController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LaquaiLib.Util.VolumeManager.VolumeController"/> class.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.VolumeManager.VolumeControllerManager">
            <summary>
            Represents a manager for creating <see cref="T:LaquaiLib.Util.VolumeManager.VolumeController"/>s.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.VolumeManager.VolumeControllerManager.#ctor(System.Action{CoreAudio.AudioSessionControl2},System.Action{CoreAudio.AudioSessionControl2})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Util.VolumeManager.VolumeControllerManager"/> with the specified default focus received and lost actions.
            </summary>
            <param name="defaultOnFocusReceived">The <see cref="T:System.Action`1"/> to be called when a window or process represented by a <see cref="T:CoreAudio.AudioSessionControl2"/> receives focus.</param>
            <param name="defaultOnFocusLost">The <see cref="T:System.Action`1"/> to be called when a window or process represented by a <see cref="T:CoreAudio.AudioSessionControl2"/> loses focus.</param>
        </member>
        <member name="M:LaquaiLib.Util.VolumeManager.VolumeControllerManager.CreateController(System.String,System.Action{CoreAudio.AudioSessionControl2},System.Action{CoreAudio.AudioSessionControl2})">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Util.VolumeManager.VolumeController"/> with the specified process name or title and focus received and lost actions.
            </summary>
            <param name="processNameOrTitle">The name or title of the window or process to be controlled by the <see cref="T:LaquaiLib.Util.VolumeManager.VolumeController"/>.</param>
            <param name="onFocusReceived">The <see cref="T:System.Action`1"/> to be called when the window or process represented by the <see cref="T:LaquaiLib.Util.VolumeManager.VolumeController"/> receives focus. If omitted or <see langword="null"/>, the default focus received action will be used.</param>
            <param name="onFocusLost">The <see cref="T:System.Action`1"/> to be called when the window or process represented by the <see cref="T:LaquaiLib.Util.VolumeManager.VolumeController"/> loses focus. If omitted or <see langword="null"/>, the default focus lost action will be used.</param>
            <returns>The created <see cref="T:LaquaiLib.Util.VolumeManager.VolumeController"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Util.Windows">
            <summary>
            Provides methods and events for working with windows.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows._syncRoot">
            <summary>
            The <see cref="T:System.Object"/> that is locked on when modifying collections in any of the "GetAll..." methods in <see cref="T:LaquaiLib.Util.Windows"/>. <b>Callers should lock on this when accessing these collections as well, otherwise, exceptions may be thrown during enumeration.</b>
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.Windows.EnumWindowsProc">
            <summary>
            Encapsulates a method that is called for each top-level window that is enumerated using <see cref="M:LaquaiLib.Util.Windows.EnumWindows(LaquaiLib.Util.Windows.EnumWindowsProc,System.IntPtr)"/>.
            </summary>
            <param name="hWnd">The handle of the window.</param>
            <param name="lParam">An application-defined value given in <see cref="M:LaquaiLib.Util.Windows.EnumWindows(LaquaiLib.Util.Windows.EnumWindowsProc,System.IntPtr)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:LaquaiLib.Util.Windows.GetActiveWindowHandle">
            <summary>
            Retrieves the handle of the currently active window.
            </summary>
            <returns>The handle of the currently active window or <see langword="null"/> if no window is active or the retrieval failed.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Windows.GetActiveWindowTitle">
            <summary>
            Retrieves the title of the currently active window.
            </summary>
            <returns>The title of the currently active window or <see langword="null"/> if no window is active or the retrieval failed.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Windows.GetActiveWindowPid">
            <summary>
            Retrieves the PID of the process that owns the currently active window.
            </summary>
            <returns>The PID of the process that owns the currently active window or <see langword="null"/> if no window is active or the retrieval failed.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Windows.GetWindowHandle(System.String)">
            <summary>
            Retrieves the handle of the first window that matches the specified <paramref name="title"/>.
            </summary>
            <param name="title">The title of the window to find.</param>
            <returns>The HWND of the first window that matches the specified <paramref name="title"/> or <see langword="null"/> if no window matches the specified <paramref name="title"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Windows.GetAllWindowTitles(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Replaces the contents of the given <paramref name="existing"/> <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.String"/> with the titles of all top-level windows.
            </summary>
            <param name="existing">The <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.String"/> to place the window titles into.</param>
            <remarks>For the entire duration of this method, a lock on <see cref="F:LaquaiLib.Util.Windows._syncRoot"/> is held.</remarks>
        </member>
        <member name="M:LaquaiLib.Util.Windows.GetAllWindowHandles(System.Collections.Generic.ICollection{System.IntPtr})">
            <summary>
            Replaces the contents of the given <paramref name="existing"/> <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.IntPtr"/> with the handles of all top-level windows.
            </summary>
            <param name="existing">The <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.IntPtr"/> to place the window handles into.</param>
            <remarks>For the entire duration of this method, a lock on <see cref="F:LaquaiLib.Util.Windows._syncRoot"/> is held.</remarks>
        </member>
        <member name="M:LaquaiLib.Util.Windows.GetAllWindows(System.Collections.Generic.IDictionary{System.IntPtr,System.String})">
            <summary>
            Replaces the contents of the given <paramref name="existing"/> <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:System.IntPtr"/> and <see cref="T:System.String"/> with the handles and titles of all top-level windows.
            </summary>
            <param name="existing">The <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:System.IntPtr"/> and <see cref="T:System.String"/> to place the window handle-title pairs into.</param>
            <remarks>For the entire duration of this method, a lock on <see cref="F:LaquaiLib.Util.Windows._syncRoot"/> is held.</remarks>
        </member>
        <member name="E:LaquaiLib.Util.Windows.ActiveWindowChanged">
            <summary>
            Occurs when the active window changes.
            </summary>
            <remarks>Before a delegate is added to this event's invocation list, the current active window is stored internally to prevent immediately having the event fire.</remarks>
        </member>
        <member name="E:LaquaiLib.Util.Windows.WindowCreated">
            <summary>
            Occurs when a new window is created / opened.
            </summary>
            <remarks>Before a delegate is added to this event's invocation list, the list of currently existent windows is stored internally to prevent immediately having the event fire.</remarks>
        </member>
        <member name="E:LaquaiLib.Util.Windows.WindowDestroyed">
            <summary>
            Occurs when a window is destroyed / closed.
            </summary>
            <remarks>Before a delegate is added to this event's invocation list, the list of currently existent windows is stored internally to prevent immediately having the event fire.</remarks>
        </member>
        <member name="T:LaquaiLib.Util.Windows.WindowEvent">
            <summary>
            Encapsulates a method that is called when a window event defined in <see cref="T:LaquaiLib.Util.Windows"/> occurs.
            </summary>
            <param name="handle">The handle of the window. If <see langword="null"/>, the handle could not be obtained.</param>
            <param name="title">The title of the window. If <see langword="null"/>, the title could not be obtained.</param>
        </member>
        <member name="M:LaquaiLib.Util.Windows.Clear">
            <summary>
            Removes all entries in the invocation lists of the events defined in <see cref="T:LaquaiLib.Util.Windows"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Windows.Start">
            <summary>
            Starts raising the events defined in <see cref="T:LaquaiLib.Util.Windows"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Windows.Stop">
            <summary>
            Stops raising the events defined in <see cref="T:LaquaiLib.Util.Windows"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Windows.ConditionalRaiseEvents(System.Object)">
            <summary>
            Raises the events defined in <see cref="T:LaquaiLib.Util.Windows"/> if their conditions are met.
            </summary>
            <param name="state">Unused / ignored unconditionally.</param>
        </member>
        <member name="T:LaquaiLib.Util.Windows.Style">
            <summary>
            Provides methods and constants for manipulating the style of a window.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.Windows.Style.WindowStyles">
            <summary>
            Identifies styles applicable to windows.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_BORDER">
            <summary>
            The window has a thin-line border
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_CAPTION">
            <summary>
            The window has a title bar (includes the WS_BORDER style).
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_CHILD">
            <summary>
            The window is a child window. A window with this style cannot have a menu bar. This style cannot be used with the WS_POPUP style.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_CHILDWINDOW">
            <summary>
            Same as the WS_CHILD style.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_CLIPCHILDREN">
            <summary>
            Excludes the area occupied by child windows when drawing occurs within the parent window. This style is used when creating the parent window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, when a particular child window receives a WM_PAINT message, the WS_CLIPSIBLINGS style clips all other overlapping child windows out of the region of the child window to be updated. If WS_CLIPSIBLINGS is not specified and child windows overlap, it is possible, when drawing within the client area of a child window, to draw within the client area of a neighboring child window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_DISABLED">
            <summary>
            The window is initially disabled. A disabled window cannot receive input from the user. To change this after a window has been created, use the EnableWindow function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_DLGFRAME">
            <summary>
            The window has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_GROUP">
            <summary>
            The window is the first control of a group of controls. The group consists of this first control and all controls defined after it, up to the next control with the WS_GROUP style. The first control in each group usually has the WS_TABSTOP style so that the user can move from group to group. The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys. You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_HSCROLL">
            <summary>
            The window has a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_ICONIC">
            <summary>
            The window is initially minimized. Same as the WS_MINIMIZE style.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_MAXIMIZE">
            <summary>
            The window is initially maximized.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_MAXIMIZEBOX">
            <summary>
            The window has a maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_MINIMIZE">
            <summary>
            The window is initially minimized. Same as the WS_ICONIC style.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_MINIMIZEBOX">
            <summary>
            The window has a minimize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_OVERLAPPED">
            <summary>
            The window is an overlapped window. An overlapped window has a title bar and a border. Same as the WS_TILED style.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_OVERLAPPEDWINDOW">
            <summary>
            The window is an overlapped window. Same as the WS_TILEDWINDOW style.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_POPUP">
            <summary>
            The window is a pop-up window. This style cannot be used with the WS_CHILD style.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_POPUPWINDOW">
            <summary>
            The window is a pop-up window. The WS_CAPTION and WS_POPUPWINDOW styles must be combined to make the window menu visible.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_SIZEBOX">
            <summary>
            The window has a sizing border. Same as the WS_THICKFRAME style.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_SYSMENU">
            <summary>
            The window has a window menu on its title bar. The WS_CAPTION style must also be specified.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_TABSTOP">
            <summary>
            The window is a control that can receive the keyboard focus when the user presses the TAB key. Pressing the TAB key changes the keyboard focus to the next control with the WS_TABSTOP style. You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function. For user-created windows and modeless dialogs to work with tab stops, alter the message loop to call the IsDialogMessage function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_THICKFRAME">
            <summary>
            The window has a sizing border. Same as the WS_SIZEBOX style.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_TILED">
            <summary>
            The window is an overlapped window. An overlapped window has a title bar and a border. Same as the WS_OVERLAPPED style.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_TILEDWINDOW">
            <summary>
            The window is an overlapped window. Same as the WS_OVERLAPPEDWINDOW style.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_VISIBLE">
            <summary>
            The window is initially visible. This style can be turned on and off by using the ShowWindow or SetWindowPos function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.WindowStyles.WS_VSCROLL">
            <summary>
            The window has a vertical scroll bar.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles">
            <summary>
            Identifies extended styles applicable to windows.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_ACCEPTFILES">
            <summary>
            The window accepts drag-drop files.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_APPWINDOW">
            <summary>
            Forces a top-level window onto the taskbar when the window is visible.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_CLIENTEDGE">
            <summary>
            The window has a border with a sunken edge.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_COMPOSITED">
            <summary>
            Paints all descendants of a window in bottom-to-top painting order using double-buffering.
            Bottom-to-top painting order allows a descendent window to have translucency (alpha) and transparency (color-key) effects, but only if the descendent window also has the WS_EX_TRANSPARENT bit set.
            Double-buffering allows the window and its descendents to be painted without flicker.
            This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_CONTEXTHELP">
            <summary>
            The title bar of the window includes a question mark.
            When the user clicks the question mark, the cursor changes to a question mark with a pointer.
            If the user then clicks a child window, the child receives a WM_HELP message.
            The child window should pass the message to the parent window procedure, which should call the WinHelp function using the HELP_WM_HELP command.
            The Help application displays a pop-up window that typically contains help for the child window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_CONTROLPARENT">
            <summary>
            The window itself contains child windows that should take part in dialog box navigation.
            If this style is specified, the dialog manager recurses into children of this window when performing navigation operations such as handling the TAB key, an arrow key, or a keyboard mnemonic.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_DLGMODALFRAME">
            <summary>
            The window has a double border; the window can, optionally, be created with a title bar by specifying the WS_CAPTION style in the dwStyle parameter.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_LAYERED">
            <summary>
            The window is a layered window.
            This style cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC.
            Windows 8: The WS_EX_LAYERED style is supported for top-level windows and child windows.
            Previous Windows versions support WS_EX_LAYERED only for top-level windows.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_LAYOUTRTL">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the horizontal origin of the window is on the right edge.
            Increasing horizontal values advance to the left.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_LEFT">
            <summary>
            The window has generic left-aligned properties.
            This is the default.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_LEFTSCROLLBAR">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the vertical scroll bar (if present) is to the left of the client area.
            For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_LTRREADING">
            <summary>
            The window text is displayed using left-to-right reading-order properties.
            This is the default.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_MDICHILD">
            <summary>
            The window is a MDI child window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_NOACTIVATE">
            <summary>
            A top-level window created with this style does not become the foreground window when the user clicks it.
            The system does not bring this window to the foreground when the user minimizes or closes the foreground window.
            The window should not be activated through programmatic access or via keyboard navigation by accessible technology, such as Narrator.
            To activate the window, use the SetActiveWindow or SetForegroundWindow function.
            The window does not appear on the taskbar by default.
            To force the window to appear on the taskbar, use the WS_EX_APPWINDOW style.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_NOINHERITLAYOUT">
            <summary>
            The window does not pass its window layout to its child windows.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_NOPARENTNOTIFY">
            <summary>
            The child window created with this style does not send the WM_PARENTNOTIFY message to its parent window when it is created or destroyed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_NOREDIRECTIONBITMAP">
            <summary>
            The window does not render to a redirection surface.
            This is for windows that do not have visible content or that use mechanisms other than surfaces to provide their visual.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_OVERLAPPEDWINDOW">
            <summary>
            The window is an overlapped window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_PALETTEWINDOW">
            <summary>
            The window is palette window, which is a modeless dialog box that presents an array of commands.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_RIGHT">
            <summary>
            The window has generic "right-aligned" properties.
            This depends on the window class.
            This style has an effect only if the shell language is Hebrew, Arabic, or another language that supports reading-order alignment; otherwise, the style is ignored.
            Using the WS_EX_RIGHT style for static or edit controls has the same effect as using the SS_RIGHT or ES_RIGHT style, respectively.
            Using this style with button controls has the same effect as using BS_RIGHT and BS_RIGHTBUTTON styles.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_RIGHTSCROLLBAR">
            <summary>
            The vertical scroll bar (if present) is to the right of the client area.
            This is the default.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_RTLREADING">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading-order alignment, the window text is displayed using right-to-left reading-order properties.
            For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_STATICEDGE">
            <summary>
            The window has a three-dimensional border style intended to be used for items that do not accept user input.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_TOOLWINDOW">
            <summary>
            The window is intended to be used as a floating toolbar.
            A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font.
            A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB.
            If a tool window has a system menu, its icon is not displayed on the title bar.
            However, you can display the system menu by right-clicking or by typing ALT+SPACE.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_TOPMOST">
            <summary>
            The window should be placed above all non-topmost windows and should stay above them, even when the window is deactivated.
            To add or remove this style, use the SetWindowPos function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_TRANSPARENT">
            <summary>
            The window should not be painted until siblings beneath the window (that were created by the same thread) have been painted.
            The window appears transparent because the bits of underlying sibling windows have already been painted.
            To achieve transparency without these restrictions, use the SetWindowRgn function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Windows.Style.ExtendedWindowStyles.WS_EX_WINDOWEDGE">
            <summary>
            The window has a border with a raised edge.
            </summary>
        </member>
        <member name="T:LaquaiLib.WasmServices.FileSystemProxy.Directory">
            <summary>
            Implements the <see cref="T:LaquaiLib.WasmServices.FileSystemProxy.IDirectory"/> interface for use in the <see cref="T:LaquaiLib.WasmServices.FileSystemProxy.IFileSystemProxy"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.CreateDirectory(System.String)">
            <inheritdoc cref="M:System.IO.Directory.CreateDirectory(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.CreateSymbolicLink(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.CreateSymbolicLink(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.Delete(System.String)">
            <inheritdoc cref="M:System.IO.Directory.Delete(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.Delete(System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.Directory.Delete(System.String,System.Boolean)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.EnumerateDirectories(System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateDirectories(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.EnumerateDirectories(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateDirectories(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.EnumerateDirectories(System.String,System.String,System.IO.EnumerationOptions)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.EnumerationOptions)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.EnumerateFiles(System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFiles(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.EnumerateFiles(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFiles(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.EnumerateFiles(System.String,System.String,System.IO.EnumerationOptions)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.EnumerationOptions)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.EnumerateFileSystemEntries(System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFileSystemEntries(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.EnumerateFileSystemEntries(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.Exists(System.String)">
            <inheritdoc cref="M:System.IO.Directory.Exists(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetCreationTime(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetCreationTime(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetCreationTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetCreationTimeUtc(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetCurrentDirectory">
            <inheritdoc cref="M:System.IO.Directory.GetCurrentDirectory" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetDirectories(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetDirectories(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetDirectories(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetDirectories(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetDirectories(System.String,System.String,System.IO.EnumerationOptions)">
            <inheritdoc cref="M:System.IO.Directory.GetDirectories(System.String,System.String,System.IO.EnumerationOptions)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetDirectoryRoot(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetDirectoryRoot(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetFiles(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetFiles(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetFiles(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetFiles(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetFiles(System.String,System.String,System.IO.EnumerationOptions)">
            <inheritdoc cref="M:System.IO.Directory.GetFiles(System.String,System.String,System.IO.EnumerationOptions)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetFileSystemEntries(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetFileSystemEntries(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetFileSystemEntries(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)">
            <inheritdoc cref="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetLastAccessTime(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetLastAccessTime(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetLastAccessTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetLastAccessTimeUtc(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetLastWriteTime(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetLastWriteTime(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetLastWriteTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetLastWriteTimeUtc(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetLogicalDrives">
            <inheritdoc cref="M:System.IO.Directory.GetLogicalDrives" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.GetParent(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetParent(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.Move(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.Move(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.ResolveLinkTarget(System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.Directory.ResolveLinkTarget(System.String,System.Boolean)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.SetCreationTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetCreationTime(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.SetCreationTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.SetCurrentDirectory(System.String)">
            <inheritdoc cref="M:System.IO.Directory.SetCurrentDirectory(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.SetLastAccessTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.SetLastWriteTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="T:LaquaiLib.WasmServices.FileSystemProxy.File">
            <summary>
            Implements the <see cref="T:LaquaiLib.WasmServices.FileSystemProxy.IFile"/> interface for use in the <see cref="T:LaquaiLib.WasmServices.FileSystemProxy.IFileSystemProxy"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.AppendAllText(System.String,System.String)">
            <inheritdoc cref="M:System.IO.File.AppendAllText(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.AppendAllTextAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.AppendAllTextAsync(System.String,System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.AppendAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.AppendAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.AppendText(System.String)">
            <inheritdoc cref="M:System.IO.File.AppendText(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.Copy(System.String,System.String)">
            <inheritdoc cref="M:System.IO.File.Copy(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.Copy(System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.File.Copy(System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.Create(System.String)">
            <inheritdoc cref="M:System.IO.File.Create(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.Create(System.String,System.Int32)">
            <inheritdoc cref="M:System.IO.File.Create(System.String,System.Int32)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.Create(System.String,System.Int32,System.IO.FileOptions)">
            <inheritdoc cref="M:System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.CreateSymbolicLink(System.String,System.String)">
            <inheritdoc cref="M:System.IO.File.CreateSymbolicLink(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.CreateText(System.String)">
            <inheritdoc cref="M:System.IO.File.CreateText(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.Decrypt(System.String)">
            <inheritdoc cref="M:System.IO.File.Decrypt(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.Delete(System.String)">
            <inheritdoc cref="M:System.IO.File.Delete(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.Encrypt(System.String)">
            <inheritdoc cref="M:System.IO.File.Encrypt(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.Exists(System.String)">
            <inheritdoc cref="M:System.IO.File.Exists(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.GetAttributes(System.String)">
            <inheritdoc cref="M:System.IO.File.GetAttributes(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.GetCreationTime(System.String)">
            <inheritdoc cref="M:System.IO.File.GetCreationTime(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.GetCreationTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.File.GetCreationTimeUtc(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.GetLastAccessTime(System.String)">
            <inheritdoc cref="M:System.IO.File.GetLastAccessTime(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.GetLastAccessTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.File.GetLastAccessTimeUtc(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.GetLastWriteTime(System.String)">
            <inheritdoc cref="M:System.IO.File.GetLastWriteTime(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.GetLastWriteTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.File.GetLastWriteTimeUtc(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.Move(System.String,System.String)">
            <inheritdoc cref="M:System.IO.File.Move(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.Move(System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.File.Move(System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.Open(System.String,System.IO.FileMode)">
            <inheritdoc cref="M:System.IO.File.Open(System.String,System.IO.FileMode)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <inheritdoc cref="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <inheritdoc cref="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.Open(System.String,System.IO.FileStreamOptions)">
            <inheritdoc cref="M:System.IO.File.Open(System.String,System.IO.FileStreamOptions)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.OpenHandle(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.FileOptions,System.Int64)">
            <inheritdoc cref="M:System.IO.File.OpenHandle(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.FileOptions,System.Int64)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.OpenRead(System.String)">
            <inheritdoc cref="M:System.IO.File.OpenRead(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.OpenText(System.String)">
            <inheritdoc cref="M:System.IO.File.OpenText(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.OpenWrite(System.String)">
            <inheritdoc cref="M:System.IO.File.OpenWrite(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.ReadAllBytes(System.String)">
            <inheritdoc cref="M:System.IO.File.ReadAllBytes(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.ReadAllBytesAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.ReadAllBytesAsync(System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.ReadAllLines(System.String)">
            <inheritdoc cref="M:System.IO.File.ReadAllLines(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.ReadAllLines(System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.ReadAllLines(System.String,System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.ReadAllLinesAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.ReadAllLinesAsync(System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.ReadAllLinesAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.ReadAllLinesAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.ReadAllText(System.String)">
            <inheritdoc cref="M:System.IO.File.ReadAllText(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.ReadAllText(System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.ReadAllText(System.String,System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.ReadAllTextAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.ReadAllTextAsync(System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.ReadAllTextAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.ReadAllTextAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.ReadLines(System.String)">
            <inheritdoc cref="M:System.IO.File.ReadLines(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.ReadLines(System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.ReadLines(System.String,System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.Replace(System.String,System.String,System.String)">
            <inheritdoc cref="M:System.IO.File.Replace(System.String,System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.Replace(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.File.Replace(System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.ResolveLinkTarget(System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.File.ResolveLinkTarget(System.String,System.Boolean)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.SetAttributes(System.String,System.IO.FileAttributes)">
            <inheritdoc cref="M:System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.SetCreationTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetCreationTime(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.SetCreationTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetCreationTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.SetLastAccessTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetLastAccessTime(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetLastAccessTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.SetLastWriteTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetLastWriteTime(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetLastWriteTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.WriteAllBytes(System.String,System.Byte[])">
            <inheritdoc cref="M:System.IO.File.WriteAllBytes(System.String,System.Byte[])" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.WriteAllBytesAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.WriteAllBytesAsync(System.String,System.Byte[],System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.WriteAllLines(System.String,System.String[])">
            <inheritdoc cref="M:System.IO.File.WriteAllLines(System.String,System.String[])" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.WriteAllLines(System.String,System.String[],System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.WriteAllText(System.String,System.String)">
            <inheritdoc cref="M:System.IO.File.WriteAllText(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.WriteAllTextAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.WriteAllTextAsync(System.String,System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.File.WriteAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.WriteAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
        </member>
        <member name="T:LaquaiLib.WasmServices.FileSystemProxy.FileSystemProxy">
            <summary>
            Implements the <see cref="T:LaquaiLib.WasmServices.FileSystemProxy.IFileSystemProxy"/> interface, which allows direct file system access from a Blazor WebAssembly application by proxying functionality from <see cref="N:System.IO"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.WasmServices.FileSystemProxy.FileSystemProxy.File">
            <summary>
            Gets an <see cref="T:LaquaiLib.WasmServices.FileSystemProxy.IFile"/> implementation that proxies functionality from <see cref="T:System.IO.File"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.WasmServices.FileSystemProxy.FileSystemProxy.Directory">
            <summary>
            Gets an <see cref="T:LaquaiLib.WasmServices.FileSystemProxy.IDirectory"/> implementation that proxies functionality from <see cref="T:System.IO.Directory"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.WasmServices.FileSystemProxy.FileSystemProxy.Path">
            <summary>
            Gets an <see cref="T:LaquaiLib.WasmServices.FileSystemProxy.IPath"/> implementation that proxies functionality from <see cref="T:System.IO.Path"/>.
            </summary>
        </member>
        <member name="T:LaquaiLib.WasmServices.FileSystemProxy.IDirectory">
            <summary>
            Exposes access to the <see cref="T:System.IO.Directory"/> class by proxy in a Blazor WebAssembly application.
            </summary>
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.CreateDirectory(System.String)">
            <inheritdoc cref="M:System.IO.Directory.CreateDirectory(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.CreateSymbolicLink(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.CreateSymbolicLink(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.Delete(System.String)">
            <inheritdoc cref="M:System.IO.Directory.Delete(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.Delete(System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.Directory.Delete(System.String,System.Boolean)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.EnumerateDirectories(System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateDirectories(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.EnumerateDirectories(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateDirectories(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.EnumerateDirectories(System.String,System.String,System.IO.EnumerationOptions)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.EnumerationOptions)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.EnumerateFiles(System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFiles(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.EnumerateFiles(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFiles(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.EnumerateFiles(System.String,System.String,System.IO.EnumerationOptions)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.EnumerationOptions)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.EnumerateFileSystemEntries(System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFileSystemEntries(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.EnumerateFileSystemEntries(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.EnumerateFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.Exists(System.String)">
            <inheritdoc cref="M:System.IO.Directory.Exists(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetCreationTime(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetCreationTime(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetCreationTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetCreationTimeUtc(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetCurrentDirectory">
            <inheritdoc cref="M:System.IO.Directory.GetCurrentDirectory" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetDirectories(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetDirectories(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetDirectories(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetDirectories(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetDirectories(System.String,System.String,System.IO.EnumerationOptions)">
            <inheritdoc cref="M:System.IO.Directory.GetDirectories(System.String,System.String,System.IO.EnumerationOptions)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetDirectoryRoot(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetDirectoryRoot(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetFiles(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetFiles(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetFiles(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetFiles(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetFiles(System.String,System.String,System.IO.EnumerationOptions)">
            <inheritdoc cref="M:System.IO.Directory.GetFiles(System.String,System.String,System.IO.EnumerationOptions)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetFileSystemEntries(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetFileSystemEntries(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetFileSystemEntries(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)">
            <inheritdoc cref="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetLastAccessTime(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetLastAccessTime(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetLastAccessTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetLastAccessTimeUtc(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetLastWriteTime(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetLastWriteTime(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetLastWriteTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetLastWriteTimeUtc(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetLogicalDrives">
            <inheritdoc cref="M:System.IO.Directory.GetLogicalDrives" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.GetParent(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetParent(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.Move(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.Move(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.ResolveLinkTarget(System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.Directory.ResolveLinkTarget(System.String,System.Boolean)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.SetCreationTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetCreationTime(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.SetCreationTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.SetCurrentDirectory(System.String)">
            <inheritdoc cref="M:System.IO.Directory.SetCurrentDirectory(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.SetLastAccessTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.SetLastWriteTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IDirectory.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="T:LaquaiLib.WasmServices.FileSystemProxy.IFile">
            <summary>
            Exposes access to the <see cref="T:System.IO.File"/> class by proxy in a Blazor WebAssembly application.
            </summary>
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.AppendAllText(System.String,System.String)">
            <inheritdoc cref="M:System.IO.File.AppendAllText(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.AppendAllTextAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.AppendAllTextAsync(System.String,System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.AppendAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.AppendAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.AppendText(System.String)">
            <inheritdoc cref="M:System.IO.File.AppendText(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.Copy(System.String,System.String)">
            <inheritdoc cref="M:System.IO.File.Copy(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.Copy(System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.File.Copy(System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.Create(System.String)">
            <inheritdoc cref="M:System.IO.File.Create(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.Create(System.String,System.Int32)">
            <inheritdoc cref="M:System.IO.File.Create(System.String,System.Int32)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.Create(System.String,System.Int32,System.IO.FileOptions)">
            <inheritdoc cref="M:System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.CreateSymbolicLink(System.String,System.String)">
            <inheritdoc cref="M:System.IO.File.CreateSymbolicLink(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.CreateText(System.String)">
            <inheritdoc cref="M:System.IO.File.CreateText(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.Decrypt(System.String)">
            <inheritdoc cref="M:System.IO.File.Decrypt(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.Delete(System.String)">
            <inheritdoc cref="M:System.IO.File.Delete(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.Encrypt(System.String)">
            <inheritdoc cref="M:System.IO.File.Encrypt(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.Exists(System.String)">
            <inheritdoc cref="M:System.IO.File.Exists(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.GetAttributes(System.String)">
            <inheritdoc cref="M:System.IO.File.GetAttributes(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.GetCreationTime(System.String)">
            <inheritdoc cref="M:System.IO.File.GetCreationTime(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.GetCreationTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.File.GetCreationTimeUtc(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.GetLastAccessTime(System.String)">
            <inheritdoc cref="M:System.IO.File.GetLastAccessTime(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.GetLastAccessTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.File.GetLastAccessTimeUtc(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.GetLastWriteTime(System.String)">
            <inheritdoc cref="M:System.IO.File.GetLastWriteTime(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.GetLastWriteTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.File.GetLastWriteTimeUtc(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.Move(System.String,System.String)">
            <inheritdoc cref="M:System.IO.File.Move(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.Move(System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.File.Move(System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.Open(System.String,System.IO.FileMode)">
            <inheritdoc cref="M:System.IO.File.Open(System.String,System.IO.FileMode)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <inheritdoc cref="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <inheritdoc cref="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.Open(System.String,System.IO.FileStreamOptions)">
            <inheritdoc cref="M:System.IO.File.Open(System.String,System.IO.FileStreamOptions)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.OpenHandle(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.FileOptions,System.Int64)">
            <inheritdoc cref="M:System.IO.File.OpenHandle(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.FileOptions,System.Int64)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.OpenRead(System.String)">
            <inheritdoc cref="M:System.IO.File.OpenRead(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.OpenText(System.String)">
            <inheritdoc cref="M:System.IO.File.OpenText(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.OpenWrite(System.String)">
            <inheritdoc cref="M:System.IO.File.OpenWrite(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.ReadAllBytes(System.String)">
            <inheritdoc cref="M:System.IO.File.ReadAllBytes(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.ReadAllBytesAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.ReadAllBytesAsync(System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.ReadAllLines(System.String)">
            <inheritdoc cref="M:System.IO.File.ReadAllLines(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.ReadAllLines(System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.ReadAllLines(System.String,System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.ReadAllLinesAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.ReadAllLinesAsync(System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.ReadAllLinesAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.ReadAllLinesAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.ReadAllText(System.String)">
            <inheritdoc cref="M:System.IO.File.ReadAllText(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.ReadAllText(System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.ReadAllText(System.String,System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.ReadAllTextAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.ReadAllTextAsync(System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.ReadAllTextAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.ReadAllTextAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.ReadLines(System.String)">
            <inheritdoc cref="M:System.IO.File.ReadLines(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.ReadLines(System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.ReadLines(System.String,System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.Replace(System.String,System.String,System.String)">
            <inheritdoc cref="M:System.IO.File.Replace(System.String,System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.Replace(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.File.Replace(System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.ResolveLinkTarget(System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.File.ResolveLinkTarget(System.String,System.Boolean)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.SetAttributes(System.String,System.IO.FileAttributes)">
            <inheritdoc cref="M:System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.SetCreationTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetCreationTime(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.SetCreationTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetCreationTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.SetLastAccessTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetLastAccessTime(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetLastAccessTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.SetLastWriteTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetLastWriteTime(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetLastWriteTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.WriteAllBytes(System.String,System.Byte[])">
            <inheritdoc cref="M:System.IO.File.WriteAllBytes(System.String,System.Byte[])" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.WriteAllBytesAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.WriteAllBytesAsync(System.String,System.Byte[],System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.WriteAllLines(System.String,System.String[])">
            <inheritdoc cref="M:System.IO.File.WriteAllLines(System.String,System.String[])" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.WriteAllLines(System.String,System.String[],System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.WriteAllText(System.String,System.String)">
            <inheritdoc cref="M:System.IO.File.WriteAllText(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.WriteAllTextAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.WriteAllTextAsync(System.String,System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IFile.WriteAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.WriteAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
        </member>
        <member name="T:LaquaiLib.WasmServices.FileSystemProxy.IFileSystemProxy">
            <summary>
            Exposes access to the file system by proxy in a Blazor WebAssembly application.
            </summary>
        </member>
        <member name="T:LaquaiLib.WasmServices.FileSystemProxy.IPath">
            <summary>
            Exposes access to the <see cref="T:System.IO.Path"/> class by proxy in a Blazor WebAssembly application.
            </summary>
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.ChangeExtension(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.ChangeExtension(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.Combine(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.Combine(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.Combine(System.String,System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.Combine(System.String,System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.Combine(System.String,System.String,System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.Combine(System.String,System.String,System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.Combine(System.String[])">
            <inheritdoc cref="M:System.IO.Path.Combine(System.String[])" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.EndsInDirectorySeparator(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.EndsInDirectorySeparator(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.EndsInDirectorySeparator(System.String)">
            <inheritdoc cref="M:System.IO.Path.EndsInDirectorySeparator(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.GetDirectoryName(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetDirectoryName(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.GetDirectoryName(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.GetDirectoryName(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.GetExtension(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetExtension(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.GetExtension(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.GetExtension(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.GetFileName(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetFileName(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.GetFileName(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.GetFileNameWithoutExtension(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetFileNameWithoutExtension(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.GetFileNameWithoutExtension(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.GetFileNameWithoutExtension(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.GetFullPath(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetFullPath(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.GetFullPath(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.GetFullPath(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.GetInvalidFileNameChars">
            <inheritdoc cref="M:System.IO.Path.GetInvalidFileNameChars" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.GetInvalidPathChars">
            <inheritdoc cref="M:System.IO.Path.GetInvalidPathChars" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.GetPathRoot(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetPathRoot(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.GetPathRoot(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.GetPathRoot(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.GetRandomFileName">
            <inheritdoc cref="M:System.IO.Path.GetRandomFileName" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.GetRelativePath(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.GetRelativePath(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.GetTempFileName">
            <inheritdoc cref="M:System.IO.Path.GetTempFileName" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.GetTempPath">
            <inheritdoc cref="M:System.IO.Path.GetTempPath" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.HasExtension(System.String)">
            <inheritdoc cref="M:System.IO.Path.HasExtension(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.HasExtension(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.HasExtension(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.IsPathFullyQualified(System.String)">
            <inheritdoc cref="M:System.IO.Path.IsPathFullyQualified(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.IsPathFullyQualified(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.IsPathFullyQualified(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.IsPathRooted(System.String)">
            <inheritdoc cref="M:System.IO.Path.IsPathRooted(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.IsPathRooted(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.IsPathRooted(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.Join(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.Join(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.Join(System.String,System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.Join(System.String,System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.Join(System.String,System.String,System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.Join(System.String,System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.Join(System.String[])">
            <inheritdoc cref="M:System.IO.Path.Join(System.String[])" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.TrimEndingDirectorySeparator(System.String)">
            <inheritdoc cref="M:System.IO.Path.TrimEndingDirectorySeparator(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.TrimEndingDirectorySeparator(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.TrimEndingDirectorySeparator(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
            <inheritdoc cref="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IPath.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
            <inheritdoc cref="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)" />
        </member>
        <member name="T:LaquaiLib.WasmServices.FileSystemProxy.IServiceCollectionExtensions">
            <summary>
            Provides extensions methods for types implementing <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.IServiceCollectionExtensions.AddFileSystemProxy(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <see cref="T:LaquaiLib.WasmServices.FileSystemProxy.IFileSystemProxy"/> and its dependencies to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> as singletons.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to add the <see cref="T:LaquaiLib.WasmServices.FileSystemProxy.IFileSystemProxy"/> and its dependencies to.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="T:LaquaiLib.WasmServices.FileSystemProxy.Path">
            <summary>
            Implements the <see cref="T:LaquaiLib.WasmServices.FileSystemProxy.IPath"/> interface for use in the <see cref="T:LaquaiLib.WasmServices.FileSystemProxy.IFileSystemProxy"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.ChangeExtension(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.ChangeExtension(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.Combine(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.Combine(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.Combine(System.String,System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.Combine(System.String,System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.Combine(System.String,System.String,System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.Combine(System.String,System.String,System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.Combine(System.String[])">
            <inheritdoc cref="M:System.IO.Path.Combine(System.String[])" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.EndsInDirectorySeparator(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.EndsInDirectorySeparator(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.EndsInDirectorySeparator(System.String)">
            <inheritdoc cref="M:System.IO.Path.EndsInDirectorySeparator(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.GetDirectoryName(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetDirectoryName(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.GetDirectoryName(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.GetDirectoryName(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.GetExtension(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetExtension(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.GetExtension(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.GetExtension(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.GetFileName(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetFileName(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.GetFileName(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.GetFileNameWithoutExtension(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetFileNameWithoutExtension(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.GetFileNameWithoutExtension(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.GetFileNameWithoutExtension(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.GetFullPath(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetFullPath(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.GetFullPath(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.GetFullPath(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.GetInvalidFileNameChars">
            <inheritdoc cref="M:System.IO.Path.GetInvalidFileNameChars" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.GetInvalidPathChars">
            <inheritdoc cref="M:System.IO.Path.GetInvalidPathChars" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.GetPathRoot(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetPathRoot(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.GetPathRoot(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.GetPathRoot(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.GetRandomFileName">
            <inheritdoc cref="M:System.IO.Path.GetRandomFileName" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.GetRelativePath(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.GetRelativePath(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.GetTempFileName">
            <inheritdoc cref="M:System.IO.Path.GetTempFileName" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.GetTempPath">
            <inheritdoc cref="M:System.IO.Path.GetTempPath" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.HasExtension(System.String)">
            <inheritdoc cref="M:System.IO.Path.HasExtension(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.HasExtension(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.HasExtension(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.IsPathFullyQualified(System.String)">
            <inheritdoc cref="M:System.IO.Path.IsPathFullyQualified(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.IsPathFullyQualified(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.IsPathFullyQualified(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.IsPathRooted(System.String)">
            <inheritdoc cref="M:System.IO.Path.IsPathRooted(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.IsPathRooted(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.IsPathRooted(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.Join(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.Join(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.Join(System.String,System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.Join(System.String,System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.Join(System.String,System.String,System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.Join(System.String,System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.Join(System.String[])">
            <inheritdoc cref="M:System.IO.Path.Join(System.String[])" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.TrimEndingDirectorySeparator(System.String)">
            <inheritdoc cref="M:System.IO.Path.TrimEndingDirectorySeparator(System.String)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.TrimEndingDirectorySeparator(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.Path.TrimEndingDirectorySeparator(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
            <inheritdoc cref="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)" />
        </member>
        <member name="M:LaquaiLib.WasmServices.FileSystemProxy.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
            <inheritdoc cref="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)" />
        </member>
        <member name="T:LaquaiLib.WPF.AsyncGetterWindow">
            <summary>
            Serves as a template for a window that may be used to get data from the user.
            </summary>
            <summary>
            AsyncGetterWindow
            </summary>
        </member>
        <member name="M:LaquaiLib.WPF.AsyncGetterWindow.GetValue``1(System.Object)">
            <summary>
            Transitions the window into a state where it is ready to respond to user actions and return a value.
            Calling code should call this method until it returns a non-null value OR doing so raises a <see cref="T:System.Threading.Tasks.TaskCanceledException"/> (which happens when the user has closed the window without it being marked as ready to submit a value).
            </summary>
            <typeparam name="T">The type of the value to be returned.</typeparam>
            <param name="state">Optional parameter(s) to be used by the window.</param>
        </member>
        <member name="M:LaquaiLib.WPF.AsyncGetterWindow.Button_Click">
            <summary>
            Template: Marks the window as ready to return a value, which is then returned by <see cref="M:LaquaiLib.WPF.AsyncGetterWindow.GetValue``1(System.Object)"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.WPF.AsyncGetterWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LaquaiLib.WPF.ValueConverters.BoolInverterConverter">
            <summary>
            Represents an <see cref="T:System.Windows.Data.IValueConverter"/> implementation that inverts a <see cref="T:System.Boolean"/> value.ss
            </summary>
        </member>
        <member name="M:LaquaiLib.WPF.ValueConverters.BoolInverterConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a <see cref="T:System.Boolean"/> value to its inverse.
            </summary>
            <param name="value">The input bool value.</param>
            <param name="targetType">The <see cref="T:System.Type"/> that the receiving context expects the output of this method to be of.</param>
            <param name="parameter">An additional parameter passed by the calling context. May be null.</param>
            <param name="culture">Which culture to use when converting / formatting the value.</param>
            <returns>The inverse of the input <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the input <paramref name="value"/> is not a <see cref="T:System.Boolean"/>.</exception>
        </member>
        <member name="M:LaquaiLib.WPF.ValueConverters.BoolInverterConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts an "inverse" <see cref="T:System.Boolean"/> value to its original value.
            </summary>
            <param name="value">The input bool value.</param>
            <param name="targetType">The <see cref="T:System.Type"/> that the receiving context expects the output of this method to be of.</param>
            <param name="parameter">An additional parameter passed by the calling context. May be null.</param>
            <param name="culture">Which culture to use when converting / formatting the value.</param>
            <returns>The inverse of the input <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the input <paramref name="value"/> is not a <see cref="T:System.Boolean"/>.</exception>
        </member>
        <member name="T:LaquaiLib.WPF.ValueConverters.NullToBoolConverter">
            <summary>
            Represents an <see cref="T:System.Windows.Data.IValueConverter"/> implementation that returns a <see cref="T:System.Boolean"/> value depending on whether the given input is null. Passing <see langword="true"/> as the parameter inverts the result of the conversion.
            </summary>
        </member>
        <member name="M:LaquaiLib.WPF.ValueConverters.NullToBoolConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a given <paramref name="value"/> to a <see cref="T:System.Boolean"/>.
            If <paramref name="parameter"/> is <see langword="true"/> or the string "true", the result of the conversion is precisely <c>value is not <see langword="null"/></c>, otherwise it is precisely <c>value is <see langword="null"/></c>.
            </summary>
            <param name="value">The input value.</param>
            <param name="targetType">The <see cref="T:System.Type"/> that the receiving context expects the output of this method to be of.</param>
            <param name="parameter">An additional parameter that, when equal to <see langword="true"/>, inverts the result of the conversion.</param>
            <param name="culture">Which culture to use when converting / formatting the value.</param>
            <returns><see langword="true"/> if the given input <paramref name="value"/> is not null, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.WPF.ValueConverters.NullToBoolConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            [Unsupported] Converts a previously converted <paramref name="value"/> back to its original value. This method unconditionally throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">The input value.</param>
            <param name="targetType">The <see cref="T:System.Type"/> that the receiving context expects the output of this method to be of.</param>
            <param name="parameter">An additional parameter passed by the calling context. May be null.</param>
            <param name="culture">Which culture to use when converting / formatting the value.</param>
            <returns><see langword="true"/> if the given input <paramref name="value"/> is not null, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Wrappers.TempAlloc">
            <summary>
            Represents a temporarily allocated region of unmanaged memory that is automatically freed when its wrapper object is disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.#ctor(System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> with the given size as represented by a 32-bit integer.
            </summary>
            <param name="bytes">The amount of bytes to allocate.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.#ctor(System.Int32,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> with the given size as represented by a 32-bit integer, optionally clearing any previous data.
            </summary>
            <param name="bytes">The amount of bytes to allocate.</param>
            <param name="clear">A value indicating whether any previous data in the allocated memory region should be cleared.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> as a wrapper around existing allocated memory.
            </summary>
            <param name="address">The address to the memory region to wrap with this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/>.</param>
            <param name="size">The size of the memory region at <paramref name="address"/>.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.#ctor(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> as a wrapper around existing allocated memory.
            </summary>
            <param name="address">The address to the memory region to wrap with this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/>.</param>
            <param name="size">The size of the memory region at <paramref name="address"/>.</param>
            <param name="clear">A value indicating whether any previous data in the allocated memory region should be cleared.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Create``1">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> that can accomodate exactly one instance of the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to allocate memory for.</typeparam>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Create``1(System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> that can accomodate exactly one instance of the given <see cref="T:System.Type"/>, optionally clearing any previous data.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to allocate memory for.</typeparam>
            <param name="clear">A value indicating whether any previous data in the allocated memory region should be cleared.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Create``1(System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> that can accomodate exactly <paramref name="count"/> instances of the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to allocate memory for.</typeparam>
            <param name="count">The amount of <typeparamref name="T"/> instances to allocate memory for.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Create``1(System.Int32,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> that can accomodate exactly <paramref name="count"/> instances of the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to allocate memory for.</typeparam>
            <param name="count">The amount of <typeparamref name="T"/> instances to allocate memory for.</param>
            <param name="clear">A value indicating whether any previous data in the allocated memory region should be cleared.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Create``1(``0)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> for the
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the <paramref name="value"/> to allocate memory for.</typeparam>
            <param name="value">A value of type <typeparamref name="T"/> to allocate memory for. The existing value is copied to the newly allocated memory region.</param>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempAlloc.Item(System.Index)">
            <summary>
            Retrieves a pointer to the byte at the given <paramref name="index"/> in the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps.
            </summary>
            <param name="index">An <see cref="T:System.Index"/> that represents the index of the byte to retrieve.</param>
            <returns>A pointer to the byte at the given <paramref name="index"/>.</returns>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempAlloc.Item(System.Range)">
            <summary>
            Constructs a <see cref="T:System.Span`1"/> of <see cref="T:System.Byte"/> sliced to the specified <paramref name="range"/> in the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps.
            </summary>
            <param name="range">A <see cref="T:System.Range"/> that represents the range of bytes to retrieve.</param>
            <returns>The created <see cref="T:System.Span`1"/> of <see cref="T:System.Byte"/> slice.</returns>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempAlloc.Item(System.Int32,System.Int32)">
            <summary>
            Constructs a <see cref="T:System.Span`1"/> of <see cref="T:System.Byte"/> sliced to the specified range in the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps.
            </summary>
            <param name="start">The start index of the slice.</param>
            <param name="length">The length of the slice.</param>
            <returns>The created <see cref="T:System.Span`1"/> of <see cref="T:System.Byte"/> slice.</returns>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempAlloc.Address">
            <summary>
            The address of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.GetPointer">
            <summary>
            Returns the address of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps as a pointer to an unspecified type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.GetPointer``1">
            <summary>
            Returns the address of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps as a pointer to an instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The unmanaged <see cref="T:System.Type"/> to cast the pointer to.</typeparam>
            <returns>The pointer as specified.</returns>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempAlloc.Size">
            <summary>
            The size of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps in bytes.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempAlloc.Bits">
            <summary>
            The size of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps in bits.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempAlloc.Data">
            <summary>
            A <see cref="T:System.Span`1"/> of <see cref="T:System.Byte"/> that represents the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempAlloc.IsDisposed">
            <summary>
            Whether this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> has been disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Reallocate(System.Int32)">
            <summary>
            Resizes the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps.
            </summary>
            <param name="bytes">The new size of the memory region in bytes.</param>
            <returns>A value indicating whether the <see cref="P:LaquaiLib.Wrappers.TempAlloc.Address"/> of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps has changed. If <see langword="true"/>, reading from any previous addresses is considered undefined behavior.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.As``1">
            <summary>
            Attempts to cast the contents of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps to an instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to cast the contents of the memory region to.</typeparam>
            <returns>The entire contents of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps as an instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.As``1(System.Int32,System.Int32)">
            <summary>
            Attempts to cast the content of a slice of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps to an instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to cast the contents of the memory region to.</typeparam>
            <param name="offset">The offset at which to start the slice.</param>
            <param name="length">The length of the slice.</param>
            <returns>The contents of the slice of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps as an instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Clear">
            <summary>
            Clears the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps (sets all bytes to zero).
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Replace(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Searches for the first occurrence of a given <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Byte"/> in the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps and replaces it with memory represented by another <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Byte"/>.
            </summary>
            <param name="search">The sequence of bytes to find in <see cref="P:LaquaiLib.Wrappers.TempAlloc.Data"/>.</param>
            <param name="replacement">The sequence of bytes to replace the first occurrence of <paramref name="search"/> with. The length of this sequence need not be equal to the length of the <paramref name="search"/> sequence.</param>
            <param name="shift">Whether to shift the bytes to the right of the replacement after it has been made.
            <para/><list type="bullet">
            <item/>If <c><paramref name="replacement"/>.Length &gt; <paramref name="search"/>.Length</c>, <list type="bullet">
                <item/>and <c><paramref name="shift"/></c>, the bytes that would be overwritten by the <paramref name="replacement"/> are shifted right to fully accomodate the replacement.
                <item/>and <c>!<paramref name="shift"/></c>, the <paramref name="replacement"/> bytes overwrite any bytes after <paramref name="search"/>.
            </list>
            <item/>If <c><paramref name="replacement"/>.Length &lt; <paramref name="search"/>.Length</c>, <list type="bullet">
                <item/>and <c><paramref name="shift"/></c>, the bytes remaining in the space of <paramref name="search"/> after the replacement is made are discarded and the bytes to the right of it are shifted left to fill the space. The size of the memory region is decreased by <c>(<paramref name="search"/>.Length - <paramref name="replacement"/>.Length)</c>.
                <item/>and <c>!<paramref name="shift"/></c>, the bytes remaining in the space of <paramref name="search"/> after the replacement is made are left untouched. The size of the memory region does not change.
            </list>
            </list>
            </param>
            <returns>A value that indicates whether a replacement was made.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.ReplaceAll(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Searches for all occurrences of a given <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Byte"/> in the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps and replaces them with memory represented by another <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Byte"/>.
            </summary>
            <param name="search">The sequence of bytes to find in <see cref="P:LaquaiLib.Wrappers.TempAlloc.Data"/>.</param>
            <param name="replacement">The sequence of bytes to replace the occurrences of <paramref name="search"/> with. The length of this sequence need not be equal to the length of the <paramref name="search"/> sequence.</param>
            <param name="shift">Whether to shift the bytes to the right of the replacement after it has been made.
            <para/><list type="bullet">
            <item/>If <c><paramref name="replacement"/>.Length &gt; <paramref name="search"/>.Length</c>, <list type="bullet">
                <item/>and <c><paramref name="shift"/></c>, the bytes that would be overwritten by the <paramref name="replacement"/> are shifted right to fully accomodate the replacement.
                <item/>and <c>!<paramref name="shift"/></c>, the <paramref name="replacement"/> bytes overwrite any bytes after <paramref name="search"/>.
            </list>
            <item/>If <c><paramref name="replacement"/>.Length &lt; <paramref name="search"/>.Length</c>, <list type="bullet">
                <item/>and <c><paramref name="shift"/></c>, the bytes remaining in the space of <paramref name="search"/> after the replacement is made are discarded and the bytes to the right of it are shifted left to fill the space. The size of the memory region is decreased by <c>(<paramref name="search"/>.Length - <paramref name="replacement"/>.Length)</c>.
                <item/>and <c>!<paramref name="shift"/></c>, the bytes remaining in the space of <paramref name="search"/> after the replacement is made are left untouched. The size of the memory region does not change.
            </list>
            </list>
            </param>
            <returns>The number of replacements made.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.ToHexString">
            <summary>
            Serializes the contents of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps to a <see cref="T:System.String"/> of hexadecimal characters, grouped into 4-byte words.
            </summary>
            <returns>The string as described.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.ToBinaryString">
            <summary>
            Serializes the contents of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps to a <see cref="T:System.String"/> of binary characters, grouped into 32-bit words.
            </summary>
            <returns>The string as described.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Finalize">
            <summary>
            Finalizes this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.DisposeSecure">
            <summary>
            In addition to performing application-defined tasks associated with freeing, releasing, or resetting unmanaged resources, clears the entire contents of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps (sets all bytes to zero).
            </summary>
        </member>
        <member name="T:LaquaiLib.Wrappers.TempArray`1">
            <summary>
            Represents a temporary array of <typeparamref name="T"/> that is automatically cleared from memory when its wrapper object is disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> with the given size. It is automatically rented from and returned to <see cref="P:System.Buffers.ArrayPool`1.Shared"/> upon disposal of this <see cref="T:LaquaiLib.Wrappers.TempArray`1"/>, unless <see langword="false"/> is explicitly passed for <paramref name="allowPooledArray"/>.
            </summary>
            <param name="capacity">The capacity of the array to create.</param>
            <param name="allowPooledArray">Whether to allow the array to be rented from <see cref="P:System.Buffers.ArrayPool`1.Shared"/>. If <see langword="false"/>, a new array will be created instead.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.#ctor(`0[],System.Buffers.ArrayPool{`0})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> as a wrapper around the specified array of <typeparamref name="T"/>.
            </summary>
            <param name="array">The array of <typeparamref name="T"/> to wrap with this <see cref="T:LaquaiLib.Wrappers.TempArray`1"/>.</param>
            <param name="arrayPool">The <see cref="T:System.Buffers.ArrayPool`1"/> to return the array to when this <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> is disposed. May be <see langword="null"/> to indicate that the passed <paramref name="array"/> is not from any <see cref="T:System.Buffers.ArrayPool`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.#ctor(`0,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> with the given <paramref name="size"/> and initializes all elements with the given <paramref name="value"/>.
            </summary>
            <param name="value">The value to initialize all elements with.</param>
            <param name="size">The size of the array to create.</param>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempArray`1.Array">
            <summary>
            The array of <typeparamref name="T"/> this <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> wraps.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempArray`1.IsDisposed">
            <summary>
            Whether this <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> has been disposed.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempArray`1.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempArray`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempArray`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempArray`1.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempArray`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempArray`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.Equals(System.Object,System.Collections.IEqualityComparer)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.GetHashCode(System.Collections.IEqualityComparer)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.CompareTo(System.Object,System.Collections.IComparer)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.Add(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.IndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.Insert(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.CopyTo(LaquaiLib.Wrappers.TempArray{`0},System.Int32)">
            <summary>
            Copies the elements of this <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> to another <see cref="T:LaquaiLib.Wrappers.TempArray`1"/>, starting at a particular index.
            </summary>
            <param name="tempArray">The <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> that is the destination of the elements copied from this <see cref="T:LaquaiLib.Wrappers.TempArray`1"/>.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="tempArray"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="tempArray"/> is multi-dimensional, the number of elements in this <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> is greater than the available space from <paramref name="index"/> to the end of the destination <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> or the type of the source <see cref="T:LaquaiLib.Wrappers.TempArray`1"/> cannot be cast automatically to the type of the destination <see cref="T:LaquaiLib.Wrappers.TempArray`1"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.Clone">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.Finalize">
            <summary>
            Finalizes this <see cref="T:LaquaiLib.Wrappers.TempArray`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempArray`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Wrappers.TempDirectory">
            <summary>
            Represents a temporary directory that is automatically deleted when its wrapper object is disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempDirectory.#ctor">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempDirectory"/> with a fully random name.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempDirectory.#ctor(System.String)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempDirectory"/> as a wrapper around the specified directory. If the target directory does not exist, it is created. A deletion attempt is still made when the wrapping <see cref="T:LaquaiLib.Wrappers.TempDirectory"/> is disposed.
            </summary>
            <param name="path">The path to the directory to wrap with this <see cref="T:LaquaiLib.Wrappers.TempDirectory"/>.</param>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempDirectory.Path">
            <summary>
            The path to the file this <see cref="T:LaquaiLib.Wrappers.TempDirectory"/> wraps.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempDirectory.IsDisposed">
            <summary>
            Whether this <see cref="T:LaquaiLib.Wrappers.TempDirectory"/> has been disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempDirectory.Finalize">
            <summary>
            Finalizes this <see cref="T:LaquaiLib.Wrappers.TempDirectory"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempDirectory.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Wrappers.TempFile">
            <summary>
            Represents a temporary file that is automatically deleted when its wrapper object is disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempFile.#ctor">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempFile"/> with the file name and extension being assigned by the OS. It is usually a <see cref="T:System.Guid"/> with the extension <c>.tmp</c>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempFile.#ctor(System.String)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempFile"/> with the file name being assigned by the OS (it is usually a <see cref="T:System.Guid"/>), and changes its extension to the one specified.
            </summary>
            <param name="fileExtension">The file extension for this <see cref="T:LaquaiLib.Wrappers.TempFile"/>.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempFile.#ctor(System.String,System.String)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempFile"/> as a wrapper around the specified file path. If the target file does not exist, it is created. A deletion attempt is still made when the wrapping <see cref="T:LaquaiLib.Wrappers.TempFile"/> is disposed.
            </summary>
            <param name="path">The path to the file to wrap with this <see cref="T:LaquaiLib.Wrappers.TempFile"/>.</param>
            <param name="fileExtension">The file extension for this <see cref="T:LaquaiLib.Wrappers.TempFile"/>. This is the extension <paramref name="path"/> is changed to before opening the file stream. If <see langword="null"/> or white space, the existing extension in <paramref name="path"/> is kept.</param>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempFile.Path">
            <summary>
            The path to the file this <see cref="T:LaquaiLib.Wrappers.TempFile"/> wraps.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempFile.Stream">
            <summary>
            The <see cref="T:System.IO.FileStream"/> for the file this <see cref="T:LaquaiLib.Wrappers.TempFile"/> wraps.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempFile.IsDisposed">
            <summary>
            Whether this <see cref="T:LaquaiLib.Wrappers.TempFile"/> has been disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempFile.Finalize">
            <summary>
            Finalizes this <see cref="T:LaquaiLib.Wrappers.TempFile"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempFile.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Wrappers.TempObject`1">
            <summary>
            Represents a temporary instance of type <typeparamref name="T"/> that is automatically cleared from memory when its wrapper object is disposed.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempObject`1.Value">
            <summary>
            The instance of <typeparamref name="T"/> wrapped by this <see cref="T:LaquaiLib.Wrappers.TempObject`1"/> instance.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempObject`1.#ctor(System.Object[])">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.TempObject`1"/>.
            </summary>
            <param name="parameters">The parameters to use to find a constructor for <typeparamref name="T"/>. If <see langword="null"/> or <c>0</c>-length, the parameterless constructor is used.</param>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempObject`1.IsDisposed">
            <summary>
            Whether this <see cref="T:LaquaiLib.Wrappers.TempObject`1"/> has been disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempObject`1.Finalize">
            <summary>
            Finalizes this <see cref="T:LaquaiLib.Wrappers.TempObject`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempObject`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Wrappers.GCHandle`1">
            <summary>
            Provides a way to access a managed instance of <typeparamref name="T"/> from unmanaged memory.
            </summary>
            <typeparam name="T">The type of the object to be referenced.</typeparam>
        </member>
        <member name="P:LaquaiLib.Wrappers.GCHandle`1.Handle">
            <summary>
            The wrapped untyped <see cref="T:System.Runtime.InteropServices.GCHandle"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.GCHandle`1.Target">
            <summary>
            Gets the object of type <typeparamref name="T"/> this <see cref="T:LaquaiLib.Wrappers.GCHandle`1"/> represents.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if the handle has been disposed.</exception>
        </member>
        <member name="P:LaquaiLib.Wrappers.GCHandle`1.IsAllocated">
            <inheritdoc cref="P:System.Runtime.InteropServices.GCHandle.IsAllocated"/>
        </member>
        <member name="M:LaquaiLib.Wrappers.GCHandle`1.#ctor(`0)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.GCHandle`1"/> that represents the specified instance of <typeparamref name="T"/>.
            </summary>
            <param name="value">The object to be referenced.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.GCHandle`1.#ctor(`0,System.Runtime.InteropServices.GCHandleType)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.GCHandle`1"/> that represents the specified instance of <typeparamref name="T"/>.
            </summary>
            <param name="value">The object to be referenced.</param>
            <param name="type">The <see cref="T:System.Runtime.InteropServices.GCHandleType"/> of the object to be referenced.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.GCHandle`1.#ctor(System.Nullable{System.IntPtr})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.GCHandle`1"/> from a handle to a managed object.
            </summary>
            <param name="ptr">The handle to a managed object.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.GCHandle`1.#ctor(System.Runtime.InteropServices.GCHandle)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Wrappers.GCHandle`1"/> typed <typeparamref name="T"/> from an existing untyped handle to a managed object.
            </summary>
            <param name="handle">The existing untyped handle to a managed object.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.GCHandle`1.AddrOfPinnedObject(LaquaiLib.Wrappers.GCHandle{`0})">
            <inheritdoc cref="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject"/>
        </member>
        <member name="M:LaquaiLib.Wrappers.GCHandle`1.op_Implicit(LaquaiLib.Wrappers.GCHandle{`0})~System.Runtime.InteropServices.GCHandle">
            <summary>
            Returns the untyped <see cref="T:System.Runtime.InteropServices.GCHandle"/> a typed <see cref="T:LaquaiLib.Wrappers.GCHandle`1"/> represents.
            </summary>
            <param name="handle">The <see cref="T:LaquaiLib.Wrappers.GCHandle`1"/> to convert.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.GCHandle`1.op_Equality(LaquaiLib.Wrappers.GCHandle{`0},LaquaiLib.Wrappers.GCHandle{`0})">
            <summary>
            Returns a value indicating whether two typed <see cref="T:LaquaiLib.Wrappers.GCHandle`1"/> instances are equal.
            </summary>
            <param name="left">The first <see cref="T:LaquaiLib.Wrappers.GCHandle`1"/> to compare.</param>
            <param name="right">The second <see cref="T:LaquaiLib.Wrappers.GCHandle`1"/> to compare.</param>
            <returns><see langword="true"/> if <paramref name="left"/> and <paramref name="right"/> are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.GCHandle`1.op_Inequality(LaquaiLib.Wrappers.GCHandle{`0},LaquaiLib.Wrappers.GCHandle{`0})">
            <summary>
            Returns a value indicating whether two typed <see cref="T:LaquaiLib.Wrappers.GCHandle`1"/> instances are unequal.
            </summary>
            <param name="left">The first <see cref="T:LaquaiLib.Wrappers.GCHandle`1"/> to compare.</param>
            <param name="right">The second <see cref="T:LaquaiLib.Wrappers.GCHandle`1"/> to compare.</param>
            <returns><see langword="true"/> if <paramref name="left"/> and <paramref name="right"/> are unequal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.GCHandle`1.op_Explicit(LaquaiLib.Wrappers.GCHandle{`0})~System.IntPtr">
            <summary>
            Returns the internal integer representation of the wrapped <see cref="P:LaquaiLib.Wrappers.GCHandle`1.Handle"/>.
            </summary>
            <param name="handle">The <see cref="T:LaquaiLib.Wrappers.GCHandle`1"/> to convert.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.GCHandle`1.op_Explicit(LaquaiLib.Wrappers.GCHandle{`0})~System.Nullable{System.IntPtr}">
            <summary>
            Returns the internal integer representation of the wrapped <see cref="P:LaquaiLib.Wrappers.GCHandle`1.Handle"/>.
            </summary>
            <param name="handle">The <see cref="T:LaquaiLib.Wrappers.GCHandle`1"/> to convert.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.GCHandle`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.GCHandle`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.GCHandle`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.GCHandle`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged and optionally the managed resources used by this <see cref="T:LaquaiLib.Wrappers.GCHandle`1"/> instance.
            </summary>
            <param name="disposing">Whether to release the managed resources used by this <see cref="T:LaquaiLib.Wrappers.GCHandle`1"/> instance.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.GCHandle`1.Dispose">
            <summary>
            Releases the managed and unmanaged resources used by this <see cref="T:LaquaiLib.Wrappers.GCHandle`1"/> instance.
            </summary>
        </member>
        <member name="T:ValueReadEventArgs`1">
            <summary>
            Provides data for the <see cref="E:LaquaiLib.Util.ObservableValue`1.PropertyRead"/> event.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="P:ValueReadEventArgs`1.Value">
            <summary>
            The value the reader received.
            </summary>
        </member>
        <member name="M:ValueReadEventArgs`1.#ctor(`0)">
            <summary>
            Instantiates new <see cref="T:ValueReadEventArgs`1"/> with the given value.
            </summary>
            <param name="value">The value the reader received.</param>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FuncSignatureRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the FuncSignatureRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.FuncSignatureRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FuncSignatureRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FuncSignatureRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FuncSignatureRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FuncSignatureRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FuncSignatureRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FuncSignatureRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FuncSignatureRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GetSimilarityCleanerRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the GetSimilarityCleanerRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.GetSimilarityCleanerRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetSimilarityCleanerRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GetSimilarityCleanerRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetSimilarityCleanerRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GetSimilarityCleanerRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetSimilarityCleanerRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetSimilarityCleanerRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EntryPointNotFoundExceptionDataRegex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the EntryPointNotFoundExceptionDataRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.EntryPointNotFoundExceptionDataRegex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EntryPointNotFoundExceptionDataRegex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EntryPointNotFoundExceptionDataRegex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EntryPointNotFoundExceptionDataRegex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EntryPointNotFoundExceptionDataRegex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EntryPointNotFoundExceptionDataRegex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EntryPointNotFoundExceptionDataRegex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EntryPointNotFoundExceptionDataRegex_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPop(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>Pops 2 values from the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32)">
            <summary>Pushes 1 value onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_indexOfString_9AECF8F40FCAE66893A90E32FA07EAB795AF3C1A6B65AF92E89697BAED9D8C93">
            <summary>Supports searching for the string "Unable to find an entry point named '".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_nonAscii_50A2FEBC473A6B0B5F0FE032BEE21E08D03E2A7E307FCFCA8245C63F441BF02F">
            <summary>Supports searching for characters in or not in " ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿİŸKÅ".</summary>
        </member>
    </members>
</doc>
