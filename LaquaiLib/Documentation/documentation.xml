<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LaquaiLib</name>
    </assembly>
    <members>
        <member name="T:LaquaiLib.Classes.ConsoleQueue">
            <summary>
            Represents a (thread-safe) wrapper around the <see cref="T:System.Console"/>. It is used to postpone blocking console output until after any expensive computations are completed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Classes.ConsoleQueue.ConsoleLock">
            <summary>
            The <see cref="T:System.Object"/> used to lock when attempting to write to the <see cref="T:System.Console"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.ConsoleQueue.Enqueue(System.Object)">
            <summary>
            Adds an object to the end of the internal queue.
            </summary>
            <param name="obj">The object to eventually output to the <see cref="T:System.Console"/>.</param>
            <returns>The index of the position in the internal queue at which <paramref name="obj"/> is.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.ConsoleQueue.Flush">
            <summary>
            Flushes all contents of the internal queue into the <see cref="T:System.Console"/>. This operation blocks until all objects in the internal queue have been output.
            </summary>
            <returns>The number of objects written to the <see cref="T:System.Console"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Classes.ObservableCollectionFast`1">
            <summary>
            Represents a fast implementation of a dynamic data collection that provides notifications when items get added, removed, or when the whole list is refreshed.
            </summary>
            <typeparam name="T">The Type of the elements in the collection.</typeparam>
        </member>
        <member name="M:LaquaiLib.Classes.ObservableCollectionFast`1.#ctor">
            <summary>
            Instantiates a new <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.ObservableCollectionFast`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Instantiates a new <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection from which the elements are copied.</param>
        </member>
        <member name="M:LaquaiLib.Classes.ObservableCollectionFast`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Instantiates a new <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> that contains elements copied from the specified list.
            </summary>
            <param name="list">The list from which the elements are copied.</param>
        </member>
        <member name="M:LaquaiLib.Classes.ObservableCollectionFast`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
        </member>
        <member name="T:LaquaiLib.Classes.Collections.Concurrent.LimitedConcurrentQueue`1">
            <summary>
            Represents a <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> with a maximum number of items allowed in it. When the collection is at capacity and it is attempted to enqueue another object, the oldest is removed.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
        </member>
        <member name="P:LaquaiLib.Classes.Collections.Concurrent.LimitedConcurrentQueue`1.Capacity">
            <summary>
            The capacity of this <see cref="T:LaquaiLib.Classes.Collections.Concurrent.LimitedConcurrentQueue`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.Concurrent.LimitedConcurrentQueue`1.#ctor">
            <summary>
            Instantiates a new empty <see cref="T:LaquaiLib.Classes.Collections.Concurrent.LimitedConcurrentQueue`1"/> with the default maximum capacity.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.Concurrent.LimitedConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Classes.Collections.Concurrent.LimitedConcurrentQueue`1"/> with the items from the passed <paramref name="collection"/>. Its maximum capacity is set to <paramref name="collection"/>'s length.
            </summary>
            <param name="collection">The collection to copy the new <see cref="T:LaquaiLib.Classes.Collections.Concurrent.LimitedConcurrentQueue`1"/>'s items from.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.Concurrent.LimitedConcurrentQueue`1.#ctor(System.Int32)">
            <summary>
            Instantiates a new empty <see cref="T:LaquaiLib.Classes.Collections.Concurrent.LimitedConcurrentQueue`1"/> with the given maximum <paramref name="capacity"/>.
            </summary>
            <param name="capacity">The maximum number of items this <see cref="T:LaquaiLib.Classes.Collections.Concurrent.LimitedConcurrentQueue`1"/> can hold before discarding the oldest value.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.Concurrent.LimitedConcurrentQueue`1.Enqueue(`0)">
            <summary>
            Forcibly adds an item to the end of the <see cref="T:LaquaiLib.Classes.Collections.Concurrent.LimitedConcurrentQueue`1"/>, discarding the oldest item if the collection is at maximum capacity.
            </summary>
            <param name="item">The item to add to the <see cref="T:LaquaiLib.Classes.Collections.Concurrent.LimitedConcurrentQueue`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.Concurrent.LimitedConcurrentQueue`1.TryEnqueue(`0)">
            <summary>
            Attempts to add an item to the end of the <see cref="T:LaquaiLib.Classes.Collections.Concurrent.LimitedConcurrentQueue`1"/>. If this would cause the oldest item to be discarded because the collection is at capacity, the collection remains unchanged.
            </summary>
            <param name="item">The object to add to the <see cref="T:LaquaiLib.Classes.Collections.Concurrent.LimitedConcurrentQueue`1"/>.</param>
            <returns>A value indicating whether the collection was modified; <c>true</c> if <paramref name="item"/> could be added, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.Concurrent.LimitedConcurrentQueue`1.Reduce(System.Int32)">
            <summary>
            Removes items from the <see cref="T:LaquaiLib.Classes.Collections.Concurrent.LimitedConcurrentQueue`1"/>, discarding the oldest items until the passed <paramref name="length"/> is reached.
            </summary>
            <param name="length">The number of items to remain in the collection.</param>
        </member>
        <member name="T:LaquaiLib.Classes.Collections.LimitedQueue`1">
            <summary>
            Represents a <see cref="T:System.Collections.Generic.Queue`1"/> with a maximum number of items allowed in it. When the collection is at capacity and it is attempted to enqueue another object, the oldest is removed.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
        </member>
        <member name="P:LaquaiLib.Classes.Collections.LimitedQueue`1.Capacity">
            <summary>
            The capacity of this <see cref="T:LaquaiLib.Classes.Collections.LimitedQueue`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.LimitedQueue`1.#ctor">
            <summary>
            Instantiates a new empty <see cref="T:LaquaiLib.Classes.Collections.LimitedQueue`1"/> with the default maximum capacity.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.LimitedQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Classes.Collections.LimitedQueue`1"/> with the items from the passed <paramref name="collection"/>. Its maximum capacity is set to <paramref name="collection"/>'s length.
            </summary>
            <param name="collection">The collection to copy the new <see cref="T:LaquaiLib.Classes.Collections.LimitedQueue`1"/>'s items from.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.LimitedQueue`1.#ctor(System.Int32)">
            <summary>
            Instantiates a new empty <see cref="T:LaquaiLib.Classes.Collections.LimitedQueue`1"/> with the given maximum <paramref name="capacity"/>.
            </summary>
            <param name="capacity">The maximum number of items this <see cref="T:LaquaiLib.Classes.Collections.LimitedQueue`1"/> can hold before discarding the oldest value.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.LimitedQueue`1.Enqueue(`0)">
            <summary>
            Forcibly adds an item to the end of the <see cref="T:LaquaiLib.Classes.Collections.LimitedQueue`1"/>, discarding the oldest item if the collection is at maximum capacity.
            </summary>
            <param name="item">The item to add to the <see cref="T:LaquaiLib.Classes.Collections.LimitedQueue`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.LimitedQueue`1.TryEnqueue(`0)">
            <summary>
            Attempts to add an item to the end of the <see cref="T:LaquaiLib.Classes.Collections.LimitedQueue`1"/>. If this would cause the oldest item to be discarded because the collection is at capacity, the collection remains unchanged.
            </summary>
            <param name="item">The object to add to the <see cref="T:LaquaiLib.Classes.Collections.LimitedQueue`1"/>.</param>
            <returns>A value indicating whether the collection was modified; <c>true</c> if <paramref name="item"/> could be added, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.Collections.LimitedQueue`1.Reduce(System.Int32)">
            <summary>
            Removes items from the <see cref="T:LaquaiLib.Classes.Collections.LimitedQueue`1"/>, discarding the oldest items until the passed <paramref name="length"/> is reached.
            </summary>
            <param name="length">The number of items to remain in the collection.</param>
        </member>
        <member name="T:LaquaiLib.Classes.TaskbarProgress">
            <summary>
            Represents a handler for a progress display on the current window's taskbar icon.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.TaskbarProgress.#ctor(System.Windows.Window)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Classes.TaskbarProgress"/> with reference to a specified <paramref name="window"/>.
            </summary>
            <param name="window">The <see cref="T:System.Windows.Window"/> the taskbar icon of which is to display progress.</param>
        </member>
        <member name="M:LaquaiLib.Classes.TaskbarProgress.GetInstance(System.Windows.Window)">
            <summary>
            Creates or directly returns an existing instance of <see cref="T:LaquaiLib.Classes.TaskbarProgress"/> with reference to a specified <paramref name="window"/>.
            </summary>
            <remarks>
            The application calling this method or using its return value must own the specified <paramref name="window"/>.
            </remarks>
            <param name="window">The <see cref="T:System.Windows.Window"/> the taskbar icon of which is to display progress.</param>
            <returns>A <see cref="T:LaquaiLib.Classes.TaskbarProgress"/> instance.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.TaskbarProgress.GetInstance(System.IntPtr)">
            <summary>
            Creates or directly returns an existing instance of <see cref="T:LaquaiLib.Classes.TaskbarProgress"/> with reference to a <see cref="T:System.Windows.Window"/> identified by its <paramref name="pointer"/>.
            </summary>
            <remarks>
            The application calling this method or using its return value must own the <see cref="T:System.Windows.Window"/> pointed to by <paramref name="pointer"/>.
            </remarks>
            <param name="pointer">The pointer to the <see cref="T:System.Windows.Window"/> the taskbar icon of which is to display progress.</param>
            <returns>A <see cref="T:LaquaiLib.Classes.TaskbarProgress"/> instance.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.TaskbarProgress.GetInstance">
            <summary>
            Creates or directly returns an existing instance of <see cref="T:LaquaiLib.Classes.TaskbarProgress"/> with reference to the <see cref="T:System.Windows.Window"/> of the calling process.
            </summary>
            <returns>A <see cref="T:LaquaiLib.Classes.TaskbarProgress"/> instance.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the calling context's window handle was 0. Usually occurs when this method is called from a non-WPF context.</exception>
        </member>
        <member name="M:LaquaiLib.Classes.TaskbarProgress.ResetInstance">
            <summary>
            Resets the state of the taskbar progress bar and the <see cref="T:LaquaiLib.Classes.TaskbarProgress"/> instance that is kept internally. Only one <see cref="T:LaquaiLib.Classes.TaskbarProgress"/> instance may exist at a time.
            </summary>
        </member>
        <member name="M:LaquaiLib.Classes.TaskbarProgress.SetState(System.Windows.Shell.TaskbarItemProgressState)">
            <summary>
            Sets the state of the taskbar progress visual.
            </summary>
            <param name="state">The new state of the taskbar progress visual.</param>
            <returns>The value of the <see cref="P:System.Windows.Shell.TaskbarItemInfo.ProgressState"/> property after the attempted set operation.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.TaskbarProgress.SetValue(System.Int32)">
            <summary>
            Sets a new value for the taskbar progress bar.
            </summary>
            <param name="percent">The new value for the taskbar progress bar. Must be between 0 and 100. Values outside this range are clamped.</param>
            <returns>The value of the <see cref="P:System.Windows.Shell.TaskbarItemInfo.ProgressValue"/> property after the attempted set operation.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.TaskbarProgress.SetValue(System.Double)">
            <summary>
            Sets a new value for the taskbar progress bar.
            </summary>
            <param name="value">The new value for the taskbar progress bar. Must be between 0 and 1. Values outside this range are clamped.</param>
            <returns>The value of the <see cref="P:System.Windows.Shell.TaskbarItemInfo.ProgressValue"/> property after the attempted set operation.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.TaskbarProgress.IncreaseValue(System.Double)">
            <summary>
            Increases the value of the taskbar progress bar by a specified amount.
            </summary>
            <param name="value">The amount to increase the value of the taskbar progress bar by. If the given value would cause the progress bar's value to fall outside range (0-1), the value is clamped.</param>
            <returns>The value of the <see cref="P:System.Windows.Shell.TaskbarItemInfo.ProgressValue"/> property after the attempted set operation.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.TaskbarProgress.DecreaseValue(System.Double)">
            <summary>
            Decreases the value of the taskbar progress bar by a specified amount.
            </summary>
            <param name="value">The amount to decrease the value of the taskbar progress bar by. If the given value would cause the progress bar's value to fall outside range (0-1), the value is clamped.</param>
            <returns>The value of the <see cref="P:System.Windows.Shell.TaskbarItemInfo.ProgressValue"/> property after the attempted set operation.</returns>
        </member>
        <member name="M:LaquaiLib.Classes.TaskbarProgress.AnimateToValueAsync(System.Double,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Animates towards a specified progress <paramref name="value"/> within a specified <paramref name="timeSpan"/>. Must be called from the UI thread or the <see cref="T:System.Windows.Threading.Dispatcher"/> of your main <see cref="T:System.Windows.Window"/>, otherwise the animation will not work.
            </summary>
            <param name="value">The value to animate progress towards.</param>
            <param name="timeSpan">The amount of time for the animation to take in milliseconds. It may not be possible to obey this in all cases.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that is monitored for cancellation requests.</param>
        </member>
        <member name="M:LaquaiLib.Classes.TaskbarProgress.GetValue">
            <summary>
            Gets the current value of the taskbar progress bar.
            </summary>
            <returns>The current value of the taskbar progress bar.</returns>
        </member>
        <member name="T:LaquaiLib.ScreenCapture.ScreenCapture">
            <summary>
            Wraps some screenshot functionality from <see cref="T:System.Drawing.Bitmap"/> and <see cref="T:System.Drawing.Graphics"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.ScreenCapture.ScreenCapture.ResolutionScales">
            <summary>
            The resolution scales set in Windows Settings for each monitor. They are used whenever the capture region is automatically set.
            </summary>
        </member>
        <member name="M:LaquaiLib.ScreenCapture.ScreenCapture.Capture(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Captures a region of the screen.</para>
            <para>Passed coordinates are not corrected using <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.ResolutionScales"/>.</para>
            </summary>
            <param name="x1">The x-coordinate of the top-left point of the region.</param>
            <param name="y1">The y-coordinate of the top-left point of the region.</param>
            <param name="x2">The x-coordinate of the bottom-right point of the region.</param>
            <param name="y2">The y-coordinate of the bottom-right point of the region.</param>
            <returns>The <see cref="T:System.Drawing.Bitmap"/> created by capturing the region.</returns>
        </member>
        <member name="M:LaquaiLib.ScreenCapture.ScreenCapture.Capture(System.Drawing.Rectangle)">
            <summary>
            <para>Captures a region of the screen.</para>
            <para>Position coordinates of the passed <see cref="T:System.Drawing.Rectangle"/> are not corrected using <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.ResolutionScales"/>.</para>
            </summary>
            <param name="region">The region to capture.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> object containing the capture created from the given region.</returns>
        </member>
        <member name="M:LaquaiLib.ScreenCapture.ScreenCapture.Capture">
            <summary>
            Captures the entire primary screen.
            </summary>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> object containing the capture created from the primary screen.</returns>
        </member>
        <member name="M:LaquaiLib.ScreenCapture.ScreenCapture.TestRegion(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a test image to show which region the passed coordinates would capture. If <paramref name="extract"/> is <c>false</c>, a red rectangle is painted onto the created capture <see cref="T:System.Drawing.Bitmap"/> to show this region. Otherwise, only the pixels inside the region are written to the output file. A singular blue pixel shows the center of this region.
            </summary>
            <remarks>
            <para>The blue center pixel may be off-center if the chosen region has even width and/or height.</para>
            </remarks>
            <param name="x1">The x-coordinate of the top-left point of the region.</param>
            <param name="y1">The y-coordinate of the top-left point of the region.</param>
            <param name="x2">The x-coordinate of the bottom-right point of the region.</param>
            <param name="y2">The y-coordinate of the bottom-right point of the region.</param>
            <param name="extract">Whether to only write the pixels inside the region to the output image.</param>
            <returns>The path to saved <see cref="T:System.Drawing.Bitmap"/>.</returns>
        </member>
        <member name="M:LaquaiLib.ScreenCapture.ScreenCapture.ScaleCoordinates(System.Int32,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            Scales the passed coordinates using the <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.ResolutionScales"/> to monitor coordinates.
            </summary>
            <param name="monitor">The monitor to scale the coordinates for.</param>
            <param name="scaleDown">Whether to scale down (<c>true</c>) or up (<c>false</c>).</param>
            <param name="x">The <c>x</c>-coordinate to scale.</param>
            <param name="y">The <c>y</c>-coordinate to scale.</param>
        </member>
        <member name="M:LaquaiLib.ScreenCapture.ScreenCapture.ScaleCoordinates(System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Scales the passed coordinates using the <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.ResolutionScales"/> to monitor coordinates.
            </summary>
            <param name="monitor">The monitor to scale the coordinates for.</param>
            <param name="scaleDown">Whether to scale down (<c>true</c>) or up (<c>false</c>).</param>
            <param name="x1">The <c>x</c>-coordinate of the top-left point to scale.</param>
            <param name="y1">The <c>y</c>-coordinate of the top-left point to scale.</param>
            <param name="x2">The <c>x</c>-coordinate of the bottom-right point to scale.</param>
            <param name="y2">The <c>y</c>-coordinate of the bottom-right point to scale.</param>
        </member>
        <member name="M:LaquaiLib.ScreenCapture.ScreenCapture.ScaleCoordinates(System.Int32,System.Boolean,System.Drawing.Rectangle@)">
            <summary>
            Scales the passed <see cref="T:System.Drawing.Rectangle"/> using the <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.ResolutionScales"/> to monitor coordinates.
            </summary>
            <param name="monitor">The monitor to scale the coordinates for.</param>
            <param name="scaleDown">Whether to scale down (<c>true</c>) or up (<c>false</c>).</param>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle"/> to scale.</param>
        </member>
        <member name="E:LaquaiLib.ScreenCapture.ScreenCapture.Captured">
            <summary>
            Occurs when this <see cref="T:LaquaiLib.ScreenCapture.ScreenCapture"/> captures the configured region, but only if <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.Predicate"/> is satisfied.
            </summary>
        </member>
        <member name="P:LaquaiLib.ScreenCapture.ScreenCapture.Predicate">
            <summary>
            The predicate that is checked whenever a capture would occur. If this returns <c>false</c>, the capture is discarded.
            </summary>
        </member>
        <member name="F:LaquaiLib.ScreenCapture.ScreenCapture.Timer">
            <summary>
            The <see cref="T:System.Threading.Timer"/> that controls when captures are made.
            </summary>
        </member>
        <member name="P:LaquaiLib.ScreenCapture.ScreenCapture.IsCapturing">
            <summary>
            Whether this <see cref="T:LaquaiLib.ScreenCapture.ScreenCapture"/> is currently creating captures and may raise the <see cref="E:LaquaiLib.ScreenCapture.ScreenCapture.Captured"/> event.
            </summary>
        </member>
        <member name="P:LaquaiLib.ScreenCapture.ScreenCapture.Region">
            <summary>
            The region this <see cref="T:LaquaiLib.ScreenCapture.ScreenCapture"/> captures.
            </summary>
        </member>
        <member name="P:LaquaiLib.ScreenCapture.ScreenCapture.IsCaptureRegionScreen">
            <summary>
            Whether the configured capture <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.Region"/> is the entire primary screen.
            </summary>
        </member>
        <member name="M:LaquaiLib.ScreenCapture.ScreenCapture.Start">
            <summary>
            Causes this <see cref="T:LaquaiLib.ScreenCapture.ScreenCapture"/> to create captures and raise the <see cref="E:LaquaiLib.ScreenCapture.ScreenCapture.Captured"/> event.
            </summary>
        </member>
        <member name="M:LaquaiLib.ScreenCapture.ScreenCapture.Stop">
            <summary>
            Causes this <see cref="T:LaquaiLib.ScreenCapture.ScreenCapture"/> to no longer create captures and raise the <see cref="E:LaquaiLib.ScreenCapture.ScreenCapture.Captured"/> event.
            </summary>
        </member>
        <member name="M:LaquaiLib.ScreenCapture.ScreenCapture.#ctor">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.ScreenCapture.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.Region"/> set to the entire primary screen and a <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.Predicate"/> that allows all created captures.
            </summary>
        </member>
        <member name="M:LaquaiLib.ScreenCapture.ScreenCapture.#ctor(System.Func{System.Boolean})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.ScreenCapture.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.Region"/> set to the entire primary screen and a passed <paramref name="predicate"/>.
            </summary>
            <param name="predicate">The <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.Predicate"/> that is checked whenever a capture would occur. If this returns <c>false</c>, the capture is discarded.</param>
        </member>
        <member name="M:LaquaiLib.ScreenCapture.ScreenCapture.#ctor(System.Drawing.Rectangle)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.ScreenCapture.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.Region"/> set to the passed <paramref name="region"/> and a <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.Predicate"/> that allows all created captures.
            </summary>
            <param name="region">The region this <see cref="T:LaquaiLib.ScreenCapture.ScreenCapture"/> captures.</param>
        </member>
        <member name="M:LaquaiLib.ScreenCapture.ScreenCapture.#ctor(System.Drawing.Rectangle,System.Func{System.Boolean})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.ScreenCapture.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.Region"/> set to the passed <paramref name="region"/> and a passed <paramref name="predicate"/>.
            </summary>
            <param name="region">The region this <see cref="T:LaquaiLib.ScreenCapture.ScreenCapture"/> captures.</param>
            <param name="predicate">The <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.Predicate"/> that is checked whenever a capture would occur. If this returns <c>false</c>, the capture is discarded.</param>
        </member>
        <member name="M:LaquaiLib.ScreenCapture.ScreenCapture.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.ScreenCapture.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.Region"/> created from a series of passed coordinates and a <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.Predicate"/> that allows all created captures.
            </summary>
            <param name="x1">The x-coordinate of the top-left point of the region.</param>
            <param name="y1">The y-coordinate of the top-left point of the region.</param>
            <param name="x2">The x-coordinate of the bottom-right point of the region.</param>
            <param name="y2">The y-coordinate of the bottom-right point of the region.</param>
        </member>
        <member name="M:LaquaiLib.ScreenCapture.ScreenCapture.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Func{System.Boolean})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.ScreenCapture.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.Region"/> created from a series of passed coordinates and a passed <paramref name="predicate"/>.
            </summary>
            <param name="x1">The x-coordinate of the top-left point of the region.</param>
            <param name="y1">The y-coordinate of the top-left point of the region.</param>
            <param name="x2">The x-coordinate of the bottom-right point of the region.</param>
            <param name="y2">The y-coordinate of the bottom-right point of the region.</param>
            <param name="predicate">The <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.Predicate"/> that is checked whenever a capture would occur. If this returns <c>false</c>, the capture is discarded.</param>
        </member>
        <member name="M:LaquaiLib.ScreenCapture.ScreenCapture.#ctor(System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.ScreenCapture.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.Region"/> set to a specific screen and a <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.Predicate"/> that allows all created captures.
            </summary>
            <param name="monitor">The number of the monitor to capture.</param>
        </member>
        <member name="M:LaquaiLib.ScreenCapture.ScreenCapture.#ctor(System.Int32,System.Func{System.Boolean})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.ScreenCapture.ScreenCapture"/> with the capture <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.Region"/> set to a specific screen and a passed <paramref name="predicate"/>.
            </summary>
            <param name="monitor">The number of the monitor to capture.</param>
            <param name="predicate">The <see cref="P:LaquaiLib.ScreenCapture.ScreenCapture.Predicate"/> that is checked whenever a capture would occur. If this returns <c>false</c>, the capture is discarded.</param>
        </member>
        <member name="M:LaquaiLib.ScreenCapture.ScreenCapture.InitTimer">
            <summary>
            Initializes the <see cref="F:LaquaiLib.ScreenCapture.ScreenCapture.Timer"/> that controls when captures are made.
            </summary>
        </member>
        <member name="M:LaquaiLib.ScreenCapture.ScreenCapture.RaiseEvent(LaquaiLib.ScreenCapture.ScreenCaptureEventArgs)">
            <summary>
            Event raise wrapper.
            </summary>
            <param name="e">The <see cref="T:LaquaiLib.ScreenCapture.ScreenCaptureEventArgs"/> passed when raising the event.</param>
        </member>
        <member name="M:LaquaiLib.ScreenCapture.ScreenCapture.Finalize">
            <summary>
            Destructor. Ensures that the <see cref="F:LaquaiLib.ScreenCapture.ScreenCapture.Timer"/> no longer causes captures to be made when this <see cref="T:LaquaiLib.ScreenCapture.ScreenCapture"/> dies.
            </summary>
        </member>
        <member name="T:LaquaiLib.ScreenCapture.ScreenCaptureEventArgs">
            <summary>
            Event args that are passed when raising a <see cref="E:LaquaiLib.ScreenCapture.ScreenCapture.Captured"/> event.
            </summary>
        </member>
        <member name="P:LaquaiLib.ScreenCapture.ScreenCaptureEventArgs.Bitmap">
            <summary>
            The created <see cref="T:System.Drawing.Bitmap"/> capture.
            </summary>
        </member>
        <member name="P:LaquaiLib.ScreenCapture.ScreenCaptureEventArgs.CaptureTime">
            <summary>
            When the capture was created.
            </summary>
        </member>
        <member name="M:LaquaiLib.ScreenCapture.ScreenCaptureEventArgs.#ctor(System.Drawing.Bitmap,System.DateTime)">
            <summary>
            Instantiates <see cref="T:LaquaiLib.ScreenCapture.ScreenCaptureEventArgs"/> with the passed <paramref name="bitmap"/> and <paramref name="timestamp"/>.
            </summary>
            <param name="bitmap"></param>
            <param name="timestamp"></param>
        </member>
        <member name="T:LaquaiLib.Util.TempAlloc">
            <summary>
            Represents a temporarily allocated region of unmanaged memory that is automatically freed when its wrapper object is disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.TempAlloc.#ctor(System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.TempAlloc"/> with the given size.
            </summary>
            <param name="bytes">The amount of bytes to allocate.</param>
        </member>
        <member name="M:LaquaiLib.Util.TempAlloc.#ctor(System.Int32,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.TempAlloc"/> with the given size, optionally clearing any previous data.
            </summary>
            <param name="bytes">The amount of bytes to allocate.</param>
            <param name="clear">A value indicating whether any previous data in the allocated memory region should be cleared.</param>
        </member>
        <member name="M:LaquaiLib.Util.TempAlloc.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.TempAlloc"/> as a wrapper around existing allocated memory.
            </summary>
            <param name="address">The address to the memory region to wrap with this <see cref="T:LaquaiLib.Util.TempAlloc"/>.</param>
            <param name="size">The size of the memory region at <paramref name="address"/>.</param>
        </member>
        <member name="M:LaquaiLib.Util.TempAlloc.#ctor(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.TempAlloc"/> as a wrapper around existing allocated memory.
            </summary>
            <param name="address">The address to the memory region to wrap with this <see cref="T:LaquaiLib.Util.TempAlloc"/>.</param>
            <param name="size">The size of the memory region at <paramref name="address"/>.</param>
            <param name="clear">A value indicating whether any previous data in the allocated memory region should be cleared.</param>
        </member>
        <member name="P:LaquaiLib.Util.TempAlloc.Address">
            <summary>
            The address of the memory region this <see cref="T:LaquaiLib.Util.TempAlloc"/> wraps.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.TempAlloc.Size">
            <summary>
            The size of the memory region this <see cref="T:LaquaiLib.Util.TempAlloc"/> wraps in bytes.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.TempAlloc.Bits">
            <summary>
            The size of the memory region this <see cref="T:LaquaiLib.Util.TempAlloc"/> wraps in bytes.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.TempAlloc.Data">
            <summary>
            A <see cref="T:System.Span`1"/> of <see cref="T:System.Byte"/> that represents the memory region this <see cref="T:LaquaiLib.Util.TempAlloc"/> wraps.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.TempAlloc.Item(System.Int32)">
            <summary>
            Gets or sets a byte of data at the given index in the memory region this <see cref="T:LaquaiLib.Util.TempAlloc"/> wraps.
            </summary>
            <param name="i">The index of the byte to get or set.</param>
            <returns>The byte at the given index.</returns>
        </member>
        <member name="P:LaquaiLib.Util.TempAlloc.IsDisposed">
            <summary>
            Whether this <see cref="T:LaquaiLib.Util.TempAlloc"/> has been disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.TempAlloc.Create``1">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.TempAlloc"/> for exactly one instance of the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to allocate memory for.</typeparam>
        </member>
        <member name="M:LaquaiLib.Util.TempAlloc.Create``1(System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.TempAlloc"/> for exactly one instance of the given <see cref="T:System.Type"/>, optionally clearing any previous data.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to allocate memory for.</typeparam>
            <param name="clear">A value indicating whether any previous data in the allocated memory region should be cleared.</param>
        </member>
        <member name="M:LaquaiLib.Util.TempAlloc.Reallocate(System.Int32)">
            <summary>
            Resizes the memory region this <see cref="T:LaquaiLib.Util.TempAlloc"/> wraps.
            </summary>
            <param name="bytes">The new size of the memory region in bytes.</param>
            <returns>A value indicating whether the <see cref="P:LaquaiLib.Util.TempAlloc.Address"/> of the memory region this <see cref="T:LaquaiLib.Util.TempAlloc"/> wraps has changed. If <c>true</c>, reading from any previous addresses is considered undefined behavior.</returns>
        </member>
        <member name="M:LaquaiLib.Util.TempAlloc.Cast``1">
            <summary>
            Attempts to cast the contents of the memory region this <see cref="T:LaquaiLib.Util.TempAlloc"/> wraps to the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to cast the contents of the memory region to.</typeparam>
            <returns>The entire contents of the memory region this <see cref="T:LaquaiLib.Util.TempAlloc"/> wraps as an instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.TempAlloc.Cast``1(System.Int32,System.Int32)">
            <summary>
            Attempts to cast the contents of the memory region this <see cref="T:LaquaiLib.Util.TempAlloc"/> wraps to the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to cast the contents of the memory region to.</typeparam>
            <returns>The entire contents of the memory region this <see cref="T:LaquaiLib.Util.TempAlloc"/> wraps as an instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.TempAlloc.Clear">
            <summary>
            Clears the memory region this <see cref="T:LaquaiLib.Util.TempAlloc"/> wraps.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.TempAlloc.Finalize">
            <summary>
            Finalizes this <see cref="T:LaquaiLib.Util.TempAlloc"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.TempAlloc.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Util.TempArray`1">
            <summary>
            Represents a temporary array of <typeparamref name="T"/> that is automatically cleared from memory when its wrapper object is disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.TempArray`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.TempArray`1"/> with the given size. It is automatically rented from and returned to <see cref="P:System.Buffers.ArrayPool`1.Shared"/> upon disposal of this <see cref="T:LaquaiLib.Util.TempArray`1"/>, unless <c>false</c> is explicitly passed for <paramref name="allowPooledArray"/>.
            </summary>
            <param name="capacity">The capacity of the array to create.</param>
            <param name="allowPooledArray">Whether to allow the array to be rented from <see cref="P:System.Buffers.ArrayPool`1.Shared"/>. If <c>false</c>, a new array will be created instead.</param>
        </member>
        <member name="M:LaquaiLib.Util.TempArray`1.#ctor(`0[],System.Buffers.ArrayPool{`0})">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.TempArray`1"/> as a wrapper around the specified array of <typeparamref name="T"/>.
            </summary>
            <param name="array">The array of <typeparamref name="T"/> to wrap with this <see cref="T:LaquaiLib.Util.TempArray`1"/>.</param>
            <param name="arrayPool">The <see cref="T:System.Buffers.ArrayPool`1"/> to return the array to when this <see cref="T:LaquaiLib.Util.TempArray`1"/> is disposed. May be <c>null</c> to indicate that the passed <paramref name="array"/> is not from any <see cref="T:System.Buffers.ArrayPool`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Util.TempArray`1.#ctor(`0,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.TempArray`1"/> with the given <paramref name="size"/> and initializes all elements with the given <paramref name="value"/>.
            </summary>
            <param name="value">The value to initialize all elements with.</param>
            <param name="size">The size of the array to create.</param>
        </member>
        <member name="P:LaquaiLib.Util.TempArray`1.Array">
            <summary>
            The array of <typeparamref name="T"/> this <see cref="T:LaquaiLib.Util.TempArray`1"/> wraps.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.TempArray`1.IsDisposed">
            <summary>
            Whether this <see cref="T:LaquaiLib.Util.TempArray`1"/> has been disposed.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.TempArray`1.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Util.TempArray`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Util.TempArray`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Util.TempArray`1.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Util.TempArray`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Util.TempArray`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.TempArray`1.Equals(System.Object,System.Collections.IEqualityComparer)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.TempArray`1.GetHashCode(System.Collections.IEqualityComparer)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.TempArray`1.CompareTo(System.Object,System.Collections.IComparer)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.TempArray`1.Add(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.TempArray`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.TempArray`1.Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.TempArray`1.IndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.TempArray`1.Insert(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.TempArray`1.Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.TempArray`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.TempArray`1.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.TempArray`1.CopyTo(LaquaiLib.Util.TempArray{`0},System.Int32)">
            <summary>
            Copies the elements of this <see cref="T:LaquaiLib.Util.TempArray`1"/> to another <see cref="T:LaquaiLib.Util.TempArray`1"/>, starting at a particular index.
            </summary>
            <param name="tempArray">The <see cref="T:LaquaiLib.Util.TempArray`1"/> that is the destination of the elements copied from this <see cref="T:LaquaiLib.Util.TempArray`1"/>.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="tempArray"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="tempArray"/> is multi-dimensional, the number of elements in this <see cref="T:LaquaiLib.Util.TempArray`1"/> is greater than the available space from <paramref name="index"/> to the end of the destination <see cref="T:LaquaiLib.Util.TempArray`1"/> or the type of the source <see cref="T:LaquaiLib.Util.TempArray`1"/> cannot be cast automatically to the type of the destination <see cref="T:LaquaiLib.Util.TempArray`1"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Util.TempArray`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.TempArray`1.Clone">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.TempArray`1.Finalize">
            <summary>
            Finalizes this <see cref="T:LaquaiLib.Util.TempArray`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.TempArray`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Util.TempDir">
            <summary>
            Represents a temporary directory that is automatically deleted when its wrapper object is disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.TempDir.#ctor">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.TempDir"/> with a fully random name.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.TempDir.#ctor(System.String)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.TempDir"/> as a wrapper around the specified directory. If the target directory does not exist, it is created. A deletion attempt is still made when the wrapping <see cref="T:LaquaiLib.Util.TempDir"/> is disposed.
            </summary>
            <param name="path">The path to the directory to wrap with this <see cref="T:LaquaiLib.Util.TempDir"/>.</param>
        </member>
        <member name="P:LaquaiLib.Util.TempDir.Path">
            <summary>
            The path to the file this <see cref="T:LaquaiLib.Util.TempDir"/> wraps.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.TempDir.IsDisposed">
            <summary>
            Whether this <see cref="T:LaquaiLib.Util.TempDir"/> has been disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.TempDir.Finalize">
            <summary>
            Finalizes this <see cref="T:LaquaiLib.Util.TempDir"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.TempDir.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Util.TempFile">
            <summary>
            Represents a temporary file that is automatically deleted when its wrapper object is disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.TempFile.#ctor">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.TempFile"/> with the file name and extension being assigned by the OS. It is usually a <see cref="T:System.Guid"/> with the extension <c>.tmp</c>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.TempFile.#ctor(System.String)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.TempFile"/> with the file name being assigned by the OS (it is usually a <see cref="T:System.Guid"/>), and changes its extension to the one specified.
            </summary>
            <param name="fileExtension">The file extension for this <see cref="T:LaquaiLib.Util.TempFile"/>.</param>
        </member>
        <member name="M:LaquaiLib.Util.TempFile.#ctor(System.String,System.String)">
            <summary>
            Instantiates a new <see cref="T:LaquaiLib.Util.TempFile"/> as a wrapper around the specified file path. If the target file does not exist, it is created. A deletion attempt is still made when the wrapping <see cref="T:LaquaiLib.Util.TempFile"/> is disposed.
            </summary>
            <param name="path">The path to the file to wrap with this <see cref="T:LaquaiLib.Util.TempFile"/>.</param>
            <param name="fileExtension">The file extension for this <see cref="T:LaquaiLib.Util.TempFile"/>. This is the extension <paramref name="path"/> is changed to before opening the file stream. If <c>null</c> or white space, the existing extension in <paramref name="path"/> is kept.</param>
        </member>
        <member name="P:LaquaiLib.Util.TempFile.Path">
            <summary>
            The path to the file this <see cref="T:LaquaiLib.Util.TempFile"/> wraps.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.TempFile.Stream">
            <summary>
            The <see cref="T:System.IO.FileStream"/> for the file this <see cref="T:LaquaiLib.Util.TempFile"/> wraps.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.TempFile.IsDisposed">
            <summary>
            Whether this <see cref="T:LaquaiLib.Util.TempFile"/> has been disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.TempFile.Finalize">
            <summary>
            Finalizes this <see cref="T:LaquaiLib.Util.TempFile"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.TempFile.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Constants">
            <summary>
            Provides a number of constants.
            </summary>
        </member>
        <member name="F:LaquaiLib.Constants.Numbers">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Int32"/> containing the numbers <c>0</c> through <c>9</c>.
            </summary>
        </member>
        <member name="F:LaquaiLib.Constants.LettersUppercase">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Char"/> containing the uppercase letters <c>A</c> through <c>Z</c>.
            </summary>
        </member>
        <member name="F:LaquaiLib.Constants.LettersLowercase">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Char"/> containing the lowercase letters <c>a</c> through <c>z</c>.
            </summary>
        </member>
        <member name="F:LaquaiLib.Constants.GreekLettersUppercase">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Char"/> containing the uppercase letters <c>Α</c> through <c>Ω</c>.
            </summary>
        </member>
        <member name="F:LaquaiLib.Constants.GreekLettersLowercase">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Char"/> containing the lowercase letters <c>α</c> through <c>ω</c>.
            </summary>
        </member>
        <member name="T:LaquaiLib.Extensions.CharExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Char"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.CharExtensions.IsVowel(System.Char)">
            <summary>
            Determines if a specified <see cref="T:System.Char"/> is a vowel (including 'y').
            </summary>
            <param name="character">The <see cref="T:System.Char"/> to check.</param>
            <returns><c>true</c> if <paramref name="character"/> is a vowel, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.CharExtensions.IsConsonant(System.Char)">
            <summary>
            Determines if a specified <see cref="T:System.Char"/> is a consonant.
            </summary>
            <param name="character">The <see cref="T:System.Char"/> to check.</param>
            <returns><c>true</c> if <paramref name="character"/> is a consonant, otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.ConcurrentQueueExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ConcurrentQueueExtensions.Enqueue``1(System.Collections.Concurrent.ConcurrentQueue{``0},``0,``0[])">
            <summary>
            Adds items to the end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to add the items from <paramref name="items"/> to.</param>
            <param name="item">The first item to add to <paramref name="queue"/>.</param>
            <param name="items">Any more items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ConcurrentQueueExtensions.Enqueue``1(System.Collections.Concurrent.ConcurrentQueue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds items from a collection to the end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to add the items from the <paramref name="collection"/> to.</param>
            <param name="collection">A collection of items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ConcurrentQueueExtensions.Enqueue``1(LaquaiLib.Classes.Collections.Concurrent.LimitedConcurrentQueue{``0},``0,``0[])">
            <summary>
            Adds items to the end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to add the items from <paramref name="items"/> to.</param>
            <param name="item">The first item to add to <paramref name="queue"/>.</param>
            <param name="items">Any more items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ConcurrentQueueExtensions.Enqueue``1(LaquaiLib.Classes.Collections.Concurrent.LimitedConcurrentQueue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds items from a collection to the end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to add the items from the <paramref name="collection"/> to.</param>
            <param name="collection">A collection of items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="T:LaquaiLib.Extensions.DictionaryExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.Dictionary`2"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.DictionaryExtensions.Invert``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Creates an inverted <see cref="T:System.Collections.Generic.Dictionary`2"/>, where the original keys are now the values and vice versa.
            </summary>
            <typeparam name="TKey">The Type of the keys of the original <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <typeparam name="TValue">The Type of the values of the original <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <param name="source">The original <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <returns>A new <see cref="T:System.Collections.Generic.Dictionary`2"/> where the keys are the values of the original <see cref="T:System.Collections.Generic.Dictionary`2"/> and vice versa.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.DictionaryExtensions.Clone``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Creates a shallow copy of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <typeparam name="TValue">They Type of the values of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to clone.</param>
            <returns>A shallow copy of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.HashAlgorithmExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Security.Cryptography.HashAlgorithm"/> and derived Types.
            </summary>
        </member>
        <member name="T:LaquaiLib.Extensions.IconExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Drawing.Icon"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IconExtensions.ToImageSource(System.Drawing.Icon)">
            <summary>
            Converts this <see cref="T:System.Drawing.Icon"/> instance to an <see cref="T:System.Windows.Media.ImageSource"/>.
            </summary>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="T:LaquaiLib.Extensions.IEnumerableBoolExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Boolean"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableBoolExtensions.All(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Determines whether all elements of a sequence of <see cref="T:System.Boolean"/> values are true.
            </summary>
            <param name="source">The sequence of <see cref="T:System.Boolean"/> values to check.</param>
            <returns>A value that indicates whether all elements of the sequence are true.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.IEnumerableExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Select``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Selects each element in the input sequence without transformation.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains each element in the input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.SelectMany``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Selects all elements of nested sequences of the same type <typeparamref name="T"/> in <paramref name="source"/> and flattens them into a single sequence without transformation.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="source">The sequence of nested sequences to flatten.</param>
            <returns>A sequence that contains all the elements of the nested sequences.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Shuffles the elements in the input sequence.
            </summary>
            <remarks>
            If the calling code already has an instance of <see cref="T:System.Random"/>, it should use the <see cref="M:LaquaiLib.Extensions.IEnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0},System.Random)"/> overload.
            </remarks>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <returns>A shuffled sequence of the elements in the input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Shuffles the elements in the input sequence, using a specified <see cref="T:System.Random"/> instance.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="random">The <see cref="T:System.Random"/> instance to use for shuffling.</param>
            <returns>A shuffled sequence of the elements in the input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified <paramref name="action"/> on each element of the source collection.
            </summary>
            <typeparam name="T">The Type of the elements in the collection.</typeparam>
            <param name="source">The source collection to iterate over.</param>
            <param name="action">The action to perform on each element of the source collection. It is passed each element in the source collection.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Performs the specified <paramref name="action"/> on each element of the source collection, incorporating each element's index in the <see cref="T:System.Action`2"/>.
            </summary>
            <typeparam name="T">The Type of the elements in the collection.</typeparam>
            <param name="source">The source collection to iterate over.</param>
            <param name="action">The action to perform on each element of the source collection. It is passed each element and its index in the source collection.</param>
        </member>
        <member name="T:LaquaiLib.Extensions.IEnumerableIDisposableExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.IDisposable"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableIDisposableExtensions.Dispose(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Disposes all elements in this sequence of <see cref="T:System.IDisposable"/> objects.
            </summary>
            <param name="disposables">The sequence of <see cref="T:System.IDisposable"/> objects to dispose.</param>
            <remarks>
            If any of the <see cref="M:System.IDisposable.Dispose"/> calls throw an exception, the exceptions are collected and rethrown as an <see cref="T:System.AggregateException"/> after all <see cref="M:System.IDisposable.Dispose"/> calls have been made.
            </remarks>
        </member>
        <member name="T:LaquaiLib.Extensions.IEnumerableTaskExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Threading.Tasks.Task"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableTaskExtensions.Start(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Starts all the tasks in this collection of <see cref="T:System.Threading.Tasks.Task"/>s.
            </summary>
            <param name="tasks">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Threading.Tasks.Task"/> that contains the <see cref="T:System.Threading.Tasks.Task"/>s that are to be started.</param>
            <remarks>Note that this does not await any of the <see cref="T:System.Threading.Tasks.Task"/>s, they are merely started. The calling code is expected to await the availability of and process their results.</remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableTaskExtensions.StartWait(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Starts all the tasks in this collection of <see cref="T:System.Threading.Tasks.Task"/>s and returns a <see cref="T:System.Threading.Tasks.Task"/> that represents their completion.
            </summary>
            <param name="tasks">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Threading.Tasks.Task"/> that contains the <see cref="T:System.Threading.Tasks.Task"/>s that are to be started.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when all of the <see cref="T:System.Threading.Tasks.Task"/>s in this collection have completed.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.QueueExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.Queue`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.QueueExtensions.Enqueue``1(System.Collections.Generic.Queue{``0},``0,``0[])">
            <summary>
            Adds items to the end of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> instance to add the items from <paramref name="items"/> to.</param>
            <param name="item">The first item to add to <paramref name="queue"/>.</param>
            <param name="items">Any more items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.QueueExtensions.Enqueue``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds items from a collection to the end of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> instance to add the items from the <paramref name="collection"/> to.</param>
            <param name="collection">A collection of items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.QueueExtensions.Enqueue``1(LaquaiLib.Classes.Collections.LimitedQueue{``0},``0,``0[])">
            <summary>
            Adds items to the end of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> instance to add the items from <paramref name="items"/> to.</param>
            <param name="item">The first item to add to <paramref name="queue"/>.</param>
            <param name="items">Any more items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.QueueExtensions.Enqueue``1(LaquaiLib.Classes.Collections.LimitedQueue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds items from a collection to the end of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> instance to add the items from the <paramref name="collection"/> to.</param>
            <param name="collection">A collection of items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="T:LaquaiLib.Extensions.StreamExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.IO.Stream"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.ReadToEnd(System.IO.Stream)">
            <summary>
            Reads all characters from the current position to the end of the stream.
            </summary>
            <returns>The rest of the stream as a String, from the current position to the end.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.ReadToEndAsync(System.IO.Stream)">
            <summary>
            Reads all characters from the current position to the end of the stream asynchronously and returns them as one string.
            </summary>
            <returns>A task that represents the asynchronous read operation.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.ReadToEndAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Reads all characters from the current position to the end of the stream asynchronously and returns them as one string.
            </summary>
            <param name="stream"></param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.StringSpanExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.String"/> and <see cref="T:System.Span`1"/> of <see cref="T:System.Char"/> Types.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.Repeat(System.String,System.Int32)">
            <summary>
            Constructs a new string from this string repeated <paramref name="count"/> times.
            </summary>
            <param name="source">The string to repeat.</param>
            <param name="count">The number of times to repeat <paramref name="source"/>.</param>
            <returns>A string consisting of <paramref name="source"/> repeated <paramref name="count"/> times.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.Replace(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new string from this string with all occurrences of the strings in <paramref name="finds"/> replaced with <paramref name="replace"/>.
            </summary>
            <param name="source">The string to perform replacements in.</param>
            <param name="finds">A collection of strings to search for in <paramref name="source"/>.</param>
            <param name="replace">The replacement for occurrences of strings in <paramref name="finds"/>.</param>
            <returns>A string as described.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.ReplaceExcept(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new string from this string with all occurrences of any string that is not contained in <paramref name="except"/> replaced with <paramref name="replace"/>.
            </summary>
            <param name="source">The string to perform replacements in.</param>
            <param name="except">A collection of strings to except from replacement in <paramref name="source"/>.</param>
            <param name="replace">The replacement for occurrences of strings that are not in <paramref name="except"/>.</param>
            <returns>A string as described.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndicesOf(System.String,System.Char)">
            <summary>
            Reports the zero-based indices of all occurrences of the specified Unicode character in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="search">A Unicode character to seek.</param>
            <returns>All zero-based index positions of <paramref name="search"/> if that character is found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndicesOf(System.String,System.Char,System.Int32)">
            <summary>
            Reports the zero-based indices of all occurrences of the specified Unicode character in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="search">A Unicode character to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>All zero-based index positions of <paramref name="search"/> if that character is found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndicesOf(System.String,System.String)">
            <summary>
            Reports the zero-based indices of all occurrences of the specified string in this instance.
            </summary>
            <param name="source">The string to search.</param>
            <param name="search">The string to seek.</param>
            <returns>All zero-based index positions of <paramref name="search"/> if that string is found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndicesOf(System.String,System.String,System.Int32)">
            <summary>
            Reports the zero-based indices of all occurrences of the specified string in this instance. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="search">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>All zero-based index positions of <paramref name="search"/> if that string is found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndexOfAny(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any string in a specified sequence of strings.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any string in <paramref name="searches"/> was found; -1 if no string in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndexOfAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any string in a specified sequence of strings. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any string in <paramref name="searches"/> was found; -1 if no string in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndicesOfAny(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Reports the zero-based indices of the all occurrences in this instance of any Unicode character in a specified sequence of characters.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any character in <paramref name="searches"/> was found; an empty collection if no character in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndicesOfAny(System.String,System.Collections.Generic.IEnumerable{System.Char},System.Int32)">
            <summary>
            Reports the zero-based indices of the all occurrences in this instance of any Unicode character in a specified sequence of characters. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any character in <paramref name="searches"/> was found; an empty collection if no character in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndicesOfAny(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reports the zero-based indices of the all occurrences in this instance of any string in a specified sequence of strings.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any string in <paramref name="searches"/> was found; an empty collection if no string in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndicesOfAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Reports the zero-based indices of the all occurrences in this instance of any string in a specified sequence of strings. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any string in <paramref name="searches"/> was found; an empty collection if no string in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndicesOfExcept(System.String,System.Char)">
            <summary>
            Reports the zero-based indices of all occurrences of Unicode characters other than the one specified in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="except">A Unicode character to except.</param>
            <returns>All zero-based index positions of any characters that are left, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndicesOfExcept(System.String,System.Char,System.Int32)">
            <summary>
            Reports the zero-based indices of all occurrences of Unicode characters other than the one specified in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="except">A Unicode character to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>All zero-based index positions of any characters that are left, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndicesOfExcept(System.String,System.String)">
            <summary>
            Reports the zero-based indices of all occurrences of Unicode characters other than the ones contained in <paramref name="except"/> in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="except">A string containing Unicode character to except.</param>
            <returns>All zero-based index positions of any characters that are left, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndicesOfExcept(System.String,System.String,System.Int32)">
            <summary>
            Reports the zero-based indices of all occurrences of Unicode characters other than the ones contained in <paramref name="except"/> in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="except">A string containing Unicode character to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>All zero-based index positions of any characters that are left, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndexOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Reports the zero-based index of the first occurrence of a character other than the ones specified in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any character other than the ones in <paramref name="excepts"/> was found, or -1 otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndexOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.Char},System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of a character other than the ones specified in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any character other than the ones in <paramref name="excepts"/> was found, or -1 otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndexOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reports the zero-based index of the first occurrence of a string (or single character) other than the ones specified in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of strings to except.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any string other than the ones in <paramref name="excepts"/> was found, or -1 otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndexOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of a string (or single character) other than the ones specified in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of strings to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any string other than the ones in <paramref name="excepts"/> was found, or -1 otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndicesOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Reports the zero-based indices of the all occurrences of any Unicode character other than the ones specified in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any character not contained in <paramref name="excepts"/> was found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndicesOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.Char},System.Int32)">
            <summary>
            Reports the zero-based indices of the all occurrences of any Unicode character other than the ones specified in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any character not contained in <paramref name="excepts"/> was found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndicesOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reports the zero-based indices of the all occurrences of any string (or single character) other than the ones specified in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any string not contained in <paramref name="excepts"/> was found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.IndicesOfAnyExcept(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Reports the zero-based indices of the all occurrences of any string (or single character) other than the ones specified in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any string not contained in <paramref name="excepts"/> was found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.ForEachLine(System.String,System.Func{System.String,System.String})">
            <summary>
            Applies a <paramref name="transform"/> function to each line of a string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="transform">The function used to transform each line of the input string.</param>
            <returns>The transformed string.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.ForEachLine(System.String,System.Func{System.String,System.Int32,System.String})">
            <summary>
            Applies a <paramref name="transform"/> function to each line of a string, incorporating each line's index in the function.
            </summary>
            <param name="source">The string to search.</param>
            <param name="transform">The function used to transform each line of the input string.</param>
            <returns>The transformed string.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.ForEachLine(System.String,System.Func{System.String,System.String},System.Func{System.String,System.Boolean})">
            <summary>
            Applies a <paramref name="transform"/> function to each line of a string that satisfies conditions defined by <paramref name="predicate"/>. Lines that do not satisfy this condition are copied without applying <paramref name="transform"/>.
            </summary>
            <param name="source">The string to search.</param>
            <param name="transform">The function used to transform each line of the input string.</param>
            <param name="predicate">The function used to determine which lines are transformed using <paramref name="transform"/>.</param>
            <returns></returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringSpanExtensions.ForEachLine(System.String,System.Func{System.String,System.Int32,System.String},System.Func{System.String,System.Int32,System.Boolean})">
            <summary>
            Applies a <paramref name="transform"/> function to each line of a string that satisfies conditions defined by <paramref name="predicate"/>, incorporating each line's index in the functions. Lines that do not satisfy this condition are copied without applying <paramref name="transform"/>.
            </summary>
            <param name="source">The string to search.</param>
            <param name="transform">The function used to transform each line of the input string.</param>
            <param name="predicate">The function used to determine which lines are transformed using <paramref name="transform"/>.</param>
            <returns></returns>
        </member>
        <member name="T:LaquaiLib.Extensions.TypeExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Type"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.GetInterfaceImplementingTypes(System.Type)">
            <summary>
            Returns a collection of all types that implement the supplied interface.
            </summary>
            <param name="type">The interface type to get the implementing types for.</param>
            <returns>A collection of all types that implement the supplied interface.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="type"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="type"/>'s assembly cannot be resolved.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.GetInheritingTypes(System.Type)">
            <summary>
            Returns a collection of all types that inherit from the supplied type.
            </summary>
            <param name="type">The type to get the inheriting types for.</param>
            <returns>A collection of all types that inherit from the supplied type.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="type"/>'s assembly cannot be resolved.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.GetNonAbstractInheritingTypes(System.Type)">
            <summary>
            Returns a collection of all types that inherit from the supplied type and are not abstract.
            </summary>
            <param name="type">The type to get the non-abstract inheriting types for.</param>
            <returns>A collection of all types that inherit from the supplied type and are not abstract.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="type"/>'s assembly cannot be resolved.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.GetConstructableInheritingTypes(System.Type)">
            <summary>
            Returns a collection of all types that inherit from the supplied type and contain public constructors.
            </summary>
            <param name="type">The type to get the constructable inheriting types for.</param>
            <returns>A collection of all types that inherit from the supplied type and contain public constructors.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="type"/>'s assembly cannot be resolved.</exception>
        </member>
        <member name="T:LaquaiLib.Extensions.XElementExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Xml.Linq.XElement"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.XElementExtensions.Siblings(System.Xml.Linq.XElement)">
            <summary>
            Returns a collection of the sibling elements of this node, in document order.
            </summary>
            <param name="source">The <see cref="T:System.Xml.Linq.XElement"/> to get the siblings of.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the sibling elements of this node, in document order.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.XElementExtensions.Siblings(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Returns a collection of the sibling elements of this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"/> are included in the collection.
            </summary>
            <param name="source">The <see cref="T:System.Xml.Linq.XElement"/> to get the siblings of.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> to match.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the sibling elements of this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"/> are included in the collection.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.XmlWriterExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Xml.XmlWriter"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.XmlWriterExtensions.WriteXNode(System.Xml.XmlWriter,System.Xml.Linq.XNode)">
            <summary>
            Writes the specified <paramref name="xNode"/> to this <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="xmlWriter">The <see cref="T:System.Xml.XmlWriter"/> instance to write <paramref name="xNode"/> to.</param>
            <param name="xNode">The <see cref="T:System.Xml.Linq.XNode"/> to serialize and write to <paramref name="xmlWriter"/>.</param>
        </member>
        <member name="T:LaquaiLib.Extensions.XNodeExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Xml.Linq.XNode"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.XNodeExtensions.SiblingNodes(System.Xml.Linq.XNode)">
            <summary>
            Returns a collection of the sibling nodes of this node, in document order.
            </summary>
            <param name="source">The <see cref="T:System.Xml.Linq.XNode"/> to get the siblings of.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Xml.Linq.XNode"/> containing the sibling nodes of this node, in document order.</returns>
        </member>
        <member name="T:LaquaiLib.LaquaiLib">
            <summary>
            Entry point for the library.
            </summary>
        </member>
        <member name="M:LaquaiLib.LaquaiLib.Range(System.Double,System.Double,System.Double)">
            <summary>
            Compiles an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Double"/>s from <paramref name="start"/> to <paramref name="stop"/> with a step width of <paramref name="step"/>.
            </summary>
            <param name="start">The start of the range.</param>
            <param name="stop">The end of the range.</param>
            <param name="step">The step width of the range.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Double"/> as described.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="step"/> is 0.</exception>
        </member>
        <member name="M:LaquaiLib.LaquaiLib.Equal(System.Object[])">
            <summary>
            Determines if all passed <paramref name="objects"/> are equal to each other.
            </summary>
            <param name="objects">The objects to compare.</param>
            <returns>A value indicating whether all passed <paramref name="objects"/> are equal to each other.</returns>
        </member>
        <member name="T:LaquaiLib.Miscellaneous">
            <summary>
            Contains miscellaneous classes and methods.
            </summary>
        </member>
        <member name="T:LaquaiLib.Miscellaneous.Logger">
            <summary>
            Represents a rudimentary static logger that writes to the <see cref="T:System.Console"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Miscellaneous.Logger.FormatString">
            <summary>
            A <see cref="T:System.DateTime"/> format string used to format the timestamp in the console output.
            </summary>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.ReadMultiple(System.Collections.Generic.IEnumerable{System.String},System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Reads lines of input from the <see cref="T:System.Console"/> with any number of specified <paramref name="promptlines"/>, a specified <paramref name="inputDelimiter" /> and accepting input that is accepted by a <paramref name="validator"/> function. Input lines are collected until the <paramref name="validator"/> function returns <c>false</c> for the first time.
            </summary>
            <remarks>The calling code is responsible for defining a <paramref name="validator"/> function that returns <c>false</c> at some point. If it doesn't, this method will never return.</remarks>
            <param name="promptlines">The lines of the prompt to display.</param>
            <param name="inputDelimiter">The input delimiter to display.</param>
            <param name="validator">A validator function to test whether the collected input should be accepted.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.String"/> containing the lines read from standard input or null if no input was provided.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.ReadMultiple(System.String,System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Reads lines of input from the <see cref="T:System.Console"/> with a specified <paramref name="prompt"/>, a specified <paramref name="inputDelimiter" /> and accepting input that is accepted by a <paramref name="validator"/> function. Input lines are collected until the <paramref name="validator"/> function returns <c>false</c> for the first time.
            </summary>
            <remarks>The calling code is responsible for defining a <paramref name="validator"/> function that returns <c>false</c> at some point. If it doesn't, this method will never return.</remarks>
            <param name="prompt">The prompt to display.</param>
            <param name="inputDelimiter">The input delimiter to display.</param>
            <param name="validator">A validator function to test whether the collected input should be accepted.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.String"/> containing the lines read from standard input or null if no input was provided.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.ReadMultiple(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Reads lines of input from the <see cref="T:System.Console"/> with any number of specified <paramref name="promptlines"/> and a specified <paramref name="inputDelimiter" /> until blank input is received.
            </summary>
            <param name="promptlines">The lines of the prompt to display.</param>
            <param name="inputDelimiter">The input delimiter to display.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.String"/> containing the lines read from standard input or null if no input was provided.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.ReadMultiple(System.String,System.String)">
            <summary>
            Reads lines of input from the <see cref="T:System.Console"/> with a specified <paramref name="prompt"/> and a specified <paramref name="inputDelimiter" /> until blank input is received.
            </summary>
            <param name="prompt">The prompt to display.</param>
            <param name="inputDelimiter">The input delimiter to display.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.String"/> containing the lines read from standard input or null if no input was provided.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.ReadMultiple(System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Reads lines of input from the <see cref="T:System.Console"/> with a specified <paramref name="prompt"/>, the default input delimiter and accepting input that is accepted by a <paramref name="validator"/> function. Input lines are collected until the <paramref name="validator"/> function returns <c>false</c> for the first time.
            </summary>
            <remarks>The calling code is responsible for defining a <paramref name="validator"/> function that returns <c>false</c> at some point. If it doesn't, this method will never return.</remarks>
            <param name="prompt">The prompt to display.</param>
            <param name="validator">A validator function to test whether the collected input should be accepted.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.String"/> containing the lines read from standard input or null if no input was provided.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.ReadMultiple(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.Boolean})">
            <summary>
            Reads lines of input from the <see cref="T:System.Console"/> with any number of specified <paramref name="promptlines"/>, the default input delimiter and accepting input that is accepted by a <paramref name="validator"/> function. Input lines are collected until the <paramref name="validator"/> function returns <c>false</c> for the first time.
            </summary>
            <remarks>The calling code is responsible for defining a <paramref name="validator"/> function that returns <c>false</c> at some point. If it doesn't, this method will never return.</remarks>
            <param name="promptlines">The lines of the prompt to display.</param>
            <param name="validator">A validator function to test whether the collected input should be accepted.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.String"/> containing the lines read from standard input or null if no input was provided.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.ReadMultiple(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads lines of input from the <see cref="T:System.Console"/> with any number of specified <paramref name="promptlines"/>, the default input delimiter and accepting any non-blank input.
            </summary>
            <param name="promptlines">The lines of the prompt to display.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.String"/> containing the lines read from standard input or null if no input was provided.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.ReadMultiple(System.Func{System.String,System.Boolean})">
            <summary>
            Reads lines of input from the <see cref="T:System.Console"/> with no prompt and the default input delimiter and accepting input that is accepted by a <paramref name="validator"/> function. Input lines are collected until the <paramref name="validator"/> function returns <c>false</c> for the first time.
            </summary>
            <remarks>The calling code is responsible for defining a <paramref name="validator"/> function that returns <c>false</c> at some point. If it doesn't, this method will never return.</remarks>
            <param name="validator">A validator function to test whether the collected input should be accepted.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.String"/> containing the lines read from standard input or null if no input was provided.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.ReadMultiple(System.String)">
            <summary>
            Reads lines of input from the <see cref="T:System.Console"/> with a specified <paramref name="prompt"/> and the default input delimiter until blank input is received.
            </summary>
            <param name="prompt">The prompt to display.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.String"/> containing the lines read from standard input or null if no input was provided.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.ReadMultiple">
            <summary>
            Reads lines of input from the <see cref="T:System.Console"/> with no prompt and the default input delimiter until blank input is received.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.String"/> containing the lines read from standard input or null if no input was provided.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.Read(System.Collections.Generic.IEnumerable{System.String},System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Reads a line of input from the <see cref="T:System.Console"/> with any number of specified <paramref name="promptlines"/>, a specified <paramref name="inputDelimiter" /> and accepting input that is accepted by a <paramref name="validator"/> function. If the <paramref name="validator"/> function returns <c>false</c>, the prompt is repeatedly displayed until accepted input is received.
            </summary>
            <param name="promptlines">The lines of the prompt to display.</param>
            <param name="inputDelimiter">The input delimiter to display.</param>
            <param name="validator">A validator function to test whether the collected input should be accepted.</param>
            <returns>A string containing the line read from standard input.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.Read(System.String,System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Reads a line of input from the <see cref="T:System.Console"/> with a specified <paramref name="prompt"/>, a specified <paramref name="inputDelimiter" /> and accepting input that is accepted by a <paramref name="validator"/> function. If the <paramref name="validator"/> function returns <c>false</c>, the prompt is repeatedly displayed until accepted input is received.
            </summary>
            <param name="prompt">The prompt to display.</param>
            <param name="inputDelimiter">The input delimiter to display.</param>
            <param name="validator">A validator function to test whether the collected input should be accepted.</param>
            <returns>A string containing the line read from standard input.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.Read(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Reads a line of input from the <see cref="T:System.Console"/> with any number of specified <paramref name="promptlines"/>, a specified <paramref name="inputDelimiter" /> and accepting any non-blank input.
            </summary>
            <param name="promptlines">The lines of the prompt to display.</param>
            <param name="inputDelimiter">The input delimiter to display.</param>
            <returns>A string containing the line read from standard input.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.Read(System.String,System.String)">
            <summary>
            Reads a line of input from the <see cref="T:System.Console"/> with a specified <paramref name="prompt"/>, a specified <paramref name="inputDelimiter" /> and accepting any non-blank input.
            </summary>
            <param name="prompt">The prompt to display.</param>
            <param name="inputDelimiter">The input delimiter to display.</param>
            <returns>A string containing the line read from standard input.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.Read(System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Reads a line of input from the <see cref="T:System.Console"/> with a specified <paramref name="prompt"/>, the default input delimiter and accepting any non-blank input. If the <paramref name="validator"/> function returns <c>false</c>, the prompt is repeatedly displayed until accepted input is received.
            </summary>
            <param name="prompt">The prompt to display.</param>
            <param name="validator">A validator function to test whether the collected input should be accepted.</param>
            <returns>A string containing the line read from standard input.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.Read(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.Boolean})">
            <summary>
            Reads a line of input from the <see cref="T:System.Console"/> with any number of specified <paramref name="promptlines"/>, the default input delimiter and accepting input that is accepted by a <paramref name="validator"/> function. If the <paramref name="validator"/> function returns <c>false</c>, the prompt is repeatedly displayed until accepted input is received.
            </summary>
            <param name="promptlines">The lines of the prompt to display.</param>
            <param name="validator">A validator function to test whether the collected input should be accepted.</param>
            <returns>A string containing the line read from standard input.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.Read(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads a line of input from the <see cref="T:System.Console"/> with any number of specified <paramref name="promptlines"/>, the default input delimiter and accepting any non-blank input.
            </summary>
            <param name="promptlines">The lines of the prompt to display.</param>
            <returns>A string containing the line read from standard input.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.Read(System.Func{System.String,System.Boolean})">
            <summary>
            Reads a line of input from the <see cref="T:System.Console"/> with no prompt, the default input delimiter and accepting input that is accepted by a <paramref name="validator"/> function.
            </summary>
            <param name="validator">A validator function to test whether the collected input should be accepted.</param>
            <returns>A string containing the line read from standard input.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.Read(System.String)">
            <summary>
            Reads a line of input from the <see cref="T:System.Console"/> with a specified <paramref name="prompt"/>, the default input delimiter and accepting any non-blank input.
            </summary>
            <param name="prompt">The prompt to display.</param>
            <returns>A string containing the line read from standard input.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.Read">
            <summary>
            Reads a line of input from the <see cref="T:System.Console"/> with no prompt, the default input delimiter and accepting any non-blank input.
            </summary>
            <returns>A string containing the line read from standard input.</returns>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteCustom(System.String,System.Boolean,System.ConsoleColor,System.Object[])">
            <summary>
            Writes a log line with custom attributes to the console.
            </summary>
            <param name="tag">The 0, 2 or 4-length tag to apply to the line. 2-length tags are padded with a space on either side. An empty string (0-length tag) means the tag is omitted entirely.</param>
            <param name="detailed">Whether to show extensive information about how this method was called in addition to the objects to log.</param>
            <param name="color">The <see cref="T:System.ConsoleColor"/> to apply to the line.</param>
            <param name="towrite">The object(s) to log.</param>
            <exception cref="T:System.ArgumentException" />
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteSuccess(System.Object[])">
            <summary>
            Writes log lines to the <see cref="T:System.Console"/> as "success" messages.
            </summary>
            <param name="towrite">The objects to write to the <see cref="T:System.Console"/>.</param>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteFollowUpSuccess(System.Object[])">
            <summary>
            Writes log lines to the console as follow-up information to "success" messages.
            </summary>
            <param name="towrite">The objects to write to the <see cref="T:System.Console"/>.</param>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteInfo(System.Object[])">
            <summary>
            Writes log lines to the <see cref="T:System.Console"/> as general "information" messages.
            </summary>
            <param name="towrite">The objects to write to the <see cref="T:System.Console"/>.</param>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteFollowUpInfo(System.Object[])">
            <summary>
            Writes log lines to the console as follow-up information to general "information" messages.
            </summary>
            <param name="towrite">The objects to write to the <see cref="T:System.Console"/>.</param>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteWarn(System.Object[])">
            <summary>
            Writes log lines to the <see cref="T:System.Console"/> as "warning" messages.
            </summary>
            <param name="towrite">The objects to write to the <see cref="T:System.Console"/>.</param>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteFollowUpWarn(System.Object[])">
            <summary>
            Writes log lines to the console as follow-up information to "warning" messages.
            </summary>
            <param name="towrite">The objects to write to the <see cref="T:System.Console"/>.</param>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteSoftWarn(System.Object[])">
            <summary>
            Writes log lines to the <see cref="T:System.Console"/> as "soft warning" messages.
            </summary>
            <param name="towrite">The objects to write to the <see cref="T:System.Console"/>.</param>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteFollowUpSoftWarn(System.Object[])">
            <summary>
            Writes log lines to the console as follow-up information to "soft warning" messages.
            </summary>
            <param name="towrite">The objects to write to the <see cref="T:System.Console"/>.</param>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteFail(System.Object[])">
            <summary>
            Writes log lines to the <see cref="T:System.Console"/> as "failure" messages.
            </summary>
            <param name="towrite">The objects to write to the <see cref="T:System.Console"/>.</param>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteFollowUpFail(System.Object[])">
            <summary>
            Writes log lines to the console as follow-up information to "failure" messages.
            </summary>
            <param name="towrite">The objects to write to the <see cref="T:System.Console"/>.</param>
        </member>
        <member name="F:LaquaiLib.Miscellaneous.Logger.TableInputMode.Rows">
            <summary>
            Indicates that the associated value contains rows of data.
            </summary>
        </member>
        <member name="F:LaquaiLib.Miscellaneous.Logger.TableInputMode.Columns">
            <summary>
            Indicates that the associated value contains columns of data.
            </summary>
        </member>
        <member name="M:LaquaiLib.Miscellaneous.Logger.WriteAsTable``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},LaquaiLib.Miscellaneous.Logger.TableInputMode)">
            <summary>
            Writes an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/> to the <see cref="T:System.Console"/> by formatting the contained values to look like a table using the specified <paramref name="tableInputMode"/>.
            </summary>
            <param name="input">The collections of values to write.</param>
            <param name="tableInputMode">How the <paramref name="input"/> value is to be interpreted as indicated by a <see cref="T:LaquaiLib.Miscellaneous.Logger.TableInputMode"/> value.</param>
        </member>
        <member name="M:LaquaiLib.RandomMath.Sum(System.Double,System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Calculates the sum of a series of output values of a function.
            </summary>
            <param name="x">The </param>
            <param name="n"></param>
            <param name="fn"></param>
            <returns></returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.RoundToMultiple(System.Double,System.Double)">
            <summary>
            Rounds a <paramref name="number"/> to the nearest multiple of a given number <paramref name="multiple"/>.
            </summary>
            <param name="number">The number to round.</param>
            <param name="multiple">The number a multiple of which <paramref name="number"/> is to be rounded to.</param>
            <returns><paramref name="number"/> rounded to a multiple of <paramref name="multiple"/>.</returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.SmoothFunctions(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Smooths two functions over a given interval using a custom smoothing function.
            </summary>
            <param name="f">The first function to use when constructing the output function.</param>
            <param name="g">The second function to use when constructing the output function.</param>
            <param name="smoothFunc">The custom smoothing function to use.</param>
            <param name="xStart">The start of the interval over which to smooth <paramref name="f"/> into <paramref name="g"/>.</param>
            <param name="xEnd">The end of the interval over which to smooth <paramref name="f"/> into <paramref name="g"/>.</param>
            <returns>A function that returns the result of <paramref name="f"/> when the input parameter is less than <paramref name="xStart"/>, the result of <paramref name="g"/> when the input parameter is greater than <paramref name="xEnd"/> and the result of <paramref name="smoothFunc"/> that combines the results of <paramref name="f"/> and <paramref name="g"/> otherwise.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="xStart"/> was greater than <paramref name="xEnd"/>.</exception>
        </member>
        <member name="M:LaquaiLib.RandomMath.SmoothFunctions(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Smooths two functions over a given interval.
            </summary>
            <param name="f">The first function to use when constructing the output function.</param>
            <param name="g">The second function to use when constructing the output function.</param>
            <param name="xStart">The start of the interval over which to smooth <paramref name="f"/> into <paramref name="g"/>.</param>
            <param name="xEnd">The end of the interval over which to smooth <paramref name="f"/> into <paramref name="g"/>.</param>
            <returns>A function that returns the result of <paramref name="f"/> when the input parameter is less than <paramref name="xStart"/>, the result of <paramref name="g"/> when the input parameter is greater than <paramref name="xEnd"/> and the result of a smoothing function that combines the results of <paramref name="f"/> and <paramref name="g"/> otherwise.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:LaquaiLib.RandomMath.Factorial(System.Double)">
            <summary>
            Computes the factorial of any number using the <see cref="T:LaquaiLib.RandomMath.Gamma"/> function.
            </summary>
            <param name="x">The number to calculate the factorial of. May be non-integral.</param>
            <returns></returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.Trigonometry.EllipseAround(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the <c>sin</c> and <c>cos</c> functions that, together, trace an ellipse with specified sine and cosine radii and a given smoothness around a point.
            </summary>
            <param name="x">The <c>x</c>-coordinate of the point to trace the ellipse around.</param>
            <param name="y">The <c>y</c>-coordinate of the point to trace the ellipse around.</param>
            <param name="rSin">The "horizontal" radius of the ellipse. If equal to <paramref name="rCos"/>, the ellipse is a circle.</param>
            <param name="rCos">The "vertical" radius of the ellipse. If equal to <paramref name="rSin"/>, the ellipse is a circle.</param>
            <param name="resolution">How many degrees / points constitute a full rotation around the circle.</param>
            <returns>A <see cref="T:System.Tuple`2"/> with the <c>Sin</c> and <c>Cos</c> functions that, together, trace an ellipse with the specified radii <paramref name="rSin"/> and <paramref name="rCos"/> and <paramref name="resolution"/> around the point <c>(<paramref name="x"/>, <paramref name="y"/>)</c>.</returns>
        </member>
        <member name="T:LaquaiLib.RandomMath.Stochastics">
            <summary>
            Provides static methods for calculating probabilities and other stochastic functions.
            </summary>
        </member>
        <member name="T:System.Xml.Linq.XRepetition">
            <summary>
            Represents an <see cref="T:System.Xml.Linq.XElement"/> that is repeated a certain number of times.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XRepetition.Count">
            <summary>
            The number of times this element is repeated when it is serialized to XML. If left unchanged, this is <c>1</c>.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XRepetition.XElement">
            <summary>
            The <see cref="T:System.Xml.Linq.XElement"/> this <see cref="T:System.Xml.Linq.XRepetition"/> wraps.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XRepetition.#ctor(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Instantiates an <see cref="T:System.Xml.Linq.XRepetition"/> from an existing <see cref="T:System.Xml.Linq.XElement"/> and the number of times it is to be repeated.
            </summary>
            <param name="other">The <see cref="T:System.Xml.Linq.XElement"/> this <see cref="T:System.Xml.Linq.XRepetition"/> wraps.</param>
            <param name="count">The number of times this element is repeated when it is serialized to XML.</param>
        </member>
        <member name="M:System.Xml.Linq.XRepetition.#ctor(System.Xml.Linq.XName,System.Int32)">
            <summary>
            Instantiates an <see cref="T:System.Xml.Linq.XRepetition"/> from an <see cref="T:System.Xml.Linq.XName"/> and the number of times it is to be repeated.
            </summary>
            <param name="name">An <see cref="T:System.Xml.Linq.XName"/> instance that represents the name of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="count">The number of times this element is repeated when it is serialized to XML.</param>
        </member>
        <member name="M:System.Xml.Linq.XRepetition.#ctor(System.Xml.Linq.XStreamingElement,System.Int32)">
            <summary>
            Instantiates an <see cref="T:System.Xml.Linq.XRepetition"/> from an existing <see cref="T:System.Xml.Linq.XStreamingElement"/> and the number of times it is to be repeated.
            </summary>
            <param name="other">The <see cref="T:System.Xml.Linq.XStreamingElement"/> this <see cref="T:System.Xml.Linq.XRepetition"/> wraps.</param>
            <param name="count">The number of times this element is repeated when it is serialized to XML.</param>
        </member>
        <member name="M:System.Xml.Linq.XRepetition.#ctor(System.Xml.Linq.XName,System.Object,System.Int32)">
            <summary>
            Instantiates an <see cref="T:System.Xml.Linq.XRepetition"/> from an <see cref="T:System.Xml.Linq.XName"/>, a content <see cref="T:System.Object"/> and the number of times it is to be repeated.
            </summary>
            <param name="name">An <see cref="T:System.Xml.Linq.XName"/> instance that represents the name of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="content">The content of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="count">The number of times this element is repeated when it is serialized to XML.</param>
        </member>
        <member name="M:System.Xml.Linq.XRepetition.#ctor(System.Xml.Linq.XName,System.Object[],System.Int32)">
            <summary>
            Instantiates an <see cref="T:System.Xml.Linq.XRepetition"/> from an <see cref="T:System.Xml.Linq.XName"/>, an <see cref="T:System.Array"/> of content <see cref="T:System.Object"/>s and the number of times it is to be repeated.
            </summary>
            <param name="name">An <see cref="T:System.Xml.Linq.XName"/> instance that represents the name of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="content">An <see cref="T:System.Array"/> of content <see cref="T:System.Object"/>s of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="count">The number of times this element is repeated when it is serialized to XML.</param>
        </member>
        <member name="M:System.Xml.Linq.XRepetition.#ctor(System.Xml.Linq.XName,System.Object[])">
            <summary>
            Instantiates an <see cref="T:System.Xml.Linq.XRepetition"/> from an <see cref="T:System.Xml.Linq.XName"/> and an <see cref="T:System.Array"/> of content <see cref="T:System.Object"/>s.
            </summary>
            <param name="name">An <see cref="T:System.Xml.Linq.XName"/> instance that represents the name of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="content">An <see cref="T:System.Array"/> of content <see cref="T:System.Object"/>s of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
        </member>
        <member name="M:System.Xml.Linq.XRepetition.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Instantiates an <see cref="T:System.Xml.Linq.XRepetition"/> from an existing <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="other">The <see cref="T:System.Xml.Linq.XElement"/> this <see cref="T:System.Xml.Linq.XRepetition"/> wraps.</param>
        </member>
        <member name="M:System.Xml.Linq.XRepetition.#ctor(System.Xml.Linq.XName)">
            <summary>
            Instantiates an <see cref="T:System.Xml.Linq.XRepetition"/> from an <see cref="T:System.Xml.Linq.XName"/>.
            </summary>
            <param name="name">An <see cref="T:System.Xml.Linq.XName"/> instance that represents the name of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
        </member>
        <member name="M:System.Xml.Linq.XRepetition.#ctor(System.Xml.Linq.XName,System.Object)">
            <summary>
            Instantiates an <see cref="T:System.Xml.Linq.XRepetition"/> from an <see cref="T:System.Xml.Linq.XName"/> and a content <see cref="T:System.Object"/>.
            </summary>
            <param name="name">An <see cref="T:System.Xml.Linq.XName"/> instance that represents the name of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="content">The content of the <see cref="T:System.Xml.Linq.XElement"/>.</param>
        </member>
        <member name="M:System.Xml.Linq.XRepetition.#ctor(System.Xml.Linq.XStreamingElement)">
            <summary>
            Instantiates an <see cref="T:System.Xml.Linq.XRepetition"/> from an existing <see cref="T:System.Xml.Linq.XStreamingElement"/>.
            </summary>
            <param name="other">The <see cref="T:System.Xml.Linq.XStreamingElement"/> this <see cref="T:System.Xml.Linq.XRepetition"/> wraps.</param>
        </member>
    </members>
</doc>
